0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; *************************************************************************
0000                             ; 
0000                             ;       Serial routines 
0000                             ; 
0000                             ;       written by Craig Jones 
0000                             ; 
0000                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
0000                             ; 
0000                             ;       see the LICENSE file in this repo for more information 
0000                             ; 
0000                             ; *****************************************************************************
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 00 08               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 02 08               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 04 08               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 06 08               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 08 08               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 0A 08               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 0E 08               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 10 08               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 12 08               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 14 08               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 28 0A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 00 08               LD   (RST08),HL   
0094   22 02 08               LD   (RST10),HL   
0097   22 04 08               LD   (RST18),HL   
009A   22 06 08               LD   (RST20),HL   
009D   22 08 08               LD   (RST28),HL   
00A0   22 0A 08               LD   (RST30),HL   
00A3   22 0E 08               LD   (INTVEC),HL   
00A6   22 10 08               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 12 08               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 14 08               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 28 02               JP   start   ; into #180 of the prog
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       TecM8 1.0 Assembler for the Tec-1
00C6                             ; 
00C6                             ;       by John Hardy
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                             ; **************************************************************************
00C6                             ; Constants
00C6                             ; **************************************************************************
00C6                TRUE:     EQU   -1   
00C6                FALSE:    EQU   0   
00C6                CTRL_C:   EQU   3   
00C6                CTRL_H:   EQU   8   
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put TecM8 code from here	
0180                OPCODES:      
0180   02                     DB   lsb(bang_)   ;   !
0181   00                     DB   lsb(dquote_)   ;   "
0182   00                     DB   lsb(hash_)   ;   #
0183   00                     DB   lsb(dollar_)   ;   $
0184   00                     DB   lsb(percent_)   ;   %
0185   00                     DB   lsb(amper_)   ;   &
0186   00                     DB   lsb(quote_)   ;   '
0187   00                     DB   lsb(lparen_)   ;   (
0188   00                     DB   lsb(rparen_)   ;   )
0189   00                     DB   lsb(star_)   ;   *
018A   02                     DB   lsb(plus_)   ;   +
018B   00                     DB   lsb(comma_)   ;   ,
018C   00                     DB   lsb(minus_)   ;   -
018D   02                     DB   lsb(dot_)   ;   .
018E   00                     DB   lsb(slash_)   ;   /	
018F   02                     DB   lsb(colon_)   ;    :
0190   02                     DB   lsb(semi_)   ;    ;
0191   00                     DB   lsb(lt_)   ;    <
0192   00                     DB   lsb(eq_)   ;    =
0193   00                     DB   lsb(gt_)   ;    >
0194   00                     DB   lsb(question_)   ;    ?
0195   00                     DB   lsb(at_)   ;    @
0196   00                     DB   lsb(lbrack_)   ;    [
0197   00                     DB   lsb(bslash_)   ;    \
0198   00                     DB   lsb(rbrack_)   ;    ]
0199   00                     DB   lsb(caret_)   ;    ^
019A   00                     DB   lsb(underscore_)   ;    _
019B   00                     DB   lsb(grave_)   ;    `
019C   00                     DB   lsb(lbrace_)   ;    {
019D   00                     DB   lsb(pipe_)   ;    |
019E   00                     DB   lsb(rbrace_)   ;    }
019F   00                     DB   lsb(tilde_)   ;    ~
01A0                          ALIGN   $100   
0200                NOP_:        
0200                BSLASH_:      
0200                QUOTE_:      ; Discard the top member of the stack
0200                AT_:         
0200                UNDERSCORE_:      
0200                PERCENT_:      
0200                AMPER_:      
0200                PIPE_:       
0200                CARET_:      
0200                TILDE_:      
0200                INVERT:      ; Bitwise INVert the top member of the stack
0200                DQUOTE_:      
0200                COMMA_:      ; print hexadecimal
0200                LBRACE_:      
0200                RBRACE_:      
0200                DOLLAR_:      
0200                MINUS_:      ; Subtract the value 2nd on stack from top of stack
0200                EQ_:         
0200                GT_:         
0200                LT_:         
0200                GRAVE_:      
0200                RPAREN_:      
0200                LBRACK_:      
0200                RBRACK_:      
0200                LPAREN_:      
0200                SLASH_:      
0200                QUESTION_:      
0200                HASH_:       
0200                STAR_:       
0200   FD E9                  JP   (iy)   
0202                BANG_:       ; Store the value at the address placed on the top of the stack
0202                PLUS_:       ; add the top 2 members of the stack
0202                DOT_:        
0202                SEMI_:       
0202                COLON_:      
0202                INIT:        
0202   AF                     XOR   a   ; a = NUL_ token
0203   32 1A 08               LD   (vToken),a   
0206   21 28 08               LD   hl,chars   
0209   22 1E 08               LD   (vCharPtr),hl   
020C   21 28 0D               LD   hl,assembly   
020F   22 20 08               LD   (vAsmPtr),hl   
0212   21 28 0A               LD   hl,strings   
0215   22 22 08               LD   (vStrPtr),hl   
0218   22 1C 08               LD   (vTokPtr),hl   
021B   21 28 0B               LD   hl,symbols   
021E   22 24 08               LD   (vSymPtr),hl   
0221   21 28 0C               LD   hl,exprs   
0224   22 26 08               LD   (vExprPtr),hl   
0227   C9                     RET      
0228                EOF_:     EQU   -1   
0228                NUL_:     EQU   0   
0228                END_:     EQU   2   
0228                SKIP_:    EQU   3   
0228                NUM_:     EQU   4   
0228                ID_:      EQU   5   
0228                START:       ; entry point of TecM8
0228   31 28 0A               LD   sp,STACK   
022B   CD 02 02               CALL   init   
022E   CD 15 03               CALL   printStr   
0231   54 65 63 4D 38 20 30 2E 30 0D 0A 00 .CSTR   "TecM8 0.0\r\n"   
023D                PROGRAM:      
023D   CD 64 02               CALL   statementList   
0240   CD 15 03               CALL   printStr   
0243   50 61 72 73 69 6E 67 20 63 6F 6D 70 6C 65 74 65 64 20 73 75 63 63 65 73 73 66 75 6C 6C 79 2E 00 .CSTR   "Parsing completed successfully."   ; 
0263   76                     HALT      
0264                STATEMENTLIST:      
0264   3A 1A 08               LD   a,(vToken)   
0267   FE FF                  CP   EOF_   
0269   C8                     RET   z   
026A   CD 88 02               CALL   statement   
026D   FE 02                  CP   END_   
026F   CD 89 02               CALL   match   
0272   28 F0                  JR   z,statementList   
0274   CD 1B 03               CALL   error   
0277   45 78 70 65 63 74 65 64 20 6E 65 77 6C 69 6E 65 00 .CSTR   "Expected newline"   
0288                STATEMENT:      
0288   C9                     RET      
0289                MATCH:       
0289   C0                     RET   nz   
028A   F5                     PUSH   af   
028B   CD 92 02               CALL   nextToken   
028E   6F                     LD   l,a   
028F   F1                     POP   af   
0290   7D                     LD   a,l   
0291   C9                     RET      
0292                NEXTTOKEN:      
0292   21 00 00               LD   hl,0   
0295   CD F2 02               CALL   nextChar   
0298   3D                     DEC   a   ; if -ve then EOF
0299   38 50                  JR   c,nextToken1x   
029B   3C                     INC   a   ; restore a
029C   FE 21                  CP   " "+1   ; is it whitespace
029E   30 10                  JR   nc,nextToken3   
02A0                NEXTTOKEN1:      
02A0   B7                     OR   a   ; is it null
02A1   28 09                  JR   z,nextToken2   
02A3   FE 21                  CP   " "+1   
02A5   30 05                  JR   nc,nextToken2   
02A7   CD F2 02               CALL   nextChar   
02AA   18 F4                  JR   nextToken1   
02AC                NEXTTOKEN2:      
02AC   3E 03                  LD   a,SKIP_   
02AE   18 3B                  JR   nextToken1x   
02B0                NEXTTOKEN3:      
02B0   FE 2D                  CP   "-"   
02B2   28 0E                  JR   z,nextToken4   
02B4   FE 24                  CP   "$"   
02B6   28 0A                  JR   z,nextToken4   
02B8   FE 30                  CP   "0"   
02BA   30 06                  JR   nc,nextToken4   
02BC   FE 3A                  CP   "9"+1   
02BE   38 02                  JR   c,nextToken4   
02C0   18 07                  JR   nextToken5   
02C2                NEXTTOKEN4:      
02C2   CD FD 02               CALL   number   
02C5   3E 04                  LD   a,NUM_   
02C7   18 22                  JR   nextToken1x   
02C9                NEXTTOKEN5:      
02C9   FE 5F                  CP   "_"   
02CB   28 12                  JR   z,nextToken6   
02CD   FE 41                  CP   "A"   
02CF   30 0E                  JR   nc,nextToken6   
02D1   FE 5B                  CP   "Z"+1   
02D3   38 0A                  JR   c,nextToken6   
02D5   FE 61                  CP   "a"   
02D7   30 06                  JR   nc,nextToken6   
02D9   FE 7B                  CP   "z"+1   
02DB   38 02                  JR   c,nextToken6   
02DD   18 07                  JR   nextToken7   
02DF                NEXTTOKEN6:      
02DF   CD 01 03               CALL   ident   
02E2   3E 05                  LD   a,ID_   
02E4   18 05                  JR   nextToken1x   
02E6                NEXTTOKEN7:      
02E6   3E 00                  LD   a,NUL_   
02E8   21 00 00               LD   hl,0   
02EB                NEXTTOKEN1X:      
02EB   32 1A 08               LD   (vToken),a   
02EE   22 1C 08               LD   (vTokPtr),hl   
02F1   C9                     RET      
02F2                NEXTCHAR:      
02F2   ED 4B 1E 08            LD   bc,(vCharPtr)   
02F6   0A                     LD   a,(bc)   
02F7   03                     INC   bc   
02F8   ED 43 1E 08            LD   (vCharPtr),bc   
02FC   C9                     RET      
02FD                NUMBER:      
02FD   21 00 00               LD   hl,0   
0300   C9                     RET      
0301                IDENT:       
0301   21 00 00               LD   hl,0   
0304   C9                     RET      
0305                             ; interpret:
0305                             ;     call prompt
0305                             ;     ld bc,TIB               ; load bc with offset into TIB, decide char into tib or execute or control
0305                             ; interpret2:                 ; calc nesting
0305                             ;     call getchar            ; loop around waiting for character from serial port
0305                             ;     cp $20			        ; compare to space
0305                             ;     jr C,interpret3		    ; if >= space, if below 20 set carry flag
0305                             ;     ld (bc),A               ; store the character in textbuf
0305                             ;     inc bc
0305                             ;     call putchar            ; echo character to screen
0305                             ;     jr interpret2            ; wait for next character
0305                             ; interpret3:
0305                             ;     cp "\r"                 ; carriage return? ascii 13
0305                             ;     jr Z,interpret4		    ; if anything else its control char
0305                             ;     cp "\n"                 ; carriage return? ascii 13
0305                             ;     jr Z,interpret4		    ; if anything else its control char
0305                             ;     cp CTRL_H               ; backSpace ?
0305                             ;     jr nz,interpret2        ; no, ignore
0305                             ;     ld hl,TIB               ; is bc at start of TIB
0305                             ;     or a
0305                             ;     sbc hl,bc
0305                             ;     ld a,h                  ; is bc at start of TIB?
0305                             ;     or l
0305                             ;     jr z, interpret2        ; yes, ignore backspace
0305                             ;     dec bc
0305                             ;     call printStr
0305                             ;     .cstr "\b \b"
0305                             ;     jr interpret2
0305                             ; interpret4:
0305                             ;     ld a,"\n"
0305                             ;     ld (bc),a               ; store null in text buffer
0305                             ;     call crlf               ; echo newline to screen
0305                             ;     ld bc,TIB               ; Instructions stored on heap at address HERE, we pressed enter
0305                             ;     dec bc
0305                             ; next:
0305                             ;     inc bc                  ; Increment the IP
0305                             ;     ld a,(bc)               ; Get the next character and dispatch
0305                             ;     or a                    ; is it NUL?
0305                             ;     jr z,exit
0305                             ;     cp "\n"                 ; is it newline?
0305                             ;     jr z,interpret
0305                             ;     cp "0"
0305                             ;     ld d,"!"
0305                             ;     jr c,op
0305                             ;     cp "9"+1
0305                             ;     jr c,num
0305                             ;     cp "A"
0305                             ;     ld d,"!"+10
0305                             ;     jr c,op
0305                             ;     cp "Z"+1
0305                             ;     jr c,callx
0305                             ;     cp "a"
0305                             ;     ld d,"!"+10+26
0305                             ;     jr c,op
0305                             ;     cp "z"+1
0305                             ;     jp c,var
0305                             ;     ld d,"!"+10+26+26
0305                             ; op:
0305                             ;     sub d
0305                             ;     jr c,next
0305                             ;     add a,lsb(opcodes)
0305                             ;     ld l,A                      ; Index into table
0305                             ;     ld h,msb(opcodes)           ; Start address of jump table
0305                             ;     ld l,(hl)                   ; get low jump address
0305                             ;     inc h                       ; msb on next page
0305                             ;     jp (hl)                     ; Jump to routine
0305                             ; exit:
0305                             ;     inc bc			; store offests into a table of bytes, smaller
0305                             ;     ld de,bc
0305                             ;     ld ix,(vBasePtr)        ;
0305                             ;     call rpop               ; Restore old base pointer
0305                             ;     ld (vBasePtr),hl
0305                             ;     call rpop               ; Restore Instruction pointer
0305                             ;     ld bc,hl
0305                             ;     EX de,hl
0305                             ;     jp (hl)
0305                             ; num:
0305                             ; 	ld hl,$0000				    ; Clear hl to accept the number
0305                             ;     cp "-"
0305                             ;     jr nz,num0
0305                             ;     inc bc                      ; move to next char, no flags affected
0305                             ; num0:
0305                             ;     ex af,af'                   ; save zero flag = 0 for later
0305                             ; num1:
0305                             ;     ld a,(bc)                   ; read digit
0305                             ;     sub "0"                     ; less than 0?
0305                             ;     jr c, num2                  ; not a digit, exit loop
0305                             ;     cp 10                       ; greater that 9?
0305                             ;     jr nc, num2                 ; not a digit, exit loop
0305                             ;     inc bc                      ; inc IP
0305                             ;     ld de,hl                    ; multiply hl * 10
0305                             ;     add hl,hl
0305                             ;     add hl,hl
0305                             ;     add hl,de
0305                             ;     add hl,hl
0305                             ;     add a,l                     ; add digit in a to hl
0305                             ;     ld l,a
0305                             ;     ld a,0
0305                             ;     adc a,h
0305                             ;     ld h,a
0305                             ;     jr num1
0305                             ; num2:
0305                             ;     dec bc
0305                             ;     ex af,af'                   ; restore zero flag
0305                             ;     jr nz, num3
0305                             ;     ex de,hl                    ; negate the value of hl
0305                             ;     ld hl,0
0305                             ;     or a                        ; jump to sub2
0305                             ;     sbc hl,de
0305                             ; num3:
0305                             ;     push hl                     ; Put the number on the stack
0305                             ;     jp (iy)                     ; and process the next character
0305                             ; callx:
0305                             ;     call lookupRef0
0305                             ;     ld E,(hl)
0305                             ;     inc hl
0305                             ;     ld D,(hl)
0305                             ;     ld a,D                      ; skip if destination address is null
0305                             ;     or E
0305                             ;     jr Z,call2
0305                             ;     ld hl,bc
0305                             ;     inc bc                      ; read next char from source
0305                             ;     ld a,(bc)                   ; if ; to tail call optimise
0305                             ;     cp ";"                      ; by jumping to rather than calling destination
0305                             ;     jr Z,call1
0305                             ;     call rpush                  ; save Instruction Pointer
0305                             ;     ld hl,(vBasePtr)
0305                             ;     call rpush
0305                             ;     ld (vBasePtr),ix
0305                             ; call1:
0305                             ;     ld bc,de
0305                             ;     dec bc
0305                             ; call2:
0305                             ;     jp (iy)
0305                             ; var:
0305                             ;     ld hl,vars
0305                             ;     call lookupRef
0305                             ; var1:
0305                             ;     ld (vPointer),hl
0305                             ;     ld d,0
0305                             ;     ld e,(hl)
0305                             ;     ld a,(vByteMode)
0305                             ;     inc a                       ; is it byte?
0305                             ;     jr z,var2
0305                             ;     inc hl
0305                             ;     ld d,(hl)
0305                             ; var2:
0305                             ;     push de
0305                             ;     jp (iy)
0305                             ; lookupRef0:
0305                             ;     ld hl,defs
0305                             ;     sub "A"
0305                             ;     jr lookupRef1
0305                             ; lookupRef:
0305                             ;     sub "a"
0305                             ; lookupRef1:
0305                             ;     add a,a
0305                             ;     add a,l
0305                             ;     ld l,a
0305                             ;     ld a,0
0305                             ;     ADC a,h
0305                             ;     ld h,a
0305                             ;     XOR a
0305                             ;     or e                        ; sets Z flag if A-Z
0305                             ;     ret
0305                PROMPT:      
0305   CD 15 03               CALL   printStr   
0308   0D 0A 3E 20 00         .CSTR   "\r\n> "   
030D   C9                     RET      
030E                CRLF:        
030E   CD 15 03               CALL   printStr   
0311   0D 0A 00               .CSTR   "\r\n"   
0314   C9                     RET      
0315                             ; printStr:
0315                             ;     EX (sp),hl		                ; swap			
0315                             ;     call putStr		
0315                             ;     inc hl			                ; inc past null
0315                             ;     EX (sp),hl		                ; put it back	
0315                             ;     ret
0315                PRINTSTR:      
0315   E1                     POP   hl   ; "return" address is address of string			
0316   CD 24 03               CALL   putStr   
0319   23                     INC   hl   ; inc past null
031A   E9                     JP   (hl)   ; put it back	
031B                ERROR:       
031B   E1                     POP   hl   
031C   CD 24 03               CALL   putStr   
031F   76                     HALT      
0320                PUTSTR0:      
0320   CD 85 00               CALL   putchar   
0323   23                     INC   hl   
0324                PUTSTR:      
0324   7E                     LD   a,(hl)   
0325   B7                     OR   A   
0326   20 F8                  JR   nz,putStr0   
0328   C9                     RET      
0329                RPUSH:       
0329   DD 2B                  DEC   ix   
032B   DD 74 00               LD   (ix+0),H   
032E   DD 2B                  DEC   ix   
0330   DD 75 00               LD   (ix+0),L   
0333   C9                     RET      
0334                RPOP:        
0334   DD 6E 00               LD   L,(ix+0)   
0337   DD 23                  INC   ix   
0339   DD 66 00               LD   H,(ix+0)   
033C   DD 23                  INC   ix   
033E                RPOP2:       
033E   C9                     RET      
033F                             ; enter:
033F                             ;     ld hl,bc
033F                             ;     call rpush                      ; save Instruction Pointer
033F                             ;     ld hl,(vBasePtr)
033F                             ;     call rpush
033F                             ;     ld (vBasePtr),ix
033F                             ;     pop bc
033F                             ;     dec bc
033F                             ;     jp (iy)
033F                             ; hl = value
033F                PRINTDEC:      
033F   CB 7C                  BIT   7,h   
0341   28 0B                  JR   z,printDec2   
0343   3E 2D                  LD   a,"-"   
0345   CD 85 00               CALL   putchar   
0348   AF                     XOR   a   
0349   95                     SUB   l   
034A   6F                     LD   l,a   
034B   9F                     SBC   a,a   
034C   94                     SUB   h   
034D   67                     LD   h,a   
034E                PRINTDEC2:      
034E   C5                     PUSH   bc   
034F   0E 00                  LD   c,0   ; leading zeros flag = false
0351   11 F0 D8               LD   de,-10000   
0354   CD 70 03               CALL   printDec4   
0357   11 18 FC               LD   de,-1000   
035A   CD 70 03               CALL   printDec4   
035D   11 9C FF               LD   de,-100   
0360   CD 70 03               CALL   printDec4   
0363   1E F6                  LD   e,-10   
0365   CD 70 03               CALL   printDec4   
0368   0C                     INC   c   ; flag = true for at least digit
0369   1E FF                  LD   e,-1   
036B   CD 70 03               CALL   printDec4   
036E   C1                     POP   bc   
036F   C9                     RET      
0370                PRINTDEC4:      
0370   06 2F                  LD   b,"0"-1   
0372                PRINTDEC5:      
0372   04                     INC   b   
0373   19                     ADD   hl,de   
0374   38 FC                  JR   c,printDec5   
0376   ED 52                  SBC   hl,de   
0378   3E 30                  LD   a,"0"   
037A   B8                     CP   b   
037B   20 05                  JR   nz,printDec6   
037D   AF                     XOR   a   
037E   B1                     OR   c   
037F   C8                     RET   z   
0380   18 01                  JR   printDec7   
0382                PRINTDEC6:      
0382   0C                     INC   c   
0383                PRINTDEC7:      
0383   78                     LD   a,b   
0384   C3 85 00               JP   putchar   
0387                             ; def:                                ; Create a colon definition
0387                             ;     inc bc
0387                             ;     ld  a,(bc)                  ; Get the next character
0387                             ;     cp ":"                      ; is it anonymouse
0387                             ;     jr nz,def0
0387                             ;     inc bc
0387                             ;     ld de,(vHeapPtr)            ; return start of definition
0387                             ;     push de
0387                             ;     jr def1
0387                             ; def0:
0387                             ;     call lookupRef0
0387                             ;     ld de,(vHeapPtr)            ; start of defintion
0387                             ;     ld (hl),E                   ; Save low byte of address in CFA
0387                             ;     inc hl
0387                             ;     ld (hl),D                   ; Save high byte of address in CFA+1
0387                             ;     inc bc
0387                             ; def1:                               ; Skip to end of definition
0387                             ;     ld a,(bc)                   ; Get the next character
0387                             ;     inc bc                      ; Point to next character
0387                             ;     ld (de),A
0387                             ;     inc de
0387                             ;     cp ";"                      ; Is it a semicolon
0387                             ;     jr Z, def2                  ; end the definition
0387                             ;     jr  def1                    ; get the next element
0387                             ; def2:
0387                             ;     dec bc
0387                             ; def3:
0387                             ;     ld (vHeapPtr),de            ; bump heap ptr to after definiton
0387                             ;     jp (iy)
0387                             ; *******************************************************************************
0387                             ; *********  END OF MAIN   ******************************************************
0387                             ; *******************************************************************************
0800                          .ORG   RAMSTART   
0800                RST08:    DS   2   
0802                RST10:    DS   2   
0804                RST18:    DS   2   
0806                RST20:    DS   2   
0808                RST28:    DS   2   
080A                RST30:    DS   2   ; 
080C                BAUD:     DS   2   ; 
080E                INTVEC:   DS   2   ; 
0810                NMIVEC:   DS   2   ; 
0812                GETCVEC:   DS   2   ; 
0814                PUTCVEC:   DS   2   ; 
0816                VTEMP1:   DS   2   ; temp var 1
0818                VTEMP2:   DS   2   ; temp var 2
081A                VTOKEN:   DS   2   ; byte containing enum of token type
081C                VTOKPTR:   DS   2   ; pointer to start of token value
081E                VCHARPTR:   DS   2   ; pointer to char position into input buffer
0820                VASMPTR:   DS   2   ; pointer to assembly point
0822                VSTRPTR:   DS   2   ; pointer to string stack
0824                VSYMPTR:   DS   2   ; pointer to symbol stack
0826                VEXPRPTR:   DS   2   ; pointer to expression stack
0828                CHARS:    DS   $100   ; page aligned, 256 bytes , a long line!
0928                          DS   $100   
0A28                STACK:       ; grows down
0A28                STRINGS:   DS   $100   ; string heap - grows up
0B28                SYMBOLS:   DS   $100   ; symbol heap - grows up
0C28                EXPRS:    DS   $100   ; expression heap - grows up
0D28                ASSEMBLY:      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 116 IN IOSerial.asm
                    > USED AT LINE 122 IN IOSerial.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 134 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 146 IN IOSerial.asm
                    > USED AT LINE 152 IN IOSerial.asm
                    > USED AT LINE 158 IN IOSerial.asm
                    > USED AT LINE 200 IN IOSerial.asm
                    > USED AT LINE 26 IN MAIN.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 33 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
                    > USED AT LINE 498 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 34 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 322 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 36 IN IOSerial.asm
                    > USED AT LINE 326 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 475 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 46 IN IOSerial.asm
                    > USED AT LINE 497 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 50 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 51 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 52 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 53 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 54 IN IOSerial.asm
                    > USED AT LINE 497 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 55 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 56 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 57 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 61 IN IOSerial.asm
                    > USED AT LINE 497 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 62 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 63 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 64 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 68 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 72 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 73 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 74 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 75 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 76 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 77 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 78 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 79 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 87 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 88 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 89 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 90 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 91 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 92 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 93 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 94 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 107 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 108 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 109 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 113 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 163 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 481 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 187 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 193 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 196 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 469 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 305 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 308 IN IOSerial.asm
                    > USED AT LINE 312 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 320 IN IOSerial.asm
                    > USED AT LINE 467 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 321 IN IOSerial.asm
                    > USED AT LINE 325 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 445 IN IOSerial.asm
PUTCHAR:            0085 DEFINED AT LINE 449 IN IOSerial.asm
                    > USED AT LINE 449 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
                    > USED AT LINE 528 IN MAIN.asm
RESET:              008B DEFINED AT LINE 455 IN IOSerial.asm
                    > USED AT LINE 114 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 17 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 18 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 19 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 20 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 28 IN MAIN.asm
NOP_:               0200 DEFINED AT LINE 67 IN MAIN.asm
BSLASH_:            0200 DEFINED AT LINE 68 IN MAIN.asm
QUOTE_:             0200 DEFINED AT LINE 69 IN MAIN.asm
AT_:                0200 DEFINED AT LINE 70 IN MAIN.asm
UNDERSCORE_:        0200 DEFINED AT LINE 71 IN MAIN.asm
PERCENT_:           0200 DEFINED AT LINE 72 IN MAIN.asm
AMPER_:             0200 DEFINED AT LINE 73 IN MAIN.asm
PIPE_:              0200 DEFINED AT LINE 74 IN MAIN.asm
CARET_:             0200 DEFINED AT LINE 75 IN MAIN.asm
TILDE_:             0200 DEFINED AT LINE 76 IN MAIN.asm
INVERT:             0200 DEFINED AT LINE 77 IN MAIN.asm
DQUOTE_:            0200 DEFINED AT LINE 78 IN MAIN.asm
COMMA_:             0200 DEFINED AT LINE 79 IN MAIN.asm
LBRACE_:            0200 DEFINED AT LINE 80 IN MAIN.asm
RBRACE_:            0200 DEFINED AT LINE 81 IN MAIN.asm
DOLLAR_:            0200 DEFINED AT LINE 82 IN MAIN.asm
MINUS_:             0200 DEFINED AT LINE 83 IN MAIN.asm
EQ_:                0200 DEFINED AT LINE 84 IN MAIN.asm
GT_:                0200 DEFINED AT LINE 85 IN MAIN.asm
LT_:                0200 DEFINED AT LINE 86 IN MAIN.asm
GRAVE_:             0200 DEFINED AT LINE 87 IN MAIN.asm
RPAREN_:            0200 DEFINED AT LINE 88 IN MAIN.asm
LBRACK_:            0200 DEFINED AT LINE 89 IN MAIN.asm
RBRACK_:            0200 DEFINED AT LINE 90 IN MAIN.asm
LPAREN_:            0200 DEFINED AT LINE 91 IN MAIN.asm
SLASH_:             0200 DEFINED AT LINE 92 IN MAIN.asm
QUESTION_:          0200 DEFINED AT LINE 93 IN MAIN.asm
HASH_:              0200 DEFINED AT LINE 94 IN MAIN.asm
STAR_:              0200 DEFINED AT LINE 95 IN MAIN.asm
BANG_:              0202 DEFINED AT LINE 98 IN MAIN.asm
PLUS_:              0202 DEFINED AT LINE 100 IN MAIN.asm
DOT_:               0202 DEFINED AT LINE 102 IN MAIN.asm
SEMI_:              0202 DEFINED AT LINE 104 IN MAIN.asm
COLON_:             0202 DEFINED AT LINE 106 IN MAIN.asm
INIT:               0202 DEFINED AT LINE 108 IN MAIN.asm
                    > USED AT LINE 134 IN MAIN.asm
EOF_:               00-1 DEFINED AT LINE 124 IN MAIN.asm
                    > USED AT LINE 147 IN MAIN.asm
NUL_:               0000 DEFINED AT LINE 125 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
END_:               0002 DEFINED AT LINE 126 IN MAIN.asm
                    > USED AT LINE 150 IN MAIN.asm
SKIP_:              0003 DEFINED AT LINE 127 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
NUM_:               0004 DEFINED AT LINE 128 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
ID_:                0005 DEFINED AT LINE 129 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
START:              0228 DEFINED AT LINE 132 IN MAIN.asm
                    > USED AT LINE 6
PROGRAM:            023D DEFINED AT LINE 139 IN MAIN.asm
STATEMENTLIST:      0264 DEFINED AT LINE 145 IN MAIN.asm
                    > USED AT LINE 140 IN MAIN.asm
                    > USED AT LINE 152 IN MAIN.asm
STATEMENT:          0288 DEFINED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 149 IN MAIN.asm
MATCH:              0289 DEFINED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 151 IN MAIN.asm
NEXTTOKEN:          0292 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
NEXTTOKEN1:         02A0 DEFINED AT LINE 176 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
NEXTTOKEN2:         02AC DEFINED AT LINE 183 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
NEXTTOKEN3:         02B0 DEFINED AT LINE 186 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
NEXTTOKEN4:         02C2 DEFINED AT LINE 196 IN MAIN.asm
                    > USED AT LINE 188 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
NEXTTOKEN5:         02C9 DEFINED AT LINE 200 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
NEXTTOKEN6:         02DF DEFINED AT LINE 212 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
NEXTTOKEN7:         02E6 DEFINED AT LINE 216 IN MAIN.asm
                    > USED AT LINE 211 IN MAIN.asm
NEXTTOKEN1X:        02EB DEFINED AT LINE 219 IN MAIN.asm
                    > USED AT LINE 172 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
NEXTCHAR:           02F2 DEFINED AT LINE 224 IN MAIN.asm
                    > USED AT LINE 170 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
NUMBER:             02FD DEFINED AT LINE 231 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
IDENT:              0301 DEFINED AT LINE 235 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
PROMPT:             0305 DEFINED AT LINE 420 IN MAIN.asm
CRLF:               030E DEFINED AT LINE 425 IN MAIN.asm
PRINTSTR:           0315 DEFINED AT LINE 437 IN MAIN.asm
                    > USED AT LINE 136 IN MAIN.asm
                    > USED AT LINE 141 IN MAIN.asm
                    > USED AT LINE 421 IN MAIN.asm
                    > USED AT LINE 426 IN MAIN.asm
ERROR:              031B DEFINED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 153 IN MAIN.asm
PUTSTR0:            0320 DEFINED AT LINE 448 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
PUTSTR:             0324 DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 439 IN MAIN.asm
                    > USED AT LINE 445 IN MAIN.asm
RPUSH:              0329 DEFINED AT LINE 457 IN MAIN.asm
RPOP:               0334 DEFINED AT LINE 464 IN MAIN.asm
RPOP2:              033E DEFINED AT LINE 469 IN MAIN.asm
PRINTDEC:           033F DEFINED AT LINE 483 IN MAIN.asm
PRINTDEC2:          034E DEFINED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
PRINTDEC4:          0370 DEFINED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 500 IN MAIN.asm
                    > USED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
PRINTDEC5:          0372 DEFINED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
PRINTDEC6:          0382 DEFINED AT LINE 524 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
PRINTDEC7:          0383 DEFINED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 523 IN MAIN.asm
RST08:              0800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 118 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
RST10:              0802 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 124 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
RST18:              0804 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 130 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
RST20:              0806 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 136 IN IOSerial.asm
                    > USED AT LINE 461 IN IOSerial.asm
RST28:              0808 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RST30:              080A DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 148 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
BAUD:               080C DEFINED AT LINE 9 IN ram.asm
INTVEC:             080E DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 154 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
NMIVEC:             0810 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 202 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
GETCVEC:            0812 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 468 IN IOSerial.asm
PUTCVEC:            0814 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
VTEMP1:             0816 DEFINED AT LINE 15 IN ram.asm
VTEMP2:             0818 DEFINED AT LINE 16 IN ram.asm
VTOKEN:             081A DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 110 IN MAIN.asm
                    > USED AT LINE 146 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
VTOKPTR:            081C DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 117 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
VCHARPTR:           081E DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 112 IN MAIN.asm
                    > USED AT LINE 225 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
VASMPTR:            0820 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN MAIN.asm
VSTRPTR:            0822 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 116 IN MAIN.asm
VSYMPTR:            0824 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 119 IN MAIN.asm
VEXPRPTR:           0826 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 121 IN MAIN.asm
CHARS:              0828 DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 111 IN MAIN.asm
STACK:              0A28 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 456 IN IOSerial.asm
                    > USED AT LINE 133 IN MAIN.asm
STRINGS:            0A28 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 115 IN MAIN.asm
SYMBOLS:            0B28 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 118 IN MAIN.asm
EXPRS:              0C28 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 120 IN MAIN.asm
ASSEMBLY:           0D28 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 113 IN MAIN.asm
