0000                          .ENGINE   mycomputer   
0000                             ; 
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                NO_MATCH:   EQU   -1   
0000                CTRL_C:   EQU   3   
0000                CTRL_H:   EQU   8   
0000                BUFFER_SIZE:   EQU   80   
0000                EOF:      EQU   -1   
0000                TOKENS:      
0000                COLON_:   EQU   ":"   
0000                COMMA_:   EQU   ","   
0000                DIRECT_:   EQU   "D"   
0000                DOLLAR_:   EQU   "$"   
0000                EOF_:     EQU   "E"   
0000                FLAG_:    EQU   "F"   
0000                IDENT_:   EQU   "I"   
0000                LABEL_:   EQU   "L"   
0000                LPAREN_:   EQU   "("   
0000                NEWLN_:   EQU   "\n"   
0000                NUM_:     EQU   "9"   
0000                OPCODE_:   EQU   "C"   
0000                REG_:     EQU   "R"   
0000                REGPAIR_:   EQU   "P"   
0000                RPAREN_:   EQU   ")"   
0000                UNKNOWN_:   EQU   "U"   
0000                ALU_IDX:      
0000                ADD_:     EQU   0   
0000                ADC_:     EQU   1   
0000                SUB_:     EQU   2   
0000                SBC_:     EQU   3   
0000                AND_:     EQU   4   
0000                XOR_:     EQU   5   
0000                OR_:      EQU   6   
0000                CP_:      EQU   7   
0000                ROT_IDX:      
0000                RLC_:     EQU   0 | 0x10   
0000                RRC_:     EQU   1 | 0x10   
0000                RL_:      EQU   2 | 0x10   
0000                RR_:      EQU   3 | 0x10   
0000                SLA_:     EQU   4 | 0x10   
0000                SRA_:     EQU   5 | 0x10   
0000                SLL_:     EQU   6 | 0x10   
0000                SRL_:     EQU   7 | 0x10   
0000                GEN_IDX:      
0000                             ; Opcode values
0000                BIT_:     EQU   0  | 0x40   
0000                CALL_:    EQU   1  | 0x40   
0000                CCF_:     EQU   2  | 0x40   
0000                CPD_:     EQU   3  | 0x40   
0000                CPDR_:    EQU   4  | 0x40   
0000                CPI_:     EQU   5  | 0x40   
0000                CPIR_:    EQU   6  | 0x40   
0000                CPL_:     EQU   7  | 0x40   
0000                DAA_:     EQU   8  | 0x40   
0000                DEC_:     EQU   9  | 0x40   
0000                DI_:      EQU   10 | 0x40   
0000                DJNZ_:    EQU   11 | 0x40   
0000                EI_:      EQU   12 | 0x40   
0000                EX_:      EQU   13 | 0x40   
0000                EXX_:     EQU   14 | 0x40   
0000                HALT_:    EQU   15 | 0x40   
0000                IM_:      EQU   16 | 0x40   
0000                IN_:      EQU   17 | 0x40   
0000                INC_:     EQU   18 | 0x40   
0000                IND_:     EQU   19 | 0x40   
0000                INDR_:    EQU   20 | 0x40   
0000                INI_:     EQU   21 | 0x40   
0000                INIR_:    EQU   22 | 0x40   
0000                JP_:      EQU   23 | 0x40   
0000                JR_:      EQU   24 | 0x40   
0000                LD_:      EQU   25 | 0x40   
0000                LDD_:     EQU   26 | 0x40   
0000                LDDR_:    EQU   27 | 0x40   
0000                LDI_:     EQU   28 | 0x40   
0000                LDIR_:    EQU   29 | 0x40   
0000                NEG_:     EQU   30 | 0x40   
0000                NOP_:     EQU   31 | 0x40   
0000                OTDR_:    EQU   32 | 0x40   
0000                OTIR_:    EQU   33 | 0x40   
0000                OUT_:     EQU   34 | 0x40   
0000                OUTD_:    EQU   35 | 0x40   
0000                OUTI_:    EQU   36 | 0x40   
0000                POP_:     EQU   37 | 0x40   
0000                PUSH_:    EQU   38 | 0x40   
0000                RES_:     EQU   39 | 0x40   
0000                RET_:     EQU   40 | 0x40   
0000                RETI_:    EQU   41 | 0x40   
0000                RETN_:    EQU   42 | 0x40   
0000                RLA_:     EQU   43 | 0x40   
0000                RLCA_:    EQU   44 | 0x40   
0000                RLD_:     EQU   45 | 0x40   
0000                RRA_:     EQU   46 | 0x40   
0000                RRCA_:    EQU   47 | 0x40   
0000                RRD_:     EQU   48 | 0x40   
0000                RST_:     EQU   49 | 0x40   
0000                SCF_:     EQU   50 | 0x40   
0000                SET_:     EQU   51 | 0x40   
0000                REG_IDX:      
0000                B_:       EQU   0   ; B
0000                C_:       EQU   1   ; C
0000                D_:       EQU   2   ; D
0000                E_:       EQU   3   ; E
0000                H_:       EQU   4   ; H
0000                L_:       EQU   5   ; L
0000                MHL_:     EQU   6   ; (HL)
0000                A_:       EQU   7   ; A
0000                I_:       EQU   8   ; I
0000                R_:       EQU   9   ; R
0000                REG_PAIR_IDX:      
0000                BC_:      EQU   0   
0000                DE_:      EQU   1   
0000                HL_:      EQU   2   
0000                SP_:      EQU   3   
0000                AF_:      EQU   4   ; NOTE: AF has the same code as SP in some instructions
0000                IX_:      EQU   5   
0000                IY_:      EQU   6   
0000                AFP_:     EQU   7   ; AF' (prime)
0000                FLAG_IDX:      
0000                NZ_:      EQU   0   
0000                Z_:       EQU   1   
0000                NC_:      EQU   2   
0000                C_:       EQU   3   
0000                PO_:      EQU   4   
0000                PE_:      EQU   5   
0000                P_:       EQU   6   
0000                M_:       EQU   7   
0000                DIRECTIVE_IDX:      
0000                ALIGN_:   EQU   0   
0000                DB_:      EQU   1   
0000                ORG_:     EQU   2   
0000                SET_:     EQU   3   
0000                             ; -----------------------------------------------------------------------------------------------
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                             ; *************************************************************************
0000                             ; 
0000                             ;       Serial routines 
0000                             ; 
0000                             ;       written by Craig Jones 
0000                             ; 
0000                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
0000                             ; 
0000                             ;       see the LICENSE file in this repo for more information 
0000                             ; 
0000                             ; *****************************************************************************
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 50 09               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 52 09               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 54 09               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 56 09               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 58 09               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 5A 09               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 5E 09               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 60 09               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 62 09               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 64 09               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 50 09               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 50 09               LD   (RST08),HL   
0094   22 52 09               LD   (RST10),HL   
0097   22 54 09               LD   (RST18),HL   
009A   22 56 09               LD   (RST20),HL   
009D   22 58 09               LD   (RST28),HL   
00A0   22 5A 09               LD   (RST30),HL   
00A3   22 5E 09               LD   (INTVEC),HL   
00A6   22 60 09               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 62 09               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 64 09               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 80 01               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       TecM8 1.0 Assembler for the Tec-1
00C6                             ; 
00C6                             ;       by John Hardy
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put TecM8 code from here	
0180                             ; *****************************************************************************
0180                             ; Routine: start
0180                             ; 
0180                             ; Purpose:
0180                             ;    Entry point of TecM8. Initializes the STACK pointer, calls the initialization
0180                             ;    routine, prints TecM8 version information, and jumps to the parsing routine.
0180                             ; 
0180                             ; Inputs:
0180                             ;    None
0180                             ; 
0180                             ; Outputs:
0180                             ;    None
0180                             ; 
0180                             ; Registers Destroyed:
0180                             ;    A, HL
0180                             ; *****************************************************************************
0180                START:       
0180   31 50 09               LD   sp,STACK   ; Initialize STACK pointer
0183   CD 98 01               CALL   init   ; Call initialization routine
0186   CD 8D 04               CALL   print   ; Print TecM8 version information
0189   0B 54 65 63 4D 38 20 30 2E 30 0D 0A .PSTR   "TecM8 0.0\r\n"   
0195   C3 C1 01               JP   parse   ; Jump to the parsing routine
0198                             ; *****************************************************************************
0198                             ; Routine: init
0198                             ; 
0198                             ; Purpose:
0198                             ;    Initializes various pointers and variables used by TecM8.
0198                             ; 
0198                             ; Inputs:
0198                             ;    None
0198                             ; 
0198                             ; Outputs:
0198                             ;    None
0198                             ; 
0198                             ; Registers Destroyed:
0198                             ;    A, HL
0198                             ; *****************************************************************************
0198                INIT:        
0198   AF                     XOR   a   ; Clear A register
0199   32 6A 09               LD   (vToken),a   ; Initialize vToken with NUL_ token
019C   32 6D 09               LD   (vBufferPos),a   ; Initialize BUFFER position
019F   21 00 08               LD   hl,BUFFER   ; Load BUFFER pointer
01A2   22 6F 09               LD   (vBuffer),hl   ; Store in vBuffer
01A5   21 79 0C               LD   hl,ASSEMBLY   ; Load ASSEMBLY pointer
01A8   22 71 09               LD   (vAsmPtr),hl   ; Store in vAsmPtr
01AB   21 79 09               LD   hl,STRINGS   ; Load STRINGS pointer
01AE   22 73 09               LD   (vStrPtr),hl   ; Store in vStrPtr
01B1   22 6B 09               LD   (vTokenVal),hl   ; Initialize token value pointer
01B4   21 79 0A               LD   hl,SYMBOLS   ; Load SYMBOLS pointer
01B7   22 75 09               LD   (vSymPtr),hl   ; Store in vSymPtr
01BA   21 79 0B               LD   hl,EXPRS   ; Load expressions pointer
01BD   22 77 09               LD   (vExprPtr),hl   ; Store in vExprPtr
01C0   C9                     RET      ; Return
01C1                             ; *****************************************************************************
01C1                             ; Routine: parse
01C1                             ; 
01C1                             ; Purpose:
01C1                             ;    Parses the input program, calling the statementList routine, printing the
01C1                             ;    completion message, and halting the system.
01C1                             ; 
01C1                             ; Inputs:
01C1                             ;    None
01C1                             ; 
01C1                             ; Outputs:
01C1                             ;    None
01C1                             ; 
01C1                             ; Registers Destroyed:
01C1                             ;    None
01C1                             ; *****************************************************************************
01C1                PARSE:       
01C1   CD E8 01               CALL   statementList   ; Parse the input program
01C4   CD 8D 04               CALL   print   ; Print completion message
01C7   1F 50 61 72 73 69 6E 67 20 63 6F 6D 70 6C 65 74 65 64 20 73 75 63 63 65 73 73 66 75 6C 6C 79 2E .PSTR   "Parsing completed successfully."   
01E7   76                     HALT      ; Halt the system
01E8                             ; *****************************************************************************
01E8                             ; Routine: statementList
01E8                             ; 
01E8                             ; Purpose:
01E8                             ;    Parses a list of statements, repeatedly calling the statement routine until
01E8                             ;    the end of file (EOF) token is encountered.
01E8                             ; 
01E8                             ; Inputs:
01E8                             ;    None
01E8                             ; 
01E8                             ; Outputs:
01E8                             ;    None
01E8                             ; 
01E8                             ; Registers Destroyed:
01E8                             ;    A
01E8                             ; *****************************************************************************
01E8                STATEMENTLIST:      
01E8   CD 25 02               CALL   nextToken   ; Get the next token
01EB   FE 45                  CP   EOF_   ; Check if it's the end of file
01ED   C8                     RET   z   ; If yes, return
01EE   CD F3 01               CALL   statement   ; Parse a statement
01F1   18 F5                  JR   statementList   ; Repeat for the next statement
01F3                             ; *****************************************************************************
01F3                             ; Routine: statement
01F3                             ; 
01F3                             ; Purpose:
01F3                             ;    Parses a single statement, checking its type (label, opcode, or directive)
01F3                             ;    and performing corresponding actions.
01F3                             ; 
01F3                             ; Inputs:
01F3                             ;    None
01F3                             ; 
01F3                             ; Outputs:
01F3                             ;    None
01F3                             ; 
01F3                             ; Registers Destroyed:
01F3                             ;    A
01F3                             ; *****************************************************************************
01F3                STATEMENT:      
01F3                             ; setOpcode null
01F3                             ; setOperand1 null
01F3                             ; setOperand2 null
01F3   FE 4C                  CP   LABEL_   ; Check if it's a label
01F5   20 03                  JR   nz,statement10   ; If not, jump to statement10
01F7                             ; call addLabel            ; Add label to symbol table
01F7   CD 25 02               CALL   nextToken   ; Get the next token
01FA                STATEMENT10:      
01FA   FE 43                  CP   OPCODE_   ; Check if it's an opcode
01FC   20 00                  JR   nz,statement1   
01FE                             ; call instruction      ; Jump to parseInstruction routine
01FE                             ; call nextToken
01FE                             ; jr statement2
01FE                STATEMENT1:      
01FE   FE 44                  CP   DIRECT_   ; Check if it's a directive
0200   20 00                  JR   nz,statement2   
0202                             ; jp directive        ; Jump to parseDirective routine
0202                             ; call nextToken
0202                STATEMENT2:      
0202   FE 0A                  CP   NEWLN_   
0204   C8                     RET   z   
0205   FE 45                  CP   EOF_   
0207   C8                     RET   z   
0208                             ; throw error, expected NEWLN or EOF
0208   C9                     RET      
0209                INSTRUCTION:      
0209                             ; check if Opcode has been set
0209                             ; setOpcode a
0209   CD 25 02               CALL   nextToken   
020C   FE 0A                  CP   NEWLN_   
020E   28 04                  JR   z,instruction1   
0210   FE 45                  CP   EOF_   
0212   28 03                  JR   z,instruction2   
0214                INSTRUCTION1:      
0214   CD 04 03               CALL   pushBackToken   
0217                INSTRUCTION2:      
0217   CD 25 02               CALL   firstOperand   
021A   CD 25 02               CALL   nextToken   
021D   FE 2C                  CP   COMMA_   
021F   CD 25 02               CALL   nextToken   
0222   CD 25 02               CALL   secondOperand   
0225                FIRSTOPERAND:      
0225                SECONDOPERAND:      
0225                DIRECTIVE:      
0225                             ; nextToken is a lexer function that reads characters from the input and classifies
0225                             ; them into different token types. It handles whitespace, end of input, newlines,
0225                             ; comments, identifiers, labels, directives, hexadecimal numbers, and other SYMBOLS.
0225                             ; Input: None
0225                             ; Output:
0225                             ; a: contains the type of the next token.
0225                             ; hl: contains the value associated with the next token.
0225                             ; Destroyed: None
0225                             ; *****************************************************************************
0225                             ; Routine: nextToken
0225                             ; 
0225                             ; Purpose:
0225                             ;    Parses the next token from the input stream, identifying various types of
0225                             ;    tokens such as identifiers, labels, opcodes, registers, flags, numbers,
0225                             ;    and special characters.
0225                             ; 
0225                             ; Inputs:
0225                             ;    None
0225                             ; 
0225                             ; Outputs:
0225                             ;    A - Token representing the type of the parsed element
0225                             ; 
0225                             ; Registers Destroyed:
0225                             ;    A, BC, DE, HL
0225                             ; *****************************************************************************
0225                NEXTTOKEN:      
0225   CB 77                  BIT   7,(vToken)   ; Check the high bit of the pushback BUFFER
0227   CA 36 02               JP   z,nextToken0   ; If high bit clear, nothing pushed back
022A   3A 6A 09               LD   a,(vToken)   ; If high bit set, load the pushed back token type into A
022D   2A 6B 09               LD   hl,(vTokenVal)   ; and token value into HL
0230   CB BF                  RES   7,a   ; Clear the high bit
0232   32 6A 09               LD   (vToken),a   ; Store the character back in the BUFFER
0235   C9                     RET      ; Return with the pushed back character in A
0236                NEXTTOKEN0:      
0236   21 00 00               LD   hl,0   ; Initialize HL with 0
0239                NEXTTOKEN1:      
0239   CD 35 04               CALL   nextChar   ; Get the next character
023C   FE 20                  CP   " "   ; is it space?
023E   28 F9                  JR   z,nextToken1   ; If yes, skip it and get the next character
0240   B7                     OR   a   ; Is it null (end of input)?
0241   28 04                  JR   z,nextToken1a   
0243   FE 03                  CP   CTRL_C   ; end of text
0245   20 03                  JR   nz,nextToken2   ; If not, continue to the next check
0247                NEXTTOKEN1A:      
0247   3E 45                  LD   a,EOF_   ; If yes, return with EOF token
0249   C9                     RET      
024A                NEXTTOKEN2:      
024A   FE 5C                  CP   $5C   ; Is it a statement separator? "\"
024C   20 0B                  JR   nz,nextToken3   ; If not, continue to the next check
024E   FE 3A                  CP   ":"   ; Is it a statement separator? ":"
0250   20 07                  JR   nz,nextToken3   ; If not, continue to the next check
0252   FE 0A                  CP   "\n"   ; Is it a control char
0254   30 03                  JR   nc,nextToken3   ; If not, continue to the next check
0256   3E 0A                  LD   a,NEWLN_   ; If yes, return with NEWLIN token
0258   C9                     RET      ; Return with newline token
0259                NEXTTOKEN3:      
0259   FE 3B                  CP   ";"   ; Is it a comment?
025B   C4 6A 02               CALL   nz,nextToken5   ; If not, continue to the next check
025E                NEXTTOKEN4:      
025E   CD 35 04               CALL   nextChar   ; Get the next character in the comment
0261   FE 21                  CP   " "+1   ; Loop until the next control character
0263   30 F9                  JR   nc,nextToken4   
0265   CD 70 04               CALL   rewindChar   ; Push back the character
0268   18 CC                  JR   nextToken0   ; return with control char
026A                NEXTTOKEN5:      
026A   FE 5F                  CP   "_"   ; Is it an identifier?
026C   28 05                  JR   z,nextToken6   ; If yes, continue to the next check
026E   CD 79 03               CALL   isAlpha   ; If not, check if it's alphabetic
0271   30 47                  JR   nc,nextToken13   ; If not, continue to the next check
0273                NEXTTOKEN6:      
0273   CD 0D 03               CALL   ident   ; Parse the identifier
0276   FE 3A                  CP   ":"   ; Is it a label?
0278   20 03                  JR   nz,nextToken7   ; If not, continue to the next check
027A   3E 4C                  LD   a,LABEL_   ; If yes, return with LABEL token
027C   C9                     RET      
027D                NEXTTOKEN7:      
027D   CD 70 04               CALL   rewindChar   ; Push back the character
0280   22 73 09               LD   (vStrPtr),hl   ; Restore string heap pointer to previous location
0283   CD EB 02               CALL   searchOpcode   
0286   30 03                  JR   nc,nextToken8   
0288   3E 43                  LD   a,OPCODE_   ; Return with OPCODE token
028A   C9                     RET      
028B                NEXTTOKEN8:      
028B   11 CD 05               LD   de,reg_pairs   ; List of register pairs to search
028E   CD 08 04               CALL   searchStr   
0291   30 03                  JR   nc,nextToken9   
0293   3E 50                  LD   a,REGPAIR_   ; Return with REGPAIR token
0295   C9                     RET      
0296                NEXTTOKEN9:      
0296   11 B8 05               LD   de,registers   ; List of registers to search
0299   CD 08 04               CALL   searchStr   
029C   30 03                  JR   nc,nextToken10   
029E   3E 52                  LD   a,REG_   ; Return with REG token
02A0   C9                     RET      
02A1                NEXTTOKEN10:      
02A1   11 E7 05               LD   de,flags   ; List of flags to search
02A4   CD 08 04               CALL   searchStr   
02A7   30 03                  JR   nc,nextToken11   
02A9   3E 46                  LD   a,FLAG_   ; Return with FLAG token
02AB   C9                     RET      
02AC                NEXTTOKEN11:      
02AC   11 E7 05               LD   de,flags   ; List of flags to search
02AF   CD 08 04               CALL   searchStr   
02B2   30 03                  JR   nc,nextToken12   
02B4   3E 44                  LD   a,DIRECT_   ; Return with DIRECT token
02B6   C9                     RET      
02B7                NEXTTOKEN12:      
02B7   3E 49                  LD   a,IDENT_   ; Return with IDENT token
02B9   C9                     RET      
02BA                NEXTTOKEN13:      
02BA   21 00 00               LD   hl,0   
02BD   FE 24                  CP   "$"   ; Is it a hexadecimal number?
02BF   20 0F                  JR   nz,nextToken14   ; If not, continue to the next check
02C1   CD 35 04               CALL   nextChar   ; Get the next character
02C4   CD 6F 03               CALL   isSpace   ; Check if it's the ASSEMBLY pointer
02C7   CD 70 04               CALL   rewindChar   ; Push back the character (flags unaffected)
02CA   C8                     RET   z   ; Return with the ASSEMBLY pointer token
02CB   CD B9 03               CALL   number_hex   ; Process hexadecimal number
02CE   18 0C                  JR   nextToken16   
02D0                NEXTTOKEN14:      
02D0   FE 2D                  CP   "-"   ; Is it a negative number?
02D2   28 05                  JR   z,nextToken15   ; If yes, continue to the next check
02D4   CD 86 03               CALL   isDigit   ; Check if it's a digit
02D7   30 06                  JR   nc,nextToken17   ; Jump to the next check
02D9                NEXTTOKEN15:      
02D9   CD 8D 03               CALL   number   ; Parse the number
02DC                NEXTTOKEN16:      
02DC   3E 39                  LD   a,NUM_   ; Return with NUM token
02DE   C9                     RET      
02DF                NEXTTOKEN17:      
02DF   FE 28                  CP   "("   
02E1   C8                     RET   z   ; Return with the "(" token
02E2   FE 29                  CP   ")"   
02E4   C8                     RET   z   ; Return with the ")" token
02E5   FE 2C                  CP   ","   
02E7   C8                     RET   z   ; Return with the "," token
02E8   3E 55                  LD   a,UNKNOWN_   ; Return with UNKNOWN token
02EA   C9                     RET      
02EB                             ; *****************************************************************************
02EB                             ; Routine: searchOpcode
02EB                             ; 
02EB                             ; Purpose:
02EB                             ;    Searches for a matching opcode in various lists of opcodes.
02EB                             ; 
02EB                             ; Inputs:
02EB                             ;    HL - Points to the string to search for.
02EB                             ; 
02EB                             ; Outputs:
02EB                             ;    CF - Set if a match is found, cleared otherwise.
02EB                             ;    A  - Contains the index of the matching opcode if a match is found,
02EB                             ;         or the last checked index if no match is found.
02EB                             ; 
02EB                             ; Registers Destroyed:
02EB                             ;    A, DE, F
02EB                             ; *****************************************************************************
02EB                SEARCHOPCODE:      
02EB   11 BE 04               LD   de,alu_opcodes   ; Point DE to the list of ALU opcodes
02EE   CD 08 04               CALL   searchStr   ; Call searchStr to search for the string in ALU opcodes
02F1   D8                     RET   c   ; If carry flag is set, return (match found)
02F2   11 9F 04               LD   de,rot_opcodes   ; Point DE to the list of ROT opcodes
02F5   CD 08 04               CALL   searchStr   ; Call searchStr to search for the string in ROT opcodes
02F8   CB 4F                  BIT   1,a   ; Check bit 1 of register A (flags unaffected)
02FA   D8                     RET   c   ; If carry flag is set, return (match found)
02FB   11 DD 04               LD   de,gen_opcodes   ; Point DE to the list of general opcodes
02FE   CD 08 04               CALL   searchStr   ; Call searchStr to search for the string in general opcodes
0301   CB 6F                  BIT   5,a   ; Check bit 5 of register A (flags unaffected)
0303   C9                     RET      ; Return (if match found or not)
0304                             ; *****************************************************************************
0304                             ; Routine: pushBackToken
0304                             ; 
0304                             ; Purpose:
0304                             ;    Pushes back a token into the pushback BUFFER to allow the token to be
0304                             ;    re-read by the nextToken routine.
0304                             ; 
0304                             ; Inputs:
0304                             ;    A  - token type
0304                             ;    HL - token value
0304                             ; 
0304                             ; Outputs:
0304                             ;    None
0304                             ; 
0304                             ; Registers Destroyed:
0304                             ;    A, DE
0304                             ; *****************************************************************************
0304                PUSHBACKTOKEN:      
0304   CB FF                  SET   7,a   ; Set the high bit of the token type (without affecting flags)
0306   32 6A 09               LD   (vToken),a   ; push back the token
0309   22 6B 09               LD   (vTokenVal),hl   ; push back the token value
030C   C9                     RET      
030D                             ; *****************************************************************************
030D                             ; Routine: ident
030D                             ; 
030D                             ; Purpose:
030D                             ;    Reads characters from the input stream until a charcter which is not an
030D                             ;    an underscore or an alphanumeric character is encountered. Writes the chars
030D                             ;    to a Pascal string and updates the top of the STRINGS heap pointer.
030D                             ;    It also calculates the length of the string and stores it at the beginning
030D                             ;    of the string.
030D                             ; 
030D                             ; Inputs:
030D                             ;    A - Current character read from the input stream
030D                             ;    vStrPtr - Address of the top of STRINGS heap pointer
030D                             ; 
030D                             ; Outputs:
030D                             ;    A - last character read from the input stream
030D                             ; 
030D                             ; Registers Destroyed:
030D                             ;    DE, HL
030D                             ; *****************************************************************************
030D                IDENT:       
030D   2A 73 09               LD   hl,(vStrPtr)   ; Load the address of the top of STRINGS heap
0310   54 5D                  LD   de,hl   ; Copy it to DE (DE = HL = top of STRINGS heap)
0312   23                     INC   hl   ; Move to the next byte to skip the length byte
0313                IDENT1:      
0313   77                     LD   (hl),a   ; Write the current character to the string BUFFER
0314   23                     INC   hl   ; Move to the next position in the BUFFER
0315   CD 35 04               CALL   nextChar   ; Get the next character from the input stream
0318   FE 5F                  CP   "_"   ; Compare with underscore character
031A   28 05                  JR   z,ident2   ; If underscore, jump to ident2
031C   CD 75 03               CALL   isAlphanum   ; Check if the character is alphanumeric
031F   30 04                  JR   nc,ident3   ; If not alphanumeric, jump to ident3
0321                IDENT2:      
0321   77                     LD   (hl),a   ; Write the current character to the string BUFFER
0322   23                     INC   hl   ; Move to the next position in the BUFFER
0323   18 EE                  JR   ident1   ; Repeat the process
0325                IDENT3:      
0325   22 73 09               LD   (vStrPtr),hl   ; Update the top of STRINGS heap pointer
0328   B7                     OR   a   ; Clear carry
0329   ED 52                  SBC   hl,de   ; Calculate the length of the string (HL = length, DE = string)
032B   EB                     EX   de,hl   ; Swap DE and HL (E = length, HL = string)
032C   73                     LD   (hl),e   ; Store the length at the beginning of the string BUFFER
032D   C9                     RET      
032E                             ; *****************************************************************************
032E                             ; Routine: expr
032E                             ; 
032E                             ; Purpose:
032E                             ;    Collects a string until it reaches a right parenthesis, comma, semicolon,
032E                             ;    or newline character. Keeps track of parentheses to ensure correct ending
032E                             ;    of the expression.
032E                             ; 
032E                             ; Inputs:
032E                             ;    None
032E                             ; 
032E                             ; Outputs:
032E                             ;    HL - Points to the collected string.
032E                             ;    A - Contains the length of the collected string.
032E                             ; 
032E                             ; Registers Destroyed:
032E                             ;    A, C, D, E, HL
032E                             ; *****************************************************************************
032E                EXPR:        
032E   2A 73 09               LD   hl,(vStrPtr)   ; Load the address of the top of STRINGS heap
0331   54 5D                  LD   de,hl   ; Copy it to DE (DE = HL = top of STRINGS heap)
0333   23                     INC   hl   ; Move to the next byte to skip the length byte
0334   0E 01                  LD   c,1   ; Initialize parenthesis count to 1
0336                EXPR1:       
0336   77                     LD   (hl),a   ; Write the current character to the string BUFFER
0337   23                     INC   hl   ; Move to the next position in the BUFFER
0338   CD 35 04               CALL   nextChar   ; Get the next character from the input stream
033B   FE 28                  CP   "("   ; Compare with left parenthesis character
033D   28 17                  JR   z,expr2   ; If left parenthesis, increase count
033F   FE 29                  CP   ")"   ; Compare with right parenthesis character
0341   28 16                  JR   z,expr3   ; If right parenthesis, decrease count
0343   FE 2C                  CP   ","   ; Compare with comma character
0345   28 17                  JR   z,expr4   ; If comma, check if parentheses count is zero
0347   FE 3B                  CP   ";"   ; Compare with semicolon character
0349   28 13                  JR   z,expr4   ; If semicolon, check if parentheses count is zero
034B   FE 0A                  CP   "\n"   ; Compare with newline character
034D   28 0F                  JR   z,expr4   ; If newline, check if parentheses count is zero
034F   CD 75 03               CALL   isAlphanum   ; Check if the character is alphanumeric
0352   30 0A                  JR   nc,expr4   ; If not alphanumeric, check if parentheses count is zero
0354   18 E0                  JR   expr1   ; Repeat the process
0356                EXPR2:       
0356   0C                     INC   c   ; Increase parentheses count
0357   18 DD                  JR   expr1   ; Repeat the process
0359                EXPR3:       
0359   0D                     DEC   c   ; Decrease parentheses count
035A   20 DA                  JR   nz,expr1   ; If not zero, continue collecting
035C   18 04                  JR   expr5   ; If zero, end collection
035E                EXPR4:       
035E   AF                     XOR   a   
035F   B9                     CP   c   ; Check if parentheses count is zero
0360   20 D4                  JR   nz,expr1   ; If not zero, continue collecting
0362                EXPR5:       
0362   CD 70 04               CALL   rewindChar   ; Rewind the input stream by one character
0365   22 73 09               LD   (vStrPtr),hl   ; Update the top of STRINGS heap pointer
0368   B7                     OR   a   ; Clear A register
0369   ED 52                  SBC   hl,de   ; Calculate the length of the string (HL = length, DE = string)
036B   EB                     EX   de,hl   ; Swap DE and HL (E = length, HL = string)
036C   73                     LD   (hl),e   ; Store the length at the beginning of the string BUFFER
036D   7B                     LD   a,e   ; Load the length into A
036E   C9                     RET      
036F                             ; *****************************************************************************
036F                             ; Routine: isSpace
036F                             ; 
036F                             ; Purpose:
036F                             ;    Checks if the character in the A register is a space or tab character.
036F                             ; 
036F                             ; Input:
036F                             ;    A - Contains the character to be checked.
036F                             ; 
036F                             ; Output:
036F                             ;    A - Contains the character to be checked.
036F                             ;    CF - Set if the input character was space or tab, cleared otherwise.
036F                             ; 
036F                             ; Destroyed:
036F                             ;    None
036F                             ; *****************************************************************************
036F                ISSPACE:      
036F   FE 20                  CP   " "   ; Compare with space character
0371   C8                     RET   z   ; Return if it's space
0372   FE 09                  CP   "\t"   ; Compare with tab character
0374   C9                     RET      ; Return
0375                             ; *****************************************************************************
0375                             ; Routine: isAlphaNum
0375                             ; 
0375                             ; Purpose:
0375                             ;    Checks if the character in the A register is an alphanumeric character
0375                             ;    (either uppercase or lowercase). If the character is alphabetic, it converts
0375                             ;    it to uppercase and sets the carry flag. If the character is not alphabetic,
0375                             ;    it clears the carry flag.
0375                             ; 
0375                             ; Input:
0375                             ;    A - Contains the character to be checked.
0375                             ; 
0375                             ; Output:
0375                             ;    A - Contains the uppercase version of the input character if it was alphabetic.
0375                             ;    CF - Set if the input character was alphabetic, cleared otherwise.
0375                             ; 
0375                             ; Destroyed:
0375                             ;    C
0375                             ; *****************************************************************************
0375                ISALPHANUM:      
0375   CD 86 03               CALL   isDigit   ; Check if it's a digit
0378   C8                     RET   z   ; If it's not a digit, continue to isAlpha
0379                             ; Falls through to isAlpha
0379                             ; *****************************************************************************
0379                             ; Routine: isAlpha
0379                             ; 
0379                             ; Purpose:
0379                             ;    Checks if the character in the A register is an alphabetic character
0379                             ;    (either uppercase or lowercase). If the character is alphabetic, it converts
0379                             ;    it to uppercase and sets the carry flag.
0379                             ; 
0379                             ; Input:
0379                             ;    A - Contains the character to be checked.
0379                             ; 
0379                             ; Output:
0379                             ;    A - Contains the uppercase version of the input character if it was alphabetic.
0379                             ;    CF - Set if the input character was alphabetic, cleared otherwise.
0379                             ; 
0379                             ; Destroyed:
0379                             ;    None
0379                             ; *****************************************************************************
0379                ISALPHA:      
0379   FE 61                  CP   "a"   ; Compare with lowercase "a"
037B   38 02                  JR   c,isAlpha1   ; Jump if it"s lower than "a'
037D   D6 20                  SUB   $20   ; Convert lowercase to uppercase
037F                ISALPHA1:      
037F   FE 5B                  CP   "Z"+1   ; Compare with "Z" + 1
0381   D0                     RET   nc   ; Return if it's not alphabetic
0382   FE 41                  CP   "A"   ; Compare with "A"
0384   3F                     CCF      ; Invert CF to set it if it's alphabetic
0385   C9                     RET      ; Return
0386                             ; *****************************************************************************
0386                             ; Routine: isDigit
0386                             ; 
0386                             ; Purpose:
0386                             ;    Checks if the character in the A register is a decimal digit (0-9). If
0386                             ;    the character is a decimal digit, it sets the carry flag.
0386                             ; 
0386                             ; Input:
0386                             ;    A - Contains the character to be checked.
0386                             ; 
0386                             ; Output:
0386                             ;    CF - Set if the input character was a digit, cleared otherwise.
0386                             ; 
0386                             ; Destroyed:
0386                             ;    None
0386                             ; *****************************************************************************
0386                ISDIGIT:      
0386   FE 3A                  CP   "9"+1   ; Compare with "9" + 1
0388   D0                     RET   nc   ; Return if it's not a digit
0389   FE 30                  CP   "0"   ; Compare with "0"
038B   3F                     CCF      ; Invert CF to set it if it's a digit
038C   C9                     RET      ; Return
038D                             ; *****************************************************************************
038D                             ; Routine: number
038D                             ; 
038D                             ; Purpose:
038D                             ;    Parse a number from the input. Handles both decimal and hexadecimal
038D                             ;    numbers, and supports negative numbers.
038D                             ; 
038D                             ; Input:
038D                             ;    None
038D                             ; 
038D                             ; Output:
038D                             ;    HL - Contains the parsed number.
038D                             ; 
038D                             ; Destroyed:
038D                             ;    None
038D                             ; *****************************************************************************
038D                NUMBER:      
038D   FE 2D                  CP   "-"   ; Check if it's a negative number
038F   3E FF                  LD   a,-1   ; Set sign flag
0391   28 01                  JR   z,number1   
0393   3C                     INC   a   ; Set sign flag to positive
0394                NUMBER1:      
0394   32 66 09               LD   (vTemp1),a   ; Store the sign flag in vTemp1
0397   CD 35 04               CALL   nextChar   ; Get the next character
039A   FE 24                  CP   "$"   ; Check if it's a hexadecimal number
039C   20 05                  JR   nz,number2   
039E   CD C2 03               CALL   hex   ; If yes, parse hexadecimal number
03A1   18 06                  JR   number3   
03A3                NUMBER2:      
03A3   CD 70 04               CALL   rewindChar   ; Push back the character
03A6   CD ED 03               CALL   decimal   ; Parse decimal number
03A9                NUMBER3:      
03A9   3A 66 09               LD   a,(vTemp1)   ; Load the sign from vTemp1
03AC   3C                     INC   a   ; Increment to negate if necessary
03AD   C0                     RET   nz   ; Return if sign is not zero
03AE   EB                     EX   de,hl   ; Negate the value of HL
03AF   21 00 00               LD   hl,0   ; Load zero to clear carry
03B2   B7                     OR   a   ; Clear carry flag
03B3   ED 52                  SBC   hl,de   ; Subtract DE from HL
03B5   CD 70 04               CALL   rewindChar   ; Push back the character
03B8   C9                     RET      ; Return
03B9                NUMBER_HEX:      
03B9   AF                     XOR   a   
03BA   32 66 09               LD   (vTemp1),a   ; Store the sign flag in vTemp1
03BD   CD C2 03               CALL   hex   ; Parse hexadecimal number
03C0   18 E7                  JR   number3   
03C2                             ; *****************************************************************************
03C2                             ; Routine: hex
03C2                             ; 
03C2                             ; Purpose:
03C2                             ;    Parse a hexadecimal number.
03C2                             ; 
03C2                             ; Input:
03C2                             ;    None
03C2                             ; 
03C2                             ; Output:
03C2                             ;    HL - Parsed number.
03C2                             ; 
03C2                             ; Destroyed:
03C2                             ;    A
03C2                             ; *****************************************************************************
03C2                HEX:         
03C2   21 00 00               LD   hl,0   ; Initialize HL to 0
03C5                HEX1:        
03C5   CD 35 04               CALL   nextChar   ; Get the next character
03C8   FE 30                  CP   "0"   ; Compare with ASCII "0"
03CA   D8                     RET   c   ; Return if less than "0"
03CB   FE 3A                  CP   "9"+1   ; Compare with ASCII "9" + 1
03CD   38 0F                  JR   c,valid   ; If less or equal, jump to valid
03CF   FE 61                  CP   "a"   ; Compare with ASCII "a"
03D1   38 02                  JR   c,hex2   ; If less, jump to hex2
03D3   D6 20                  SUB   $20   ; Convert lowercase to uppercase
03D5                HEX2:        
03D5   FE 41                  CP   "A"   ; Compare with ASCII "A"
03D7   D8                     RET   c   ; Return if less than "A"
03D8   FE 47                  CP   "F"+1   ; Compare with ASCII "F" + 1
03DA   38 00                  JR   c,upper   ; If less or equal, jump to upper
03DC                UPPER:       
03DC   D6 37                  SUB   $37   ; Convert ASCII to hexadecimal
03DE                VALID:       
03DE   D6 30                  SUB   "0"   ; Convert ASCII to numeric value
03E0   D8                     RET   c   ; Return if less than 0 (not a valid digit)
03E1   FE 10                  CP   $10   ; Compare with 16
03E3   D0                     RET   nc   ; Return if greater than 16 (not a valid digit)
03E4   29                     ADD   hl,hl   ; Multiply by 16
03E5   29                     ADD   hl,hl   ; Multiply by 16
03E6   29                     ADD   hl,hl   ; Multiply by 16
03E7   29                     ADD   hl,hl   ; Multiply by 16
03E8   85                     ADD   a,l   ; Add new digit to HL
03E9   6F                     LD   l,a   ; Store result back in L
03EA   C3 C5 03               JP   hex1   ; Jump back to hex1 to process next character
03ED                             ; *****************************************************************************
03ED                             ; Routine: decimal
03ED                             ; 
03ED                             ; Purpose:
03ED                             ;    Parse a decimal number.
03ED                             ; 
03ED                             ; Input:
03ED                             ;    None
03ED                             ; 
03ED                             ; Output:
03ED                             ;    HL - Parsed number.
03ED                             ; 
03ED                             ; Destroyed:
03ED                             ;    A, DE
03ED                             ; *****************************************************************************
03ED                DECIMAL:      
03ED   21 00 00               LD   hl,0   ; Initialize HL to 0
03F0                DECIMAL1:      
03F0   CD 35 04               CALL   nextChar   ; Get the next character
03F3   D6 30                  SUB   "0"   ; Convert ASCII to binary
03F5   D8                     RET   c   ; Return if less than "0"
03F6   FE 0A                  CP   10   ; Compare with 10
03F8   D0                     RET   nc   ; Return if greater than 10
03F9   03                     INC   bc   ; Increment BC to point to next digit
03FA   54 5D                  LD   de,hl   ; Copy HL to DE
03FC   29                     ADD   hl,hl   ; Multiply HL by 2
03FD   29                     ADD   hl,hl   ; Multiply HL by 4
03FE   19                     ADD   hl,de   ; Add DE to HL to multiply by 5
03FF   29                     ADD   hl,hl   ; Multiply HL by 10
0400   85                     ADD   a,l   ; Add A to HL
0401   6F                     LD   l,a   ; Store result back in L
0402   3E 00                  LD   a,0   ; Clear A
0404   8C                     ADC   a,h   ; Add carry to H
0405   67                     LD   h,a   ; Store result back in H
0406   18 E8                  JR   decimal1   ; Jump back to start of loop
0408                             ; *****************************************************************************
0408                             ; Routine: searchStr
0408                             ; 
0408                             ; Purpose:
0408                             ;    Search through a list of Pascal STRINGS for a match.
0408                             ; 
0408                             ; Inputs:
0408                             ;    HL - Points to the string to search for.
0408                             ;    DE - Points to the start of the list of STRINGS.
0408                             ; 
0408                             ; Outputs:
0408                             ;    CF - True if match, false otherwise.
0408                             ;    A - Index of the matching string if a match is found, or -1 if no match
0408                             ;        is found.
0408                             ;    HL - Points to the string to search for.
0408                             ; 
0408                             ; Destroyed:
0408                             ;    A, B, C, D, E, A", F"
0408                             ; *****************************************************************************
0408                SEARCHSTR:      
0408   EB                     EX   de,hl   ; DE = search string, HL = string list
0409   AF                     XOR   a   ; Initialize index counter, ZF = true, CF = false
040A   08                     EX   af,af'   ; Exchange AF with AF prime
040B                SEARCHSTRLOOP:      
040B   1A                     LD   a,(de)   ; Load length of search string
040C   47                     LD   b,a   ; Copy length to B for looping
040D   D5                     PUSH   de   ; Store search string
040E   E5                     PUSH   hl   ; Store current string
040F   BE                     CP   (hl)   ; Compare with length of current string
0410   20 0F                  JR   nz,searchStrNext   ; If lengths are not equal, move to next string
0412   13                     INC   de   ; Move to start of search string
0413   23                     INC   hl   ; Move to start of current string
0414                SEARCHSTRCHARLOOP:      
0414   1A                     LD   a,(de)   ; Load next character from search string
0415   BE                     CP   (hl)   ; Compare with next character in current string
0416   20 09                  JR   nz,searchStrNext   ; If characters are not equal, move to next string
0418   13                     INC   de   ; Move to next character in search string
0419   23                     INC   hl   ; Move to next character in current string
041A   10 F8                  DJNZ   searchStrCharLoop   ; Loop until all characters compared
041C   E1                     POP   hl   ; Discard current string
041D   E1                     POP   hl   ; HL = search string
041E   08                     EX   af,af'   ; Load index of match
041F   3F                     CCF      ; If match, CF = true
0420   C9                     RET      
0421                SEARCHSTRNEXT:      
0421   E1                     POP   hl   ; Restore current string
0422   D1                     POP   de   ; Restore search string
0423   7E                     LD   a,(hl)   ; Load length of current string
0424   3C                     INC   a   ; A = length byte plus length of string
0425   4F                     LD   c,a   ; BC = A
0426   06 00                  LD   b,0   
0428   09                     ADD   hl,bc   ; HL += BC, move to next string
0429   D5                     PUSH   de   ; Store search string
042A   E5                     PUSH   hl   ; Store current string
042B   08                     EX   af,af'   ; Increment index counter, ZF = false, CF = false
042C   3C                     INC   a   
042D   08                     EX   af,af'   
042E   7E                     LD   a,(hl)   ; A = length of next string
042F   B7                     OR   a   ; If A != 0, continue searching
0430   20 D9                  JR   nz,searchStrLoop   
0432   3D                     DEC   a   ; A = NO_MATCH (i.e., -1), ZF = false
0433   3F                     CCF      ; CF = false
0434   C9                     RET      
0435                             ; *****************************************************************************
0435                             ; Routine: nextChar
0435                             ; 
0435                             ; Purpose:
0435                             ;    Fetches the next character from the BUFFER. If the BUFFER is empty or
0435                             ;    contains a null character (0), it refills the BUFFER by calling nextLine.
0435                             ; 
0435                             ; Inputs:
0435                             ;    None
0435                             ; 
0435                             ; Outputs:
0435                             ;    A - The next character from the BUFFER
0435                             ; 
0435                             ; Registers Destroyed:
0435                             ;    A, D, E, HL
0435                             ; *****************************************************************************
0435                NEXTCHAR:      
0435   21 6D 09               LD   hl,vBufferPos   ; Load the offset of BUFFER position variable
0438   7E                     LD   a,(hl)   ; Load the current position offset in the BUFFER into A
0439   FE 50                  CP   BUFFER_SIZE   ; Compare with BUFFER size
043B   CA 5A 04               JP   z,nextLine   ; Jump to nextLine if end of BUFFER
043E   ED 5B 6F 09            LD   de,(vBuffer)   ; Load the MSB of the BUFFER's address into D
0442   83                     ADD   a,e   ; de += a
0443   5F                     LD   e,a   
0444   3E 00                  LD   a,0   
0446   8A                     ADC   a,d   
0447   57                     LD   d,a   
0448   1A                     LD   a,(de)   ; Load the character at the current BUFFER position into A
0449   B7                     OR   a   ; Check if the character is 0 (end of line)
044A   28 0E                  JR   z,nextLine   ; Jump to nextLine if character is 0
044C   34                     INC   (hl)   ; Increment the BUFFER position offset
044D   FE 03                  CP   CTRL_C   ; Ctrl-C will break the parser loop
044F   20 03                  JR   nz,nextChar1   
0451   3E FF                  LD   a,EOF   
0453   C9                     RET      
0454                NEXTCHAR1:      
0454   FE 09                  CP   "\t"   ; If char is tab make it space for simplificity
0456   C0                     RET   nz   
0457   3E 20                  LD   a," "   
0459   C9                     RET      ; Return with the character in A
045A                             ; *****************************************************************************
045A                             ; Routine: nextLine
045A                             ; 
045A                             ; Purpose:
045A                             ;    Refills the BUFFER by repeatedly calling getchar to fetch new characters
045A                             ;    and stores them in the BUFFER. Stops when the BUFFER is full or a
045A                             ;    non-printable character is encountered.
045A                             ; 
045A                             ; Inputs:
045A                             ;    None
045A                             ; 
045A                             ; Outputs:
045A                             ;    A - The first character in the refilled BUFFER
045A                             ; 
045A                             ; Registers Destroyed:
045A                             ;    A, B, HL
045A                             ; *****************************************************************************
045A                NEXTLINE:      
045A   2A 6F 09               LD   hl,(vBuffer)   ; Start of the BUFFER
045D   06 50                  LD   b,BUFFER_SIZE   ; Number of bytes to fill
045F                NEXTLINE1:      
045F   CD 81 00               CALL   getchar   ; Get a character from getchar
0462   77                     LD   (hl),a   ; Store it in the BUFFER
0463   23                     INC   hl   ; Move to the next position in the BUFFER
0464   FE 20                  CP   " "   ; Check if the character is a space
0466   38 02                  JR   c,nextLine2   ; If less than space (non-printable), skip djnz
0468   10 F5                  DJNZ   nextLine1   ; Repeat until B decrements to 0
046A                NEXTLINE2:      
046A   AF                     XOR   a   ; Clear A register
046B   32 6D 09               LD   (vBufferPos),a   ; Reset BUFFER position to 0
046E   18 C5                  JR   nextChar   ; Jump back to nextChar to return the first char
0470                             ; *****************************************************************************
0470                             ; Routine: rewindChar
0470                             ; 
0470                             ; Purpose:
0470                             ;    Rewinds the BUFFER position by one character, effectively pushing back the
0470                             ;    BUFFER position by one character in the input stream.
0470                             ; 
0470                             ; Inputs:
0470                             ;    None
0470                             ; 
0470                             ; Outputs:
0470                             ;    None
0470                             ; 
0470                             ; Registers Destroyed:
0470                             ;    A
0470                             ; *****************************************************************************
0470                REWINDCHAR:      
0470   21 6D 09               LD   hl,vBufferPos   ; Load the address of BUFFER position variable
0473   7E                     LD   a,(hl)   ; Load the current position in the BUFFER into A
0474   B7                     OR   a   ; Check if the BUFFER position is zero
0475   C8                     RET   z   ; If zero, nothing to push back, return
0476   35                     DEC   (hl)   ; Decrement the BUFFER position
0477   C9                     RET      ; Return
0478                PROMPT:      
0478   CD 8D 04               CALL   print   
047B   04 0D 0A 3E 20         .PSTR   "\r\n> "   
0480   C9                     RET      
0481                CRLF:        
0481   CD 8D 04               CALL   print   
0484   02 0D 0A               .PSTR   "\r\n"   
0487   C9                     RET      
0488                ERROR:       
0488   E1                     POP   hl   
0489   CD 92 04               CALL   printStr   
048C   76                     HALT      
048D                PRINT:       
048D   E1                     POP   hl   ; "return" address is address of string			
048E   CD 92 04               CALL   printStr   
0491   E9                     JP   (hl)   ; put it back	
0492                             ; print
0492                             ; 
0492                             ; Prints a Pascal string to the console.
0492                             ; 
0492                             ; Input:
0492                             ;   hl: Points to the start of the Pascal string in memory. The first byte at this location should be the length of the string, followed by the string data.
0492                             ; 
0492                             ; Output:
0492                             ;   hl: points to the byte after the end of the string .
0492                             ; 
0492                             ; Destroyed:
0492                             ;   a, b
0492                PRINTSTR:      
0492   7E                     LD   a,(hl)   ; Load the length of the string
0493   B7                     OR   a   ; Check if A is zero
0494   C8                     RET   z   ; If it is, return immediately
0495   23                     INC   hl   ; Move to the start of the string data
0496   47                     LD   b,a   ; Copy the length to B for looping
0497                PRINTSTR1:      
0497   7E                     LD   a,(hl)   ; Load the next character
0498   CD 85 00               CALL   putchar   ; Call a routine that prints a single character
049B   23                     INC   hl   ; Move to the next character
049C   10 F9                  DJNZ   printStr1   ; Decrement B and jump if not zero
049E   C9                     RET      ; Return from the routine
049F                             ; *******************************************************************************
049F                             ; *********  END OF MAIN   ******************************************************
049F                             ; *******************************************************************************
049F                ROT_OPCODES:      
049F   03 52 4C 43            .PSTR   "RLC"   
04A3   03 52 52 43            .PSTR   "RRC"   
04A7   02 52 4C               .PSTR   "RL"   
04AA   02 52 52               .PSTR   "RR"   
04AD   03 53 4C 41            .PSTR   "SLA"   
04B1   03 53 52 41            .PSTR   "SRA"   
04B5   03 53 4C 4C            .PSTR   "SLL"   
04B9   03 53 52 4C            .PSTR   "SRL"   
04BD   00                     .PSTR   ""   ; terminate list with a string of zero length
04BE                ALU_OPCODES:      
04BE   03 41 44 44            .PSTR   "ADD"   
04C2   03 41 44 43            .PSTR   "ADC"   
04C6   03 53 55 42            .PSTR   "SUB"   
04CA   03 53 42 43            .PSTR   "SBC"   
04CE   03 41 4E 44            .PSTR   "AND"   
04D2   03 58 4F 52            .PSTR   "XOR"   
04D6   02 4F 52               .PSTR   "OR"   
04D9   02 43 50               .PSTR   "CP"   
04DC   00                     .PSTR   ""   ; terminate list with a string of zero length
04DD                GEN_OPCODES:      
04DD   03 42 49 54            .PSTR   "BIT"   
04E1   04 43 41 4C 4C         .PSTR   "CALL"   
04E6   03 43 43 46            .PSTR   "CCF"   
04EA   03 43 50 44            .PSTR   "CPD"   
04EE   04 43 50 44 52         .PSTR   "CPDR"   
04F3   03 43 50 49            .PSTR   "CPI"   
04F7   04 43 50 49 52         .PSTR   "CPIR"   
04FC   03 43 50 4C            .PSTR   "CPL"   
0500   03 44 41 41            .PSTR   "DAA"   
0504   03 44 45 43            .PSTR   "DEC"   
0508   02 44 49               .PSTR   "DI"   
050B   04 44 4A 4E 5A         .PSTR   "DJNZ"   
0510   02 45 49               .PSTR   "EI"   
0513   02 45 58               .PSTR   "EX"   
0516   03 45 58 58            .PSTR   "EXX"   
051A   04 48 41 4C 54         .PSTR   "HALT"   
051F   02 49 4D               .PSTR   "IM"   
0522   02 49 4E               .PSTR   "IN"   
0525   03 49 4E 43            .PSTR   "INC"   
0529   03 49 4E 44            .PSTR   "IND"   
052D   04 49 4E 44 52         .PSTR   "INDR"   
0532   03 49 4E 49            .PSTR   "INI"   
0536   04 49 4E 49 52         .PSTR   "INIR"   
053B   02 4A 50               .PSTR   "JP"   
053E   02 4A 52               .PSTR   "JR"   
0541   02 4C 44               .PSTR   "LD"   
0544   03 4C 44 44            .PSTR   "LDD"   
0548   04 4C 44 44 52         .PSTR   "LDDR"   
054D   03 4C 44 49            .PSTR   "LDI"   
0551   04 4C 44 49 52         .PSTR   "LDIR"   
0556   03 4E 45 47            .PSTR   "NEG"   
055A   03 4E 4F 50            .PSTR   "NOP"   
055E   04 4F 54 44 52         .PSTR   "OTDR"   
0563   04 4F 54 49 52         .PSTR   "OTIR"   
0568   03 4F 55 54            .PSTR   "OUT"   
056C   04 4F 55 54 44         .PSTR   "OUTD"   
0571   04 4F 55 54 49         .PSTR   "OUTI"   
0576   03 50 4F 50            .PSTR   "POP"   
057A   04 50 55 53 48         .PSTR   "PUSH"   
057F   03 52 45 53            .PSTR   "RES"   
0583   03 52 45 54            .PSTR   "RET"   
0587   04 52 45 54 49         .PSTR   "RETI"   
058C   04 52 45 54 4E         .PSTR   "RETN"   
0591   03 52 4C 41            .PSTR   "RLA"   
0595   04 52 4C 43 41         .PSTR   "RLCA"   
059A   03 52 4C 44            .PSTR   "RLD"   
059E   03 52 52 41            .PSTR   "RRA"   
05A2   04 52 52 43 41         .PSTR   "RRCA"   
05A7   03 52 52 44            .PSTR   "RRD"   
05AB   03 52 53 54            .PSTR   "RST"   
05AF   03 53 43 46            .PSTR   "SCF"   
05B3   03 53 45 54            .PSTR   "SET"   
05B7   00                     .PSTR   ""   ; terminate list with a string of zero length
05B8                REGISTERS:      
05B8   01 42                  .PSTR   "B"   
05BA   01 43                  .PSTR   "C"   
05BC   01 44                  .PSTR   "D"   
05BE   01 45                  .PSTR   "E"   
05C0   01 48                  .PSTR   "H"   
05C2   01 4C                  .PSTR   "L"   
05C4   01 20                  .PSTR   " "   ; don't match, stand-in for (HL)
05C6   01 41                  .PSTR   "A"   
05C8   01 49                  .PSTR   "I"   
05CA   01 52                  .PSTR   "R"   
05CC   00                     .PSTR   ""   ; terminate list with a string of zero length
05CD                REG_PAIRS:      
05CD   02 42 43               .PSTR   "BC"   
05D0   02 44 45               .PSTR   "DE"   
05D3   02 48 4C               .PSTR   "HL"   
05D6   02 53 50               .PSTR   "SP"   
05D9   02 41 46               .PSTR   "AF"   ; NOTE: AF has the same code as SP in some instructions
05DC   02 49 58               .PSTR   "IX"   
05DF   02 49 59               .PSTR   "IY"   
05E2   03 41 46 27            .PSTR   "AF'"   
05E6   00                     .PSTR   ""   ; terminate list with a string of zero length
05E7                FLAGS:       
05E7   02 4E 5A               .PSTR   "NZ"   
05EA   01 5A                  .PSTR   "Z"   
05EC   02 4E 43               .PSTR   "NC"   
05EF   01 43                  .PSTR   "C"   
05F1   02 50 4F               .PSTR   "PO"   
05F4   02 50 45               .PSTR   "PE"   
05F7   01 50                  .PSTR   "P"   
05F9   01 4D                  .PSTR   "M"   
05FB   00                     .PSTR   ""   ; terminate list with a string of zero length
05FC                DIRECTIVES:      
05FC   06 2E 41 4C 49 47 4E   .PSTR   ".ALIGN"   
0603   03 2E 44 42            .PSTR   ".DB"   
0607   04 2E 4F 52 47         .PSTR   ".ORG"   
060C   04 2E 53 45 54         .PSTR   ".SET"   
0611   00                     .PSTR   ""   ; terminate list with a string of zero length
0612                             ; *******************************************************************************
0612                             ; *********  END OF DATA   ******************************************************
0612                             ; *******************************************************************************
0800                          .ORG   RAMSTART   
0800                          ALIGN   $100   
0800                BUFFER:   DS   BUFFER_SIZE   ; line BUFFER, page aligned
0850                          DS   $100   
0950                STACK:       ; grows down
0950                RST08:    DS   2   
0952                RST10:    DS   2   
0954                RST18:    DS   2   
0956                RST20:    DS   2   
0958                RST28:    DS   2   
095A                RST30:    DS   2   ; 
095C                BAUD:     DS   2   ; 
095E                INTVEC:   DS   2   ; 
0960                NMIVEC:   DS   2   ; 
0962                GETCVEC:   DS   2   ; 
0964                PUTCVEC:   DS   2   ; 
0966                VTEMP1:   DS   2   ; temp var 1
0968                VTEMP2:   DS   2   ; temp var 2
096A                VTOKEN:   DS   1   ; BUFFER for pushed back token
096B                VTOKENVAL:   DS   2   ; BUFFER for pushed back token value
096D                VBUFFERPOS:   DS   2   ; pointer to char position into input BUFFER
096F                VBUFFER:   DS   2   ; pointer to start of input BUFFER
0971                VASMPTR:   DS   2   ; pointer to ASSEMBLY point
0973                VSTRPTR:   DS   2   ; pointer to string STACK
0975                VSYMPTR:   DS   2   ; pointer to symbol STACK
0977                VEXPRPTR:   DS   2   ; pointer to expression STACK
0979                STRINGS:   DS   $100   ; string heap - grows up
0A79                SYMBOLS:   DS   $100   ; symbol heap - grows up
0B79                EXPRS:    DS   $100   ; expression heap - grows up
0C79                ASSEMBLY:      


ROMSTART:           0000 DEFINED AT LINE 1 IN constants.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 116 IN IOSerial.asm
                    > USED AT LINE 122 IN IOSerial.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 134 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 146 IN IOSerial.asm
                    > USED AT LINE 152 IN IOSerial.asm
                    > USED AT LINE 158 IN IOSerial.asm
                    > USED AT LINE 200 IN IOSerial.asm
                    > USED AT LINE 17 IN MAIN.asm
RAMSTART:           0800 DEFINED AT LINE 2 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 3 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 4 IN constants.asm
NO_MATCH:           00-1 DEFINED AT LINE 6 IN constants.asm
CTRL_C:             0003 DEFINED AT LINE 7 IN constants.asm
                    > USED AT LINE 238 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 8 IN constants.asm
BUFFER_SIZE:        0050 DEFINED AT LINE 9 IN constants.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 5 IN ram.asm
EOF:                00-1 DEFINED AT LINE 10 IN constants.asm
                    > USED AT LINE 854 IN MAIN.asm
TOKENS:             0000 DEFINED AT LINE 12 IN constants.asm
COLON_:             000: DEFINED AT LINE 14 IN constants.asm
COMMA_:             000, DEFINED AT LINE 15 IN constants.asm
                    > USED AT LINE 181 IN MAIN.asm
DIRECT_:            000D DEFINED AT LINE 16 IN constants.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 312 IN MAIN.asm
DOLLAR_:            000$ DEFINED AT LINE 17 IN constants.asm
EOF_:               000E DEFINED AT LINE 18 IN constants.asm
                    > USED AT LINE 119 IN MAIN.asm
                    > USED AT LINE 163 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
FLAG_:              000F DEFINED AT LINE 19 IN constants.asm
                    > USED AT LINE 304 IN MAIN.asm
IDENT_:             000I DEFINED AT LINE 20 IN constants.asm
                    > USED AT LINE 316 IN MAIN.asm
LABEL_:             000L DEFINED AT LINE 21 IN constants.asm
                    > USED AT LINE 145 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
LPAREN_:            000( DEFINED AT LINE 22 IN constants.asm
NEWLN_:             000
 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 161 IN MAIN.asm
                    > USED AT LINE 172 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
NUM_:               0009 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 340 IN MAIN.asm
OPCODE_:            000C DEFINED AT LINE 25 IN constants.asm
                    > USED AT LINE 150 IN MAIN.asm
                    > USED AT LINE 283 IN MAIN.asm
REG_:               000R DEFINED AT LINE 26 IN constants.asm
                    > USED AT LINE 297 IN MAIN.asm
REGPAIR_:           000P DEFINED AT LINE 27 IN constants.asm
                    > USED AT LINE 290 IN MAIN.asm
RPAREN_:            000) DEFINED AT LINE 28 IN constants.asm
UNKNOWN_:           000U DEFINED AT LINE 29 IN constants.asm
                    > USED AT LINE 350 IN MAIN.asm
ALU_IDX:            0000 DEFINED AT LINE 31 IN constants.asm
ADD_:               0000 DEFINED AT LINE 33 IN constants.asm
ADC_:               0001 DEFINED AT LINE 34 IN constants.asm
SUB_:               0002 DEFINED AT LINE 35 IN constants.asm
SBC_:               0003 DEFINED AT LINE 36 IN constants.asm
AND_:               0004 DEFINED AT LINE 37 IN constants.asm
XOR_:               0005 DEFINED AT LINE 38 IN constants.asm
OR_:                0006 DEFINED AT LINE 39 IN constants.asm
CP_:                0007 DEFINED AT LINE 40 IN constants.asm
ROT_IDX:            0000 DEFINED AT LINE 42 IN constants.asm
RLC_:               0010 DEFINED AT LINE 44 IN constants.asm
RRC_:               0011 DEFINED AT LINE 45 IN constants.asm
RL_:                0012 DEFINED AT LINE 46 IN constants.asm
RR_:                0013 DEFINED AT LINE 47 IN constants.asm
SLA_:               0014 DEFINED AT LINE 48 IN constants.asm
SRA_:               0015 DEFINED AT LINE 49 IN constants.asm
SLL_:               0016 DEFINED AT LINE 50 IN constants.asm
SRL_:               0017 DEFINED AT LINE 51 IN constants.asm
GEN_IDX:            0000 DEFINED AT LINE 53 IN constants.asm
BIT_:               0040 DEFINED AT LINE 56 IN constants.asm
CALL_:              0041 DEFINED AT LINE 57 IN constants.asm
CCF_:               0042 DEFINED AT LINE 58 IN constants.asm
CPD_:               0043 DEFINED AT LINE 59 IN constants.asm
CPDR_:              0044 DEFINED AT LINE 60 IN constants.asm
CPI_:               0045 DEFINED AT LINE 61 IN constants.asm
CPIR_:              0046 DEFINED AT LINE 62 IN constants.asm
CPL_:               0047 DEFINED AT LINE 63 IN constants.asm
DAA_:               0048 DEFINED AT LINE 64 IN constants.asm
DEC_:               0049 DEFINED AT LINE 65 IN constants.asm
DI_:                004A DEFINED AT LINE 66 IN constants.asm
DJNZ_:              004B DEFINED AT LINE 67 IN constants.asm
EI_:                004C DEFINED AT LINE 68 IN constants.asm
EX_:                004D DEFINED AT LINE 69 IN constants.asm
EXX_:               004E DEFINED AT LINE 70 IN constants.asm
HALT_:              004F DEFINED AT LINE 71 IN constants.asm
IM_:                0050 DEFINED AT LINE 72 IN constants.asm
IN_:                0051 DEFINED AT LINE 73 IN constants.asm
INC_:               0052 DEFINED AT LINE 74 IN constants.asm
IND_:               0053 DEFINED AT LINE 75 IN constants.asm
INDR_:              0054 DEFINED AT LINE 76 IN constants.asm
INI_:               0055 DEFINED AT LINE 77 IN constants.asm
INIR_:              0056 DEFINED AT LINE 78 IN constants.asm
JP_:                0057 DEFINED AT LINE 79 IN constants.asm
JR_:                0058 DEFINED AT LINE 80 IN constants.asm
LD_:                0059 DEFINED AT LINE 81 IN constants.asm
LDD_:               005A DEFINED AT LINE 82 IN constants.asm
LDDR_:              005B DEFINED AT LINE 83 IN constants.asm
LDI_:               005C DEFINED AT LINE 84 IN constants.asm
LDIR_:              005D DEFINED AT LINE 85 IN constants.asm
NEG_:               005E DEFINED AT LINE 86 IN constants.asm
NOP_:               005F DEFINED AT LINE 87 IN constants.asm
OTDR_:              0060 DEFINED AT LINE 88 IN constants.asm
OTIR_:              0061 DEFINED AT LINE 89 IN constants.asm
OUT_:               0062 DEFINED AT LINE 90 IN constants.asm
OUTD_:              0063 DEFINED AT LINE 91 IN constants.asm
OUTI_:              0064 DEFINED AT LINE 92 IN constants.asm
POP_:               0065 DEFINED AT LINE 93 IN constants.asm
PUSH_:              0066 DEFINED AT LINE 94 IN constants.asm
RES_:               0067 DEFINED AT LINE 95 IN constants.asm
RET_:               0068 DEFINED AT LINE 96 IN constants.asm
RETI_:              0069 DEFINED AT LINE 97 IN constants.asm
RETN_:              006A DEFINED AT LINE 98 IN constants.asm
RLA_:               006B DEFINED AT LINE 99 IN constants.asm
RLCA_:              006C DEFINED AT LINE 100 IN constants.asm
RLD_:               006D DEFINED AT LINE 101 IN constants.asm
RRA_:               006E DEFINED AT LINE 102 IN constants.asm
RRCA_:              006F DEFINED AT LINE 103 IN constants.asm
RRD_:               0070 DEFINED AT LINE 104 IN constants.asm
RST_:               0071 DEFINED AT LINE 105 IN constants.asm
SCF_:               0072 DEFINED AT LINE 106 IN constants.asm
SET_:               0003 DEFINED AT LINE 149 IN constants.asm
REG_IDX:            0000 DEFINED AT LINE 109 IN constants.asm
B_:                 0000 DEFINED AT LINE 111 IN constants.asm
C_:                 0003 DEFINED AT LINE 138 IN constants.asm
D_:                 0002 DEFINED AT LINE 113 IN constants.asm
E_:                 0003 DEFINED AT LINE 114 IN constants.asm
H_:                 0004 DEFINED AT LINE 115 IN constants.asm
L_:                 0005 DEFINED AT LINE 116 IN constants.asm
MHL_:               0006 DEFINED AT LINE 117 IN constants.asm
A_:                 0007 DEFINED AT LINE 118 IN constants.asm
I_:                 0008 DEFINED AT LINE 119 IN constants.asm
R_:                 0009 DEFINED AT LINE 120 IN constants.asm
REG_PAIR_IDX:       0000 DEFINED AT LINE 122 IN constants.asm
BC_:                0000 DEFINED AT LINE 124 IN constants.asm
DE_:                0001 DEFINED AT LINE 125 IN constants.asm
HL_:                0002 DEFINED AT LINE 126 IN constants.asm
SP_:                0003 DEFINED AT LINE 127 IN constants.asm
AF_:                0004 DEFINED AT LINE 128 IN constants.asm
IX_:                0005 DEFINED AT LINE 129 IN constants.asm
IY_:                0006 DEFINED AT LINE 130 IN constants.asm
AFP_:               0007 DEFINED AT LINE 131 IN constants.asm
FLAG_IDX:           0000 DEFINED AT LINE 133 IN constants.asm
NZ_:                0000 DEFINED AT LINE 135 IN constants.asm
Z_:                 0001 DEFINED AT LINE 136 IN constants.asm
NC_:                0002 DEFINED AT LINE 137 IN constants.asm
PO_:                0004 DEFINED AT LINE 139 IN constants.asm
PE_:                0005 DEFINED AT LINE 140 IN constants.asm
P_:                 0006 DEFINED AT LINE 141 IN constants.asm
M_:                 0007 DEFINED AT LINE 142 IN constants.asm
DIRECTIVE_IDX:      0000 DEFINED AT LINE 144 IN constants.asm
ALIGN_:             0000 DEFINED AT LINE 146 IN constants.asm
DB_:                0001 DEFINED AT LINE 147 IN constants.asm
ORG_:               0002 DEFINED AT LINE 148 IN constants.asm
TEC_1:              0001 DEFINED AT LINE 153 IN constants.asm
RC2014:             0000 DEFINED AT LINE 154 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 156 IN constants.asm
LOADER:             0000 DEFINED AT LINE 158 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 159 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 33 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
                    > USED AT LINE 498 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 34 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 322 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 36 IN IOSerial.asm
                    > USED AT LINE 326 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 475 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 46 IN IOSerial.asm
                    > USED AT LINE 497 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 50 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 51 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 52 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 53 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 54 IN IOSerial.asm
                    > USED AT LINE 497 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 55 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 56 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 57 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 61 IN IOSerial.asm
                    > USED AT LINE 497 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 62 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 63 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 64 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 68 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 72 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 73 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 74 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 75 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 76 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 77 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 78 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 79 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 87 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 88 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 89 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 90 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 91 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 92 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 93 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 94 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 107 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 108 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 109 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 113 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 163 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 481 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 187 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 193 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 196 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 469 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 305 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 308 IN IOSerial.asm
                    > USED AT LINE 312 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 320 IN IOSerial.asm
                    > USED AT LINE 467 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 321 IN IOSerial.asm
                    > USED AT LINE 325 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 884 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 449 IN IOSerial.asm
                    > USED AT LINE 961 IN MAIN.asm
RESET:              008B DEFINED AT LINE 455 IN IOSerial.asm
                    > USED AT LINE 114 IN IOSerial.asm
START:              0180 DEFINED AT LINE 37 IN MAIN.asm
                    > USED AT LINE 6
INIT:               0198 DEFINED AT LINE 60 IN MAIN.asm
                    > USED AT LINE 39 IN MAIN.asm
PARSE:              01C1 DEFINED AT LINE 94 IN MAIN.asm
                    > USED AT LINE 42 IN MAIN.asm
STATEMENTLIST:      01E8 DEFINED AT LINE 117 IN MAIN.asm
                    > USED AT LINE 95 IN MAIN.asm
                    > USED AT LINE 122 IN MAIN.asm
STATEMENT:          01F3 DEFINED AT LINE 141 IN MAIN.asm
                    > USED AT LINE 121 IN MAIN.asm
STATEMENT10:        01FA DEFINED AT LINE 149 IN MAIN.asm
                    > USED AT LINE 146 IN MAIN.asm
STATEMENT1:         01FE DEFINED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 151 IN MAIN.asm
STATEMENT2:         0202 DEFINED AT LINE 160 IN MAIN.asm
                    > USED AT LINE 157 IN MAIN.asm
INSTRUCTION:        0209 DEFINED AT LINE 168 IN MAIN.asm
INSTRUCTION1:       0214 DEFINED AT LINE 176 IN MAIN.asm
                    > USED AT LINE 173 IN MAIN.asm
INSTRUCTION2:       0217 DEFINED AT LINE 178 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
FIRSTOPERAND:       0225 DEFINED AT LINE 185 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
SECONDOPERAND:      0225 DEFINED AT LINE 186 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
DIRECTIVE:          0225 DEFINED AT LINE 188 IN MAIN.asm
NEXTTOKEN:          0225 DEFINED AT LINE 220 IN MAIN.asm
                    > USED AT LINE 118 IN MAIN.asm
                    > USED AT LINE 148 IN MAIN.asm
                    > USED AT LINE 171 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
NEXTTOKEN0:         0236 DEFINED AT LINE 229 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
NEXTTOKEN1:         0239 DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 235 IN MAIN.asm
NEXTTOKEN1A:        0247 DEFINED AT LINE 240 IN MAIN.asm
                    > USED AT LINE 237 IN MAIN.asm
NEXTTOKEN2:         024A DEFINED AT LINE 244 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
NEXTTOKEN3:         0259 DEFINED AT LINE 254 IN MAIN.asm
                    > USED AT LINE 246 IN MAIN.asm
                    > USED AT LINE 248 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
NEXTTOKEN4:         025E DEFINED AT LINE 258 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
NEXTTOKEN5:         026A DEFINED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
NEXTTOKEN6:         0273 DEFINED AT LINE 271 IN MAIN.asm
                    > USED AT LINE 267 IN MAIN.asm
NEXTTOKEN7:         027D DEFINED AT LINE 278 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
NEXTTOKEN8:         028B DEFINED AT LINE 286 IN MAIN.asm
                    > USED AT LINE 282 IN MAIN.asm
NEXTTOKEN9:         0296 DEFINED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 289 IN MAIN.asm
NEXTTOKEN10:        02A1 DEFINED AT LINE 300 IN MAIN.asm
                    > USED AT LINE 296 IN MAIN.asm
NEXTTOKEN11:        02AC DEFINED AT LINE 307 IN MAIN.asm
                    > USED AT LINE 303 IN MAIN.asm
NEXTTOKEN12:        02B7 DEFINED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 310 IN MAIN.asm
NEXTTOKEN13:        02BA DEFINED AT LINE 319 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
NEXTTOKEN14:        02D0 DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
NEXTTOKEN15:        02D9 DEFINED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 332 IN MAIN.asm
NEXTTOKEN16:        02DC DEFINED AT LINE 339 IN MAIN.asm
                    > USED AT LINE 328 IN MAIN.asm
NEXTTOKEN17:        02DF DEFINED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
SEARCHOPCODE:       02EB DEFINED AT LINE 371 IN MAIN.asm
                    > USED AT LINE 281 IN MAIN.asm
PUSHBACKTOKEN:      0304 DEFINED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 177 IN MAIN.asm
IDENT:              030D DEFINED AT LINE 432 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
IDENT1:             0313 DEFINED AT LINE 436 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
IDENT2:             0321 DEFINED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 441 IN MAIN.asm
IDENT3:             0325 DEFINED AT LINE 448 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
EXPR:               032E DEFINED AT LINE 475 IN MAIN.asm
EXPR1:              0336 DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
EXPR2:              0356 DEFINED AT LINE 497 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
EXPR3:              0359 DEFINED AT LINE 500 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
EXPR4:              035E DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
                    > USED AT LINE 495 IN MAIN.asm
EXPR5:              0362 DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 503 IN MAIN.asm
ISSPACE:            036F DEFINED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
ISALPHANUM:         0375 DEFINED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 442 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
ISALPHA:            0379 DEFINED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
ISALPHA1:           037F DEFINED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
ISDIGIT:            0386 DEFINED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
NUMBER:             038D DEFINED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 337 IN MAIN.asm
NUMBER1:            0394 DEFINED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
NUMBER2:            03A3 DEFINED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 646 IN MAIN.asm
NUMBER3:            03A9 DEFINED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
NUMBER_HEX:         03B9 DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 327 IN MAIN.asm
HEX:                03C2 DEFINED AT LINE 685 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
HEX1:               03C5 DEFINED AT LINE 687 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
HEX2:               03D5 DEFINED AT LINE 696 IN MAIN.asm
                    > USED AT LINE 694 IN MAIN.asm
UPPER:              03DC DEFINED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
VALID:              03DE DEFINED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 692 IN MAIN.asm
DECIMAL:            03ED DEFINED AT LINE 732 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
DECIMAL1:           03F0 DEFINED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 751 IN MAIN.asm
SEARCHSTR:          0408 DEFINED AT LINE 774 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
                    > USED AT LINE 295 IN MAIN.asm
                    > USED AT LINE 302 IN MAIN.asm
                    > USED AT LINE 309 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
SEARCHSTRLOOP:      040B DEFINED AT LINE 779 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
SEARCHSTRCHARLOOP:  0414 DEFINED AT LINE 788 IN MAIN.asm
                    > USED AT LINE 794 IN MAIN.asm
SEARCHSTRNEXT:      0421 DEFINED AT LINE 800 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
NEXTCHAR:           0435 DEFINED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
                    > USED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 439 IN MAIN.asm
                    > USED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 688 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
NEXTCHAR1:          0454 DEFINED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
NEXTLINE:           045A DEFINED AT LINE 880 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
NEXTLINE1:          045F DEFINED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
NEXTLINE2:          046A DEFINED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
REWINDCHAR:         0470 DEFINED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 262 IN MAIN.asm
                    > USED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 660 IN MAIN.asm
PROMPT:             0478 DEFINED AT LINE 920 IN MAIN.asm
CRLF:               0481 DEFINED AT LINE 925 IN MAIN.asm
ERROR:              0488 DEFINED AT LINE 930 IN MAIN.asm
PRINT:              048D DEFINED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 40 IN MAIN.asm
                    > USED AT LINE 96 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 926 IN MAIN.asm
PRINTSTR:           0492 DEFINED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
PRINTSTR1:          0497 DEFINED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
ROT_OPCODES:        049F DEFINED AT LINE 2 IN data.asm
                    > USED AT LINE 376 IN MAIN.asm
ALU_OPCODES:        04BE DEFINED AT LINE 14 IN data.asm
                    > USED AT LINE 372 IN MAIN.asm
GEN_OPCODES:        04DD DEFINED AT LINE 26 IN data.asm
                    > USED AT LINE 381 IN MAIN.asm
REGISTERS:          05B8 DEFINED AT LINE 82 IN data.asm
                    > USED AT LINE 294 IN MAIN.asm
REG_PAIRS:          05CD DEFINED AT LINE 96 IN data.asm
                    > USED AT LINE 287 IN MAIN.asm
FLAGS:              05E7 DEFINED AT LINE 108 IN data.asm
                    > USED AT LINE 301 IN MAIN.asm
                    > USED AT LINE 308 IN MAIN.asm
DIRECTIVES:         05FC DEFINED AT LINE 120 IN data.asm
BUFFER:             0800 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
STACK:              0950 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 456 IN IOSerial.asm
                    > USED AT LINE 38 IN MAIN.asm
RST08:              0950 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 118 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
RST10:              0952 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 124 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
RST18:              0954 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 130 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
RST20:              0956 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 136 IN IOSerial.asm
                    > USED AT LINE 461 IN IOSerial.asm
RST28:              0958 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RST30:              095A DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 148 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
BAUD:               095C DEFINED AT LINE 15 IN ram.asm
INTVEC:             095E DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 154 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
NMIVEC:             0960 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 202 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
GETCVEC:            0962 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 468 IN IOSerial.asm
PUTCVEC:            0964 DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
VTEMP1:             0966 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 665 IN MAIN.asm
VTEMP2:             0968 DEFINED AT LINE 22 IN ram.asm
VTOKEN:             096A DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
                    > USED AT LINE 223 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
                    > USED AT LINE 406 IN MAIN.asm
VTOKENVAL:          096B DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 70 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
                    > USED AT LINE 407 IN MAIN.asm
VBUFFERPOS:         096D DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
VBUFFER:            096F DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 65 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
VASMPTR:            0971 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 67 IN MAIN.asm
VSTRPTR:            0973 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 69 IN MAIN.asm
                    > USED AT LINE 280 IN MAIN.asm
                    > USED AT LINE 433 IN MAIN.asm
                    > USED AT LINE 449 IN MAIN.asm
                    > USED AT LINE 476 IN MAIN.asm
                    > USED AT LINE 510 IN MAIN.asm
VSYMPTR:            0975 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 72 IN MAIN.asm
VEXPRPTR:           0977 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 74 IN MAIN.asm
STRINGS:            0979 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 68 IN MAIN.asm
SYMBOLS:            0A79 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 71 IN MAIN.asm
EXPRS:              0B79 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 73 IN MAIN.asm
ASSEMBLY:           0C79 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 66 IN MAIN.asm
