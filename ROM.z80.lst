0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; *************************************************************************
0000                             ; 
0000                             ;       Serial routines 
0000                             ; 
0000                             ;       written by Craig Jones 
0000                             ; 
0000                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
0000                             ; 
0000                             ;       see the LICENSE file in this repo for more information 
0000                             ; 
0000                             ; *****************************************************************************
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 00 08               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 02 08               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 04 08               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 06 08               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 08 08               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 0A 08               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 0E 08               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 10 08               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 12 08               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 14 08               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 28 0A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 00 08               LD   (RST08),HL   
0094   22 02 08               LD   (RST10),HL   
0097   22 04 08               LD   (RST18),HL   
009A   22 06 08               LD   (RST20),HL   
009D   22 08 08               LD   (RST28),HL   
00A0   22 0A 08               LD   (RST30),HL   
00A3   22 0E 08               LD   (INTVEC),HL   
00A6   22 10 08               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 12 08               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 14 08               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 80 01               JP   start   ; into #180 of the prog
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       TecM8 1.0 Assembler for the Tec-1
00C6                             ; 
00C6                             ;       by John Hardy
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                             ; **************************************************************************
00C6                             ; Constants
00C6                             ; **************************************************************************
00C6                TRUE:     EQU   -1   
00C6                FALSE:    EQU   0   
00C6                CTRL_C:   EQU   3   
00C6                CTRL_H:   EQU   8   
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put TecM8 code from here	
0180                EOF_:     EQU   0   
0180                NEWLN_:   EQU   1   
0180                COMMENT_:   EQU   2   
0180                NUM_:     EQU   3   
0180                LABEL_:   EQU   4   
0180                IDENT_:   EQU   5   
0180                END_:     EQU   6   
0180                DIR_:     EQU   7   
0180                SYM_:     EQU   8   
0180                START:       ; entry point of TecM8
0180   31 28 0A               LD   sp,STACK   
0183   CD 98 01               CALL   init   
0186   CD 91 03               CALL   printStr   
0189   54 65 63 4D 38 20 30 2E 30 0D 0A 00 .CSTR   "TecM8 0.0\r\n"   
0195   C3 C1 01               JP   parse   
0198                INIT:        
0198   AF                     XOR   a   
0199   32 1A 08               LD   (vPushBack),a   ; nothing in push back buffer
019C   32 1B 08               LD   (vToken),a   ; NUL_ token
019F   21 28 08               LD   hl,chars   
01A2   22 1E 08               LD   (vCharPtr),hl   
01A5   21 28 0D               LD   hl,assembly   
01A8   22 20 08               LD   (vAsmPtr),hl   
01AB   21 28 0A               LD   hl,strings   
01AE   22 22 08               LD   (vStrPtr),hl   
01B1   22 1C 08               LD   (vTokenVal),hl   
01B4   21 28 0B               LD   hl,symbols   
01B7   22 24 08               LD   (vSymPtr),hl   
01BA   21 28 0C               LD   hl,exprs   
01BD   22 26 08               LD   (vExprPtr),hl   
01C0   C9                     RET      
01C1                PARSE:       
01C1   CD E8 01               CALL   statementList   
01C4   CD 91 03               CALL   printStr   
01C7   50 61 72 73 69 6E 67 20 63 6F 6D 70 6C 65 74 65 64 20 73 75 63 63 65 73 73 66 75 6C 6C 79 2E 00 .CSTR   "Parsing completed successfully."   ; 
01E7   76                     HALT      
01E8                STATEMENTLIST:      
01E8   3A 1B 08               LD   a,(vToken)   
01EB   FE 00                  CP   EOF_   
01ED   C8                     RET   z   
01EE   CD 0C 02               CALL   statement   
01F1   FE 06                  CP   END_   
01F3   CD 0D 02               CALL   match   
01F6   28 F0                  JR   z,statementList   
01F8   CD 8C 03               CALL   error   
01FB   45 78 70 65 63 74 65 64 20 6E 65 77 6C 69 6E 65 00 .CSTR   "Expected newline"   
020C                STATEMENT:      
020C   C9                     RET      
020D                MATCH:       
020D   C0                     RET   nz   
020E   F5                     PUSH   af   
020F   CD 16 02               CALL   nextToken   
0212   6F                     LD   l,a   
0213   F1                     POP   af   
0214   7D                     LD   a,l   
0215   C9                     RET      
0216                             ; nextToken is a lexer function that reads characters from the input and classifies
0216                             ; them into different token types. It handles whitespace, end of input, newlines,
0216                             ; comments, identifiers, labels, directives, hexadecimal numbers, and other symbols.
0216                             ; Input: None
0216                             ; Output:
0216                             ; a: contains the type of the next token.
0216                             ; hl: contains the value associated with the next token.
0216                             ; Destroyed: None
0216                NEXTTOKEN:      
0216   21 00 00               LD   hl,0   
0219                NEXTTOKEN1:      
0219   CD 68 03               CALL   nextChar   ; Get the next character
021C   FE 20                  CP   " "   ; Is it a space?
021E   28 F9                  JR   z,nextToken1   ; If yes, skip it and get the next character
0220   FE 09                  CP   "\t"   ; Is it a tab?
0222   28 F5                  JR   z,nextToken1   ; If yes, skip it and get the next character
0224   B7                     OR   a   ; Is it null (end of input)?
0225   20 03                  JR   nz,nextToken2   ; If not, continue to the next check
0227   3E 00                  LD   a,EOF_   ; If yes, return with EOF token
0229   C9                     RET      
022A                NEXTTOKEN2:      
022A   FE 0A                  CP   "\n"   ; Is it a newline?
022C   20 03                  JR   nz,nextToken2x   ; If not, continue to the next check
022E   3E 01                  LD   a,NEWLN_   ; If yes, return with NEWLN token
0230   C9                     RET      
0231                NEXTTOKEN2X:      
0231   FE 3B                  CP   ";"   ; Is it a comment?
0233   C4 40 02               CALL   nz,nextToken4   ; If not, continue to the next check
0236                NEXTTOKEN3:      
0236   CD 68 03               CALL   nextChar   ; Get the next character in the comment
0239   FE 21                  CP   " "+1   ; Loop until the next control character
023B   30 F9                  JR   nc,nextToken3   
023D   3E 02                  LD   a,COMMENT_   ; Return with COMMENT token
023F   C9                     RET      
0240                NEXTTOKEN4:      
0240   FE 5F                  CP   "_"   ; Is it an identifier?
0242   28 05                  JR   z,nextToken5   ; If yes, continue to the next check
0244   CD B6 02               CALL   isAlphaNum   ; If not, check if it's alphanumeric
0247   30 13                  JR   nc,nextToken7x   ; If not, continue to the next check
0249                NEXTTOKEN5:      
0249   CD 92 02               CALL   ident   ; Parse the identifier
024C   CD 68 03               CALL   nextChar   ; Get the next character
024F   FE 3A                  CP   ":"   ; Is it a label?
0251   20 03                  JR   nz,nextToken6   ; If not, continue to the next check
0253   3E 04                  LD   a,LABEL_   ; If yes, return with LABEL token
0255   C9                     RET      
0256                NEXTTOKEN6:      
0256   C4 76 03               CALL   nz,pushBackChar   ; Push back the character if it's not null
0259   3E 05                  LD   a,IDENT_   ; Return with IDENT token
025B   C9                     RET      
025C                NEXTTOKEN7X:      
025C   FE 2E                  CP   "."   ; Is it a directive?
025E   20 06                  JR   nz,nextToken7   ; If not, continue to the next check
0260   CD B2 02               CALL   directive   ; Parse the directive
0263   3E 07                  LD   a,DIR_   ; Return with DIR token
0265   C9                     RET      
0266                NEXTTOKEN7:      
0266   FE 24                  CP   "$"   ; Is it a hexadecimal number?
0268   20 0D                  JR   nz,nextToken8   ; If not, continue to the next check
026A   CD 68 03               CALL   nextChar   ; Get the next character
026D   CD C8 02               CALL   isHexDigit   ; Check if it's a hexadecimal digit
0270   38 05                  JR   c,nextToken8   ; If not, continue to the next check
0272   CD 76 03               CALL   pushBackChar   ; Push back the character
0275   18 15                  JR   nextToken10   ; Jump to the next check
0277                NEXTTOKEN8:      
0277   CD FE 02               CALL   hex   ; Parse the hexadecimal number
027A   3E 03                  LD   a,NUM_   ; Return with NUM token
027C   C9                     RET      
027D   FE 2D                  CP   "-"   ; Is it a negative number?
027F   28 05                  JR   z,nextToken9   ; If yes, continue to the next check
0281   CD CE 02               CALL   isDigit   ; Check if it's a digit
0284   18 06                  JR   nextToken10   ; Jump to the next check
0286                NEXTTOKEN9:      
0286   CD D5 02               CALL   number   ; Parse the number
0289   3E 03                  LD   a,NUM_   ; Return with NUM token
028B   C9                     RET      
028C                NEXTTOKEN10:      
028C   6F                     LD   l,a   ; Load the token into L
028D   26 00                  LD   h,0   ; Clear H
028F   3E 08                  LD   a,SYM_   ; Return with SYM token
0291   C9                     RET      
0292                             ; collects adds ident to string heap
0292                             ; returns hl = ptr to ident
0292                             ; destroys a,d,e,h,l
0292                             ; updates vStrPtr
0292                IDENT:       
0292   2A 22 08               LD   hl,(vStrPtr)   ; hl = top of strings heap
0295   23                     INC   hl   ; skip length byte
0296                IDENT1:      
0296   77                     LD   (hl),a   ; write char
0297   23                     INC   hl   
0298   CD 68 03               CALL   nextChar   
029B   FE 5F                  CP   "_"   
029D   28 F7                  JR   z,ident1   
029F   CD B6 02               CALL   isAlphanum   
02A2   CD 76 03               CALL   pushBackChar   
02A5   ED 5B 22 08            LD   de,(vStrPtr)   ; de = string start
02A9   22 22 08               LD   (vStrPtr),hl   ; update top of strings heap
02AC   B7                     OR   a   
02AD   ED 52                  SBC   hl,de   ; hl = length, de = strPtr
02AF   EB                     EX   de,hl   ; e = len, hl = strPtr
02B0   73                     LD   (hl),e   ; save lsb(length)
02B1   C9                     RET      
02B2                DIRECTIVE:      
02B2   21 00 00               LD   hl,0   
02B5   C9                     RET      
02B6                             ;     jr c,ident1                     ; loop while alpha numeric
02B6                             ;     cp ":"
02B6                             ;     jr nz,ident2
02B6                             ;     call endStr
02B6                             ;     scf
02B6                             ;     ret
02B6                             ; ident2:
02B6                             ;     call endStr
02B6                             ;     scf                             ; clear carry flag
02B6                             ;     ccf
02B6                             ;     ret
02B6                             ;     ld (hl),a                       ; write char
02B6                             ;     inc hl
02B6                             ;     call nextChar
02B6                             ; ident3:
02B6                             ;     cp " "                          ; is it a control char? \0 \r \n ?
02B6                             ;     jr c,ident5
02B6                             ;     cp ","                          ; is it end of arg?
02B6                             ;     jr z,ident5
02B6                             ;     cp ";"                          ; is it a comment at end of line
02B6                             ;     jr z,ident5
02B6                             ;     cp ")"                          ; todo: check nesting
02B6                             ;     jr z,ident5
02B6                             ; ident4:
02B6                             ;     call endStr
02B6                             ;     scf                             ; clear carry flag
02B6                             ;     ccf
02B6                             ;     ret
02B6                             ; ident5:
02B6                             ;     call pushBackChar               ; push the char back to input
02B6                             ;     jr ident4
02B6                             ; endStr: completes adding a string to the strings heap area
02B6                             ; and stores the length at the start of the string.
02B6                             ; Input:
02B6                             ; hl: points to the end of the string.
02B6                             ; Output:
02B6                             ; hl: points to the start of the string.
02B6                             ; vStrPtr: is updated to pointer to memory after the string
02B6                             ; Destroyed: None
02B6                             ; endStr:
02B6                             ;     ld de,(vStrPtr)                 ; de = string start
02B6                             ;     ld (vStrPtr),hl                 ; update top of strings heap
02B6                             ;     or a
02B6                             ;     sbc hl,de                       ; hl = length, de = strPtr
02B6                             ;     ex de,hl                        ; e = len, hl = strPtr
02B6                             ;     ld (hl),e                       ; save lsb(length)
02B6                             ;     ret
02B6                             ; isAlphaNum checks if the character in the a register is an alphanumeric character
02B6                             ; (either uppercase or lowercase).
02B6                             ; If the character is alphabetic, it converts it to uppercase and sets the carry flag.
02B6                             ; If the character is not alphabetic, it clears the carry flag.
02B6                             ; Input:
02B6                             ; a: Contains the character to be checked.
02B6                             ; Output:
02B6                             ; a: Contains the uppercase version of the input character if it was alphabetic.
02B6                             ; cf: Set if the input character was alphabetic, cleared otherwise.
02B6                             ; Destroyed: c
02B6                ISALPHANUM:      
02B6   CD CE 02               CALL   isDigit   
02B9   C8                     RET   z   ; falls thru to isAlpha
02BA                             ; isAlpha: checks if the character in the a register is an alphabetic character
02BA                             ; (either uppercase or lowercase).
02BA                             ; If the character is alphabetic, it converts it to uppercase and sets the carry flag.
02BA                             ; Input:
02BA                             ; a: Contains the character to be checked.
02BA                             ; Output:
02BA                             ; a: Contains the uppercase version of the input character if it was alphabetic.
02BA                             ; cf: Set if the input character was alphabetic, cleared otherwise.
02BA                             ; Destroyed: c
02BA                ISALPHA:      
02BA   0E 5B                  LD   c,"Z"+1   ; last uppercase letter
02BC                ISALPHA0:      
02BC   FE 61                  CP   "a"   ; is char lowercase?
02BE   38 02                  JR   c,isAlpha1   
02C0   D6 20                  SUB   $20   ; yes, convert a to uppercase
02C2                ISALPHA1:      
02C2   B9                     CP   c   ; is char > last letter?
02C3   D0                     RET   nc   ; yes, exit with cf cleared
02C4   FE 41                  CP   "A"   ; is char an uppercase letter ?
02C6   3F                     CCF      ; invert cf
02C7   C9                     RET      
02C8                             ; isHexDigit: checks if the character in the a register is a hexadecimal
02C8                             ; digit (0-9,A-F,a-f). If the character is a hex digit, it sets the carry flag.
02C8                             ; Input:
02C8                             ; a: Contains the character to be checked.
02C8                             ; Output:
02C8                             ; cf: Set if the input character was a digit, cleared otherwise.
02C8                             ; Destroyed: none
02C8                ISHEXDIGIT:      
02C8   0E 47                  LD   c,"F"+1   
02CA   CD BC 02               CALL   isAlpha0   
02CD   C8                     RET   z   ; fall thru to isDigit
02CE                             ; isDigit: checks if the character in the a register is a decimal
02CE                             ; digit (0-9). If the character is a decimal digit, it sets the carry flag.
02CE                             ; Input:
02CE                             ; a: Contains the character to be checked.
02CE                             ; Output:
02CE                             ; cf: Set if the input character was a digit, cleared otherwise.
02CE                             ; Destroyed: none
02CE                ISDIGIT:      
02CE   FE 3A                  CP   "9"+1   ; is char > "9"?
02D0   D0                     RET   nc   ; yes, exit with cf cleared
02D1   FE 30                  CP   "0"   ; is char a decimal digit ?
02D3   3F                     CCF      ; invert cf
02D4   C9                     RET      
02D5                             ; number: parse a number from the input. It handles both decimal and hexadecimal
02D5                             ; numbers, and also supports negative numbers.
02D5                             ; Input: None
02D5                             ; Output:
02D5                             ; hl: Contains the parsed number.
02D5                             ; Destroyed: None
02D5                             ; vTemp1: A temporary memory location used to store the sign of the number.
02D5                NUMBER:      
02D5   FE 2D                  CP   "-"   ; Is it a negative number?
02D7   3E FF                  LD   a,-1   ; a = sign flag
02D9   28 01                  JR   z,num1   
02DB   3C                     INC   a   
02DC                NUM1:        
02DC   32 16 08               LD   (vTemp1),a   ; Store the sign flag in vTemp1
02DF   CD 68 03               CALL   nextChar   ; Get the next character
02E2   FE 24                  CP   "$"   ; Is it a hexadecimal number?
02E4   20 05                  JR   nz,num2   
02E6   CD FE 02               CALL   hex   ; If yes, parse the hexadecimal number
02E9   18 06                  JR   num3   
02EB                NUM2:        
02EB   CD 76 03               CALL   pushBackChar   ; Push back the character
02EE   CD 29 03               CALL   decimal   ; Parse the decimal number
02F1                NUM3:        
02F1   3A 16 08               LD   a,(vTemp1)   ; Load the sign from vTemp1
02F4   3C                     INC   a   ; Increment a
02F5   C0                     RET   nz   
02F6   EB                     EX   de,hl   ; negate the value of HL
02F7   21 00 00               LD   hl,0   
02FA   B7                     OR   a   
02FB   ED 52                  SBC   hl,de   
02FD   C9                     RET      
02FE                             ; hex: parses a hexadecimal number
02FE                             ; Input: none
02FE                             ; Output:
02FE                             ; hl: parsed number
02FE                             ; Destroyed: a
02FE                HEX:         
02FE   21 00 00               LD   hl,0   ; Initialize HL to 0 to hold the result
0301                HEX1:        
0301   CD 68 03               CALL   nextChar   
0304   FE 30                  CP   "0"   ; Compare with ASCII "0"
0306   D8                     RET   c   ; If less, exit
0307   FE 3A                  CP   "9"+1   ; Compare with ASCII "9"
0309   38 0F                  JR   c,valid   ; If less or equal, jump to valid
030B   FE 61                  CP   "a"   ; is char lowercase letter?
030D   38 02                  JR   c,hex2   
030F   D6 20                  SUB   $20   ; yes, convert a to uppercase
0311                HEX2:        
0311   FE 41                  CP   "A"   ; Compare with ASCII "A"
0313   D8                     RET   c   ; If less, exit invalid
0314   FE 47                  CP   "F"+1   ; Compare with ASCII "F"
0316   38 00                  JR   c,upper   ; If less or equal, jump to upper
0318                UPPER:       
0318   D6 37                  SUB   $37   ; Convert from ASCII to hex
031A                VALID:       
031A   D6 30                  SUB   "0"   ; Convert from ASCII to numeric value
031C   D8                     RET   c   ; If the result is negative, the character was not a valid hexadecimal digit, so return
031D   FE 10                  CP   $10   ; Compare the result with $10
031F   D0                     RET   nc   ; If the result is $10 or more, the character was not a valid hexadecimal digit, so return
0320   29                     ADD   hl,hl   ; Multiply the number in HL by 16 by shifting it left 4 times
0321   29                     ADD   hl,hl   ; This is done because each hexadecimal digit represents 16^n where n is the position of the digit from the right
0322   29                     ADD   hl,hl   
0323   29                     ADD   hl,hl   
0324   85                     ADD   a,l   ; Add the new digit to the number in HL
0325   6F                     LD   l,a   ; Store the result back in L
0326   C3 01 03               JP   hex1   ; Jump back to hex1 to process the next character
0329                             ; decimal: parses a decimal number
0329                             ; Input: none
0329                             ; Output:
0329                             ; hl: parsed number.
0329                             ; Destroyed registers:
0329                             ; A: Used for temporary storage and calculations.
0329                             ; DE: Used for temporary storage and calculations.
0329                DECIMAL:      
0329   21 00 00               LD   hl,0   ; Initialize HL to 0 to hold the result
032C                DECIMAL1:      
032C   CD 68 03               CALL   nextChar   
032F   D6 30                  SUB   "0"   ; Subtract ASCII "0" to convert from ASCII to binary
0331   D8                     RET   c   ; If the result is negative, the character was not a digit; return
0332   FE 0A                  CP   10   ; Compare the result with 10
0334   D0                     RET   nc   ; If the result is 10 or more, the character was not a digit; return
0335   03                     INC   bc   ; Increment BC to point to the next digit
0336   54 5D                  LD   de,hl   ; Copy HL to DE
0338   29                     ADD   hl,hl   ; Multiply HL by 2
0339   29                     ADD   hl,hl   ; Multiply HL by 4
033A   19                     ADD   hl,de   ; Add DE to HL to multiply HL by 5
033B   29                     ADD   hl,hl   ; Multiply HL by 10
033C   85                     ADD   a,l   ; Add the digit in A to the low byte of HL
033D   6F                     LD   l,a   ; Store the result in the low byte of HL
033E   3E 00                  LD   a,0   ; Clear A
0340   8C                     ADC   a,h   ; Add the carry from the previous addition to the high byte of HL
0341   67                     LD   h,a   ; Store the result in the high byte of HL
0342   18 E8                  JR   decimal1   ; Jump back to the start of the loop
0344                             ; SearchStrings: search through a list of Pascal strings for a match.
0344                             ; Inputs:
0344                             ; de: Points to the string to search for.
0344                             ; hl: Points to the start of the list of strings.
0344                             ; Outputs:
0344                             ; cf: Set if a match is found
0344                             ; hl: points to matching string
0344                             ; Destroyed: a,b,d,e,h,l
0344                SEARCHSTRINGS:      
0344   1A                     LD   a,(de)   ; Load the length of the string to search for
0345   47                     LD   b,a   ; Copy the length to B for looping
0346   E5                     PUSH   hl   ; Store the address of the current string on the stack
0347   BE                     CP   (hl)   ; Compare with the length of the current string in the list
0348   20 0C                  JR   nz,nextString   ; If the lengths are not equal, move to the next string
034A   13                     INC   de   ; Move to the start of the string data
034B   23                     INC   hl   ; Move to the start of the string data
034C                COMPARECHARS:      
034C   1A                     LD   a,(de)   ; Load the next character from the string to search for
034D   BE                     CP   (hl)   ; Compare with the next character in the current string
034E   20 06                  JR   nz,nextString   ; If the characters are not equal, move to the next string
0350   13                     INC   de   ; Move to the next character in the string to search for
0351   23                     INC   hl   ; Move to the next character in the current string
0352   10 F8                  DJNZ   compareChars   ; Loop until we've compared all characters
0354   37                     SCF      ; Set the carry flag to indicate a match
0355   C9                     RET      
0356                NEXTSTRING:      
0356   E1                     POP   hl   ; Restore the address of the current string from the stack
0357                             ; Move HL to the start of the next string in the list
0357   7E                     LD   a,(hl)   ; Load the length of the current string
0358   3C                     INC   a   ; a = length byte plus length of string
0359   85                     ADD   a,l   ; hl += a
035A   6F                     LD   l,a   
035B   3E 00                  LD   a,0   
035D   8C                     ADC   a,h   
035E   67                     LD   h,a   
035F   E5                     PUSH   hl   ; Store the address of the current string on the stack
0360                             ; Check if we've reached the end of the list
0360   7E                     LD   a,(hl)   ; a = length of next string
0361   B7                     OR   a   ; If a is not zero, continue searching
0362   20 E0                  JR   nz,searchStrings   
0364   37                     SCF      ; set carry flag, no match
0365   3F                     CCF      ; clear carry flag
0366   E1                     POP   hl   ; Clear the stack
0367   C9                     RET      
0368                             ; nextChar: checks if there is a character that has been pushed back for re-reading.
0368                             ; If there is, it retrieves that character, otherwise it fetches a new character
0368                             ; from the input.
0368                             ; Input: none
0368                             ; Output:
0368                             ; a: Contains the next character to be processed, either retrieved from the
0368                             ; pushback buffer or fetched from the input.
0368                             ; Destroyed: None.
0368                NEXTCHAR:      
0368   CB 77                  BIT   7,(vPushBack)   ; Check the high bit of the pushback buffer
036A   CA 81 00               JP   z,getchar   ; If the high bit is 0, jump to getchar
036D   3A 1A 08               LD   a,(vPushBack)   ; If the high bit is 1, load the pushed back character into A
0370   E6 7F                  AND   0x7F   ; Clear the high bit
0372   32 1A 08               LD   (vPushBack),a   ; Store the character back in the buffer
0375   C9                     RET      ; Return with the pushed back character in A
0376                             ; pushBackChar: push back a character for re-reading. It sets the high bit of the
0376                             ; character as a flag to indicate that this character has been pushed back, and
0376                             ; stores the character in the pushback buffer.
0376                             ; Input:
0376                             ; a: Contains the character to be pushed back.
0376                             ; Output: None.
0376                             ; Destroyed: None.
0376                PUSHBACKCHAR:      
0376   F6 80                  OR   0x80   ; Set the high bit of the character to be pushed back
0378   32 1A 08               LD   (vPushBack),a   ; Store the character in the pushback buffer
037B   C9                     RET      
037C                PROMPT:      
037C   CD 91 03               CALL   printStr   
037F   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0384   C9                     RET      
0385                CRLF:        
0385   CD 91 03               CALL   printStr   
0388   0D 0A 00               .CSTR   "\r\n"   
038B   C9                     RET      
038C                ERROR:       
038C   E1                     POP   hl   
038D   CD 9B 03               CALL   putStr   
0390   76                     HALT      
0391                PRINTSTR:      
0391   E1                     POP   hl   ; "return" address is address of string			
0392   CD 9B 03               CALL   putStr   
0395   23                     INC   hl   ; inc past null
0396   E9                     JP   (hl)   ; put it back	
0397                PUTSTR0:      
0397   CD 85 00               CALL   putchar   
039A   23                     INC   hl   
039B                PUTSTR:      
039B   7E                     LD   a,(hl)   
039C   B7                     OR   A   
039D   20 F8                  JR   nz,putStr0   
039F   C9                     RET      
03A0                             ; *******************************************************************************
03A0                             ; *********  END OF MAIN   ******************************************************
03A0                             ; *******************************************************************************
03A0                OPCODES:      
03A0   03 41 44 43  ADC_:     .PSTR   "ADC"   
03A4   03 41 44 44  ADD_:     .PSTR   "ADD"   
03A8   03 41 4E 44  AND_:     .PSTR   "AND"   
03AC   03 42 49 54  BIT_:     .PSTR   "BIT"   
03B0   04 43 41 4C 4C CALL_:   .PSTR   "CALL"   
03B5   03 43 43 46  CCF_:     .PSTR   "CCF"   
03B9   02 43 50     CP_:      .PSTR   "CP"   
03BC   03 43 50 44  CPD_:     .PSTR   "CPD"   
03C0   04 43 50 44 52 CPDR_:   .PSTR   "CPDR"   
03C5   03 43 50 49  CPI_:     .PSTR   "CPI"   
03C9   04 43 50 49 52 CPIR_:   .PSTR   "CPIR"   
03CE   03 43 50 4C  CPL_:     .PSTR   "CPL"   
03D2   03 44 41 41  DAA_:     .PSTR   "DAA"   
03D6   03 44 45 43  DEC_:     .PSTR   "DEC"   
03DA   02 44 49     DI_:      .PSTR   "DI"   
03DD   04 44 4A 4E 5A DJNZ_:   .PSTR   "DJNZ"   
03E2   02 45 49     EI_:      .PSTR   "EI"   
03E5   02 45 58     EX_:      .PSTR   "EX"   
03E8   03 45 58 58  EXX_:     .PSTR   "EXX"   
03EC   04 48 41 4C 54 HALT_:   .PSTR   "HALT"   
03F1   02 49 4D     IM_:      .PSTR   "IM"   
03F4   02 49 4E     IN_:      .PSTR   "IN"   
03F7   03 49 4E 43  INC_:     .PSTR   "INC"   
03FB   03 49 4E 44  IND_:     .PSTR   "IND"   
03FF   04 49 4E 44 52 INDR_:   .PSTR   "INDR"   
0404   03 49 4E 49  INI_:     .PSTR   "INI"   
0408   04 49 4E 49 52 INIR_:   .PSTR   "INIR"   
040D   02 4A 50     JP_:      .PSTR   "JP"   
0410   02 4A 52     JR_:      .PSTR   "JR"   
0413   02 4C 44     LD_:      .PSTR   "LD"   
0416   03 4C 44 44  LDD_:     .PSTR   "LDD"   
041A   04 4C 44 44 52 LDDR_:   .PSTR   "LDDR"   
041F   03 4C 44 49  LDI_:     .PSTR   "LDI"   
0423   04 4C 44 49 52 LDIR_:   .PSTR   "LDIR"   
0428   03 4E 45 47  NEG_:     .PSTR   "NEG"   
042C   03 4E 4F 50  NOP_:     .PSTR   "NOP"   
0430   02 4F 52     OR_:      .PSTR   "OR"   
0433   04 4F 54 44 52 OTDR_:   .PSTR   "OTDR"   
0438   04 4F 54 49 52 OTIR_:   .PSTR   "OTIR"   
043D   03 4F 55 54  OUT_:     .PSTR   "OUT"   
0441   04 4F 55 54 44 OUTD_:   .PSTR   "OUTD"   
0446   04 4F 55 54 49 OUTI_:   .PSTR   "OUTI"   
044B   03 50 4F 50  POP_:     .PSTR   "POP"   
044F   04 50 55 53 48 PUSH_:   .PSTR   "PUSH"   
0454   03 52 45 53  RES_:     .PSTR   "RES"   
0458   03 52 45 54  RET_:     .PSTR   "RET"   
045C   04 52 45 54 49 RETI_:   .PSTR   "RETI"   
0461   04 52 45 54 4E RETN_:   .PSTR   "RETN"   
0466   02 52 4C     RL_:      .PSTR   "RL"   
0469   03 52 4C 41  RLA_:     .PSTR   "RLA"   
046D   03 52 4C 43  RLC_:     .PSTR   "RLC"   
0471   04 52 4C 43 41 RLCA_:   .PSTR   "RLCA"   
0476   03 52 4C 44  RLD_:     .PSTR   "RLD"   
047A   02 52 52     RR_:      .PSTR   "RR"   
047D   03 52 52 41  RRA_:     .PSTR   "RRA"   
0481   03 52 52 43  RRC_:     .PSTR   "RRC"   
0485   04 52 52 43 41 RRCA_:   .PSTR   "RRCA"   
048A   03 52 52 44  RRD_:     .PSTR   "RRD"   
048E   03 52 53 54  RST_:     .PSTR   "RST"   
0492   03 53 42 43  SBC_:     .PSTR   "SBC"   
0496   03 53 43 46  SCF_:     .PSTR   "SCF"   
049A   03 53 45 54  SET_:     .PSTR   "SET"   
049E   03 53 4C 41  SLA_:     .PSTR   "SLA"   
04A2   03 53 52 41  SRA_:     .PSTR   "SRA"   
04A6   03 53 52 4C  SRL_:     .PSTR   "SRL"   
04AA   03 53 55 42  SUB_:     .PSTR   "SUB"   
04AE   03 58 4F 52  XOR_:     .PSTR   "XOR"   
04B2   00                     DB   0   
04B3                             ; *******************************************************************************
04B3                             ; *********  END OF DATA   ******************************************************
04B3                             ; *******************************************************************************
0800                          .ORG   RAMSTART   
0800                RST08:    DS   2   
0802                RST10:    DS   2   
0804                RST18:    DS   2   
0806                RST20:    DS   2   
0808                RST28:    DS   2   
080A                RST30:    DS   2   ; 
080C                BAUD:     DS   2   ; 
080E                INTVEC:   DS   2   ; 
0810                NMIVEC:   DS   2   ; 
0812                GETCVEC:   DS   2   ; 
0814                PUTCVEC:   DS   2   ; 
0816                VTEMP1:   DS   2   ; temp var 1
0818                VTEMP2:   DS   2   ; temp var 2
081A                VPUSHBACK:   DS   1   ; buffer for pushed back character on input
081B                VTOKEN:   DS   1   ; byte containing enum of token type
081C                VTOKENVAL:   DS   2   ; pointer to start of token value
081E                VCHARPTR:   DS   2   ; pointer to char position into input buffer
0820                VASMPTR:   DS   2   ; pointer to assembly point
0822                VSTRPTR:   DS   2   ; pointer to string stack
0824                VSYMPTR:   DS   2   ; pointer to symbol stack
0826                VEXPRPTR:   DS   2   ; pointer to expression stack
0828                CHARS:    DS   $100   ; page aligned, 256 bytes , a long line!
0928                          DS   $100   
0A28                STACK:       ; grows down
0A28                STRINGS:   DS   $100   ; string heap - grows up
0B28                SYMBOLS:   DS   $100   ; symbol heap - grows up
0C28                EXPRS:    DS   $100   ; expression heap - grows up
0D28                ASSEMBLY:      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 116 IN IOSerial.asm
                    > USED AT LINE 122 IN IOSerial.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 134 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 146 IN IOSerial.asm
                    > USED AT LINE 152 IN IOSerial.asm
                    > USED AT LINE 158 IN IOSerial.asm
                    > USED AT LINE 200 IN IOSerial.asm
                    > USED AT LINE 26 IN MAIN.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 33 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
                    > USED AT LINE 498 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 34 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 322 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 36 IN IOSerial.asm
                    > USED AT LINE 326 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 475 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 46 IN IOSerial.asm
                    > USED AT LINE 497 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 50 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 51 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 52 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 53 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 54 IN IOSerial.asm
                    > USED AT LINE 497 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 55 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 56 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 57 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 61 IN IOSerial.asm
                    > USED AT LINE 497 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 62 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 63 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 64 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 68 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 72 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 73 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 74 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 75 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 76 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 77 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 78 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 79 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 87 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 88 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 89 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 90 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 91 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 92 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 93 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 94 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 107 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 108 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 109 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 113 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 163 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 481 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 187 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 193 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 196 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 469 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 305 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 308 IN IOSerial.asm
                    > USED AT LINE 312 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 320 IN IOSerial.asm
                    > USED AT LINE 467 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 321 IN IOSerial.asm
                    > USED AT LINE 325 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 518 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 449 IN IOSerial.asm
                    > USED AT LINE 562 IN MAIN.asm
RESET:              008B DEFINED AT LINE 455 IN IOSerial.asm
                    > USED AT LINE 114 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 17 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 18 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 19 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 20 IN MAIN.asm
EOF_:               0000 DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 71 IN MAIN.asm
                    > USED AT LINE 114 IN MAIN.asm
NEWLN_:             0001 DEFINED AT LINE 30 IN MAIN.asm
                    > USED AT LINE 119 IN MAIN.asm
COMMENT_:           0002 DEFINED AT LINE 31 IN MAIN.asm
                    > USED AT LINE 128 IN MAIN.asm
NUM_:               0003 DEFINED AT LINE 32 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 170 IN MAIN.asm
LABEL_:             0004 DEFINED AT LINE 33 IN MAIN.asm
                    > USED AT LINE 140 IN MAIN.asm
IDENT_:             0005 DEFINED AT LINE 34 IN MAIN.asm
                    > USED AT LINE 144 IN MAIN.asm
END_:               0006 DEFINED AT LINE 35 IN MAIN.asm
                    > USED AT LINE 74 IN MAIN.asm
DIR_:               0007 DEFINED AT LINE 36 IN MAIN.asm
                    > USED AT LINE 150 IN MAIN.asm
SYM_:               0008 DEFINED AT LINE 37 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
START:              0180 DEFINED AT LINE 39 IN MAIN.asm
                    > USED AT LINE 6
INIT:               0198 DEFINED AT LINE 46 IN MAIN.asm
                    > USED AT LINE 41 IN MAIN.asm
PARSE:              01C1 DEFINED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 44 IN MAIN.asm
STATEMENTLIST:      01E8 DEFINED AT LINE 69 IN MAIN.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 76 IN MAIN.asm
STATEMENT:          020C DEFINED AT LINE 80 IN MAIN.asm
                    > USED AT LINE 73 IN MAIN.asm
MATCH:              020D DEFINED AT LINE 83 IN MAIN.asm
                    > USED AT LINE 75 IN MAIN.asm
NEXTTOKEN:          0216 DEFINED AT LINE 104 IN MAIN.asm
                    > USED AT LINE 86 IN MAIN.asm
NEXTTOKEN1:         0219 DEFINED AT LINE 106 IN MAIN.asm
                    > USED AT LINE 109 IN MAIN.asm
                    > USED AT LINE 111 IN MAIN.asm
NEXTTOKEN2:         022A DEFINED AT LINE 116 IN MAIN.asm
                    > USED AT LINE 113 IN MAIN.asm
NEXTTOKEN2X:        0231 DEFINED AT LINE 121 IN MAIN.asm
                    > USED AT LINE 118 IN MAIN.asm
NEXTTOKEN3:         0236 DEFINED AT LINE 124 IN MAIN.asm
                    > USED AT LINE 127 IN MAIN.asm
NEXTTOKEN4:         0240 DEFINED AT LINE 130 IN MAIN.asm
                    > USED AT LINE 123 IN MAIN.asm
NEXTTOKEN5:         0249 DEFINED AT LINE 135 IN MAIN.asm
                    > USED AT LINE 132 IN MAIN.asm
NEXTTOKEN6:         0256 DEFINED AT LINE 142 IN MAIN.asm
                    > USED AT LINE 139 IN MAIN.asm
NEXTTOKEN7X:        025C DEFINED AT LINE 146 IN MAIN.asm
                    > USED AT LINE 134 IN MAIN.asm
NEXTTOKEN7:         0266 DEFINED AT LINE 152 IN MAIN.asm
                    > USED AT LINE 148 IN MAIN.asm
NEXTTOKEN8:         0277 DEFINED AT LINE 160 IN MAIN.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 157 IN MAIN.asm
NEXTTOKEN9:         0286 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 165 IN MAIN.asm
NEXTTOKEN10:        028C DEFINED AT LINE 172 IN MAIN.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 167 IN MAIN.asm
IDENT:              0292 DEFINED AT LINE 182 IN MAIN.asm
                    > USED AT LINE 136 IN MAIN.asm
IDENT1:             0296 DEFINED AT LINE 185 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
DIRECTIVE:          02B2 DEFINED AT LINE 201 IN MAIN.asm
                    > USED AT LINE 149 IN MAIN.asm
ISALPHANUM:         02B6 DEFINED AT LINE 277 IN MAIN.asm
                    > USED AT LINE 133 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
ISALPHA:            02BA DEFINED AT LINE 294 IN MAIN.asm
ISALPHA0:           02BC DEFINED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 320 IN MAIN.asm
ISALPHA1:           02C2 DEFINED AT LINE 300 IN MAIN.asm
                    > USED AT LINE 298 IN MAIN.asm
ISHEXDIGIT:         02C8 DEFINED AT LINE 318 IN MAIN.asm
                    > USED AT LINE 156 IN MAIN.asm
ISDIGIT:            02CE DEFINED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 166 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
NUMBER:             02D5 DEFINED AT LINE 353 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
NUM1:               02DC DEFINED AT LINE 358 IN MAIN.asm
                    > USED AT LINE 356 IN MAIN.asm
NUM2:               02EB DEFINED AT LINE 365 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
NUM3:               02F1 DEFINED AT LINE 368 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
HEX:                02FE DEFINED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 161 IN MAIN.asm
                    > USED AT LINE 363 IN MAIN.asm
HEX1:               0301 DEFINED AT LINE 389 IN MAIN.asm
                    > USED AT LINE 416 IN MAIN.asm
HEX2:               0311 DEFINED AT LINE 398 IN MAIN.asm
                    > USED AT LINE 396 IN MAIN.asm
UPPER:              0318 DEFINED AT LINE 403 IN MAIN.asm
                    > USED AT LINE 402 IN MAIN.asm
VALID:              031A DEFINED AT LINE 405 IN MAIN.asm
                    > USED AT LINE 394 IN MAIN.asm
DECIMAL:            0329 DEFINED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 367 IN MAIN.asm
DECIMAL1:           032C DEFINED AT LINE 432 IN MAIN.asm
                    > USED AT LINE 449 IN MAIN.asm
SEARCHSTRINGS:      0344 DEFINED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
COMPARECHARS:       034C DEFINED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 479 IN MAIN.asm
NEXTSTRING:         0356 DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 476 IN MAIN.asm
NEXTCHAR:           0368 DEFINED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 107 IN MAIN.asm
                    > USED AT LINE 125 IN MAIN.asm
                    > USED AT LINE 137 IN MAIN.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 188 IN MAIN.asm
                    > USED AT LINE 360 IN MAIN.asm
                    > USED AT LINE 390 IN MAIN.asm
                    > USED AT LINE 433 IN MAIN.asm
PUSHBACKCHAR:       0376 DEFINED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 143 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
PROMPT:             037C DEFINED AT LINE 540 IN MAIN.asm
CRLF:               0385 DEFINED AT LINE 545 IN MAIN.asm
ERROR:              038C DEFINED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 77 IN MAIN.asm
PRINTSTR:           0391 DEFINED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 42 IN MAIN.asm
                    > USED AT LINE 65 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 546 IN MAIN.asm
PUTSTR0:            0397 DEFINED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
PUTSTR:             039B DEFINED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 557 IN MAIN.asm
OPCODES:            03A0 DEFINED AT LINE 1 IN data.asm
ADC_:               03A0 DEFINED AT LINE 3 IN data.asm
ADD_:               03A4 DEFINED AT LINE 4 IN data.asm
AND_:               03A8 DEFINED AT LINE 5 IN data.asm
BIT_:               03AC DEFINED AT LINE 6 IN data.asm
CALL_:              03B0 DEFINED AT LINE 7 IN data.asm
CCF_:               03B5 DEFINED AT LINE 8 IN data.asm
CP_:                03B9 DEFINED AT LINE 9 IN data.asm
CPD_:               03BC DEFINED AT LINE 10 IN data.asm
CPDR_:              03C0 DEFINED AT LINE 11 IN data.asm
CPI_:               03C5 DEFINED AT LINE 12 IN data.asm
CPIR_:              03C9 DEFINED AT LINE 13 IN data.asm
CPL_:               03CE DEFINED AT LINE 14 IN data.asm
DAA_:               03D2 DEFINED AT LINE 15 IN data.asm
DEC_:               03D6 DEFINED AT LINE 16 IN data.asm
DI_:                03DA DEFINED AT LINE 17 IN data.asm
DJNZ_:              03DD DEFINED AT LINE 18 IN data.asm
EI_:                03E2 DEFINED AT LINE 19 IN data.asm
EX_:                03E5 DEFINED AT LINE 20 IN data.asm
EXX_:               03E8 DEFINED AT LINE 21 IN data.asm
HALT_:              03EC DEFINED AT LINE 22 IN data.asm
IM_:                03F1 DEFINED AT LINE 23 IN data.asm
IN_:                03F4 DEFINED AT LINE 24 IN data.asm
INC_:               03F7 DEFINED AT LINE 25 IN data.asm
IND_:               03FB DEFINED AT LINE 26 IN data.asm
INDR_:              03FF DEFINED AT LINE 27 IN data.asm
INI_:               0404 DEFINED AT LINE 28 IN data.asm
INIR_:              0408 DEFINED AT LINE 29 IN data.asm
JP_:                040D DEFINED AT LINE 30 IN data.asm
JR_:                0410 DEFINED AT LINE 31 IN data.asm
LD_:                0413 DEFINED AT LINE 32 IN data.asm
LDD_:               0416 DEFINED AT LINE 33 IN data.asm
LDDR_:              041A DEFINED AT LINE 34 IN data.asm
LDI_:               041F DEFINED AT LINE 35 IN data.asm
LDIR_:              0423 DEFINED AT LINE 36 IN data.asm
NEG_:               0428 DEFINED AT LINE 37 IN data.asm
NOP_:               042C DEFINED AT LINE 38 IN data.asm
OR_:                0430 DEFINED AT LINE 39 IN data.asm
OTDR_:              0433 DEFINED AT LINE 40 IN data.asm
OTIR_:              0438 DEFINED AT LINE 41 IN data.asm
OUT_:               043D DEFINED AT LINE 42 IN data.asm
OUTD_:              0441 DEFINED AT LINE 43 IN data.asm
OUTI_:              0446 DEFINED AT LINE 44 IN data.asm
POP_:               044B DEFINED AT LINE 45 IN data.asm
PUSH_:              044F DEFINED AT LINE 46 IN data.asm
RES_:               0454 DEFINED AT LINE 47 IN data.asm
RET_:               0458 DEFINED AT LINE 48 IN data.asm
RETI_:              045C DEFINED AT LINE 49 IN data.asm
RETN_:              0461 DEFINED AT LINE 50 IN data.asm
RL_:                0466 DEFINED AT LINE 51 IN data.asm
RLA_:               0469 DEFINED AT LINE 52 IN data.asm
RLC_:               046D DEFINED AT LINE 53 IN data.asm
RLCA_:              0471 DEFINED AT LINE 54 IN data.asm
RLD_:               0476 DEFINED AT LINE 55 IN data.asm
RR_:                047A DEFINED AT LINE 56 IN data.asm
RRA_:               047D DEFINED AT LINE 57 IN data.asm
RRC_:               0481 DEFINED AT LINE 58 IN data.asm
RRCA_:              0485 DEFINED AT LINE 59 IN data.asm
RRD_:               048A DEFINED AT LINE 60 IN data.asm
RST_:               048E DEFINED AT LINE 61 IN data.asm
SBC_:               0492 DEFINED AT LINE 62 IN data.asm
SCF_:               0496 DEFINED AT LINE 63 IN data.asm
SET_:               049A DEFINED AT LINE 64 IN data.asm
SLA_:               049E DEFINED AT LINE 65 IN data.asm
SRA_:               04A2 DEFINED AT LINE 66 IN data.asm
SRL_:               04A6 DEFINED AT LINE 67 IN data.asm
SUB_:               04AA DEFINED AT LINE 68 IN data.asm
XOR_:               04AE DEFINED AT LINE 69 IN data.asm
RST08:              0800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 118 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
RST10:              0802 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 124 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
RST18:              0804 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 130 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
RST20:              0806 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 136 IN IOSerial.asm
                    > USED AT LINE 461 IN IOSerial.asm
RST28:              0808 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RST30:              080A DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 148 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
BAUD:               080C DEFINED AT LINE 9 IN ram.asm
INTVEC:             080E DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 154 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
NMIVEC:             0810 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 202 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
GETCVEC:            0812 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 468 IN IOSerial.asm
PUTCVEC:            0814 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
VTEMP1:             0816 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 359 IN MAIN.asm
                    > USED AT LINE 369 IN MAIN.asm
VTEMP2:             0818 DEFINED AT LINE 16 IN ram.asm
VPUSHBACK:          081A DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 48 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
                    > USED AT LINE 537 IN MAIN.asm
VTOKEN:             081B DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 49 IN MAIN.asm
                    > USED AT LINE 70 IN MAIN.asm
VTOKENVAL:          081C DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 56 IN MAIN.asm
VCHARPTR:           081E DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 51 IN MAIN.asm
VASMPTR:            0820 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 53 IN MAIN.asm
VSTRPTR:            0822 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 55 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
VSYMPTR:            0824 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 58 IN MAIN.asm
VEXPRPTR:           0826 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 60 IN MAIN.asm
CHARS:              0828 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 50 IN MAIN.asm
STACK:              0A28 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 456 IN IOSerial.asm
                    > USED AT LINE 40 IN MAIN.asm
STRINGS:            0A28 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 54 IN MAIN.asm
SYMBOLS:            0B28 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 57 IN MAIN.asm
EXPRS:              0C28 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 59 IN MAIN.asm
ASSEMBLY:           0D28 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 52 IN MAIN.asm
