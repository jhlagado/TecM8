0000                          .ENGINE   mycomputer   
0000                             ; 
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                NO_MATCH:   EQU   -1   
0000                CTRL_H:   EQU   8   
0000                BUFFER_SIZE:   EQU   80   
0000                TOKENS:      
0000                COMMA_:   EQU   ","   
0000                COMMENT_:   EQU   ";"   
0000                DIRECT_:   EQU   "D"   
0000                DOLLAR_:   EQU   "$"   
0000                EOF_:     EQU   "E"   
0000                FLAG_:    EQU   "F"   
0000                IDENT_:   EQU   "I"   
0000                LABEL_:   EQU   "L"   
0000                NEWLN_:   EQU   "\n"   
0000                NUM_:     EQU   "9"   
0000                OPCODE_:   EQU   "C"   
0000                PARCLOSE_:   EQU   ")"   
0000                PAROPEN_:   EQU   "("   
0000                REG_:     EQU   "R"   
0000                REGPAIR_:   EQU   "P"   
0000                UNKNOWN_:   EQU   "U"   
0000                OPCODE_IDX:      
0000                ADC_:     EQU   0   
0000                ADD_:     EQU   1   
0000                AND_:     EQU   2   
0000                BIT_:     EQU   3   
0000                CALL_:    EQU   4   
0000                CCF_:     EQU   5   
0000                CP_:      EQU   6   
0000                CPD_:     EQU   7   
0000                CPDR_:    EQU   8   
0000                CPI_:     EQU   9   
0000                CPIR_:    EQU   10   
0000                CPL_:     EQU   11   
0000                DAA_:     EQU   12   
0000                DEC_:     EQU   13   
0000                DI_:      EQU   14   
0000                DJNZ_:    EQU   15   
0000                EI_:      EQU   16   
0000                EX_:      EQU   17   
0000                EXX_:     EQU   18   
0000                HALT_:    EQU   19   
0000                IM_:      EQU   20   
0000                IN_:      EQU   21   
0000                INC_:     EQU   22   
0000                IND_:     EQU   23   
0000                INDR_:    EQU   24   
0000                INI_:     EQU   25   
0000                INIR_:    EQU   26   
0000                JP_:      EQU   27   
0000                JR_:      EQU   28   
0000                LD_:      EQU   29   
0000                LDD_:     EQU   30   
0000                LDDR_:    EQU   31   
0000                LDI_:     EQU   32   
0000                LDIR_:    EQU   33   
0000                NEG_:     EQU   34   
0000                NOP_:     EQU   35   
0000                OR_:      EQU   36   
0000                OTDR_:    EQU   37   
0000                OTIR_:    EQU   38   
0000                OUT_:     EQU   39   
0000                OUTD_:    EQU   40   
0000                OUTI_:    EQU   41   
0000                POP_:     EQU   42   
0000                PUSH_:    EQU   43   
0000                RES_:     EQU   44   
0000                RET_:     EQU   45   
0000                RETI_:    EQU   46   
0000                RETN_:    EQU   47   
0000                RL_:      EQU   48   
0000                RLA_:     EQU   49   
0000                RLC_:     EQU   50   
0000                RLCA_:    EQU   51   
0000                RLD_:     EQU   52   
0000                RR_:      EQU   53   
0000                RRA_:     EQU   54   
0000                RRC_:     EQU   55   
0000                RRCA_:    EQU   56   
0000                RRD_:     EQU   57   
0000                RST_:     EQU   58   
0000                SBC_:     EQU   59   
0000                SCF_:     EQU   60   
0000                SET_:     EQU   61   
0000                SLA_:     EQU   62   
0000                SRA_:     EQU   63   
0000                SRL_:     EQU   64   
0000                SUB_:     EQU   65   
0000                XOR_:     EQU   66   
0000                REG_IDX:      
0000                B_:       EQU   0   ; B
0000                C_:       EQU   1   ; C
0000                D_:       EQU   2   ; D
0000                E_:       EQU   3   ; E
0000                H_:       EQU   4   ; H
0000                L_:       EQU   5   ; L
0000                MHL_:     EQU   6   ; (HL)
0000                A_:       EQU   7   ; A
0000                I_:       EQU   8   ; I
0000                R_:       EQU   9   ; R
0000                REG_PAIR_IDX:      
0000                BC_:      EQU   0   
0000                DE_:      EQU   1   
0000                HL_:      EQU   2   
0000                SP_:      EQU   3   
0000                AF_:      EQU   4   ; NOTE: AF has the same code as SP in some instructions
0000                IX_:      EQU   5   
0000                IY_:      EQU   6   
0000                AFP_:     EQU   7   ; AF' (prime)
0000                FLAG_IDX:      
0000                NZ_:      EQU   0   
0000                Z_:       EQU   1   
0000                NC_:      EQU   2   
0000                C_:       EQU   3   
0000                PO_:      EQU   4   
0000                PE_:      EQU   5   
0000                P_:       EQU   6   
0000                M_:       EQU   7   
0000                DIRECTIVE_IDX:      
0000                ALIGN_:   EQU   0   
0000                DB_:      EQU   1   
0000                ORG_:     EQU   2   
0000                SET_:     EQU   3   
0000                             ; -----------------------------------------------------------------------------------------------
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                             ; *************************************************************************
0000                             ; 
0000                             ;       Serial routines 
0000                             ; 
0000                             ;       written by Craig Jones 
0000                             ; 
0000                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
0000                             ; 
0000                             ;       see the LICENSE file in this repo for more information 
0000                             ; 
0000                             ; *****************************************************************************
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 50 09               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 52 09               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 54 09               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 56 09               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 58 09               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 5A 09               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 5E 09               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 60 09               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 62 09               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 64 09               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 50 09               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 50 09               LD   (RST08),HL   
0094   22 52 09               LD   (RST10),HL   
0097   22 54 09               LD   (RST18),HL   
009A   22 56 09               LD   (RST20),HL   
009D   22 58 09               LD   (RST28),HL   
00A0   22 5A 09               LD   (RST30),HL   
00A3   22 5E 09               LD   (INTVEC),HL   
00A6   22 60 09               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 62 09               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 64 09               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 80 01               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       TecM8 1.0 Assembler for the Tec-1
00C6                             ; 
00C6                             ;       by John Hardy
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put TecM8 code from here	
0180                START:       ; entry point of TecM8
0180   31 50 09               LD   sp,STACK   
0183   CD 98 01               CALL   init   
0186   CD FE 03               CALL   print   
0189   0B 54 65 63 4D 38 20 30 2E 30 0D 0A .PSTR   "TecM8 0.0\r\n"   
0195   C3 BE 01               JP   parse   
0198                INIT:        
0198   AF                     XOR   a   
0199   32 6A 09               LD   (vChar),a   ; nothing in push back buffer
019C   32 6B 09               LD   (vToken),a   ; NUL_ token
019F   32 6E 09               LD   (vBufferPos),a   ; 0th buffer pos
01A2   21 78 0C               LD   hl,assembly   
01A5   22 70 09               LD   (vAsmPtr),hl   
01A8   21 78 09               LD   hl,strings   
01AB   22 72 09               LD   (vStrPtr),hl   
01AE   22 6C 09               LD   (vTokenVal),hl   
01B1   21 78 0A               LD   hl,symbols   
01B4   22 74 09               LD   (vSymPtr),hl   
01B7   21 78 0B               LD   hl,exprs   
01BA   22 76 09               LD   (vExprPtr),hl   
01BD   C9                     RET      
01BE                PARSE:       
01BE   CD E5 01               CALL   statementList   
01C1   CD FE 03               CALL   print   
01C4   1F 50 61 72 73 69 6E 67 20 63 6F 6D 70 6C 65 74 65 64 20 73 75 63 63 65 73 73 66 75 6C 6C 79 2E .PSTR   "Parsing completed successfully."   ; 
01E4   76                     HALT      
01E5                STATEMENTLIST:      
01E5   CD 08 02               CALL   nextToken   
01E8   FE 45                  CP   EOF_   
01EA   C8                     RET   z   
01EB   CD F0 01               CALL   statement   
01EE   18 F5                  JR   statementList   
01F0                STATEMENT:      
01F0   FE 4C                  CP   LABEL_   
01F2   20 00                  JR   nz,statement10   
01F4                             ; call addLabel                     ; add label to symbol table
01F4                STATEMENT10:      
01F4   CD 08 02               CALL   nextToken   
01F7   FE 43                  CP   OPCODE_   
01F9   20 00                  JR   nz,statement1   
01FB                             ; jp parseInstruction
01FB                STATEMENT1:      
01FB   FE 44                  CP   DIRECT_   
01FD   C0                     RET   nz   
01FE                             ; jp parseDirective
01FE   C9                     RET      
01FF                MATCH:       
01FF   C0                     RET   nz   
0200   F5                     PUSH   af   
0201   CD 08 02               CALL   nextToken   
0204   6F                     LD   l,a   
0205   F1                     POP   af   
0206   7D                     LD   a,l   
0207   C9                     RET      
0208                             ; nextToken is a lexer function that reads characters from the input and classifies
0208                             ; them into different token types. It handles whitespace, end of input, newlines,
0208                             ; comments, identifiers, labels, directives, hexadecimal numbers, and other symbols.
0208                             ; Input: None
0208                             ; Output:
0208                             ; a: contains the type of the next token.
0208                             ; hl: contains the value associated with the next token.
0208                             ; Destroyed: None
0208                NEXTTOKEN:      
0208   CB 77                  BIT   7,(vToken)   ; Check the high bit of the pushback buffer
020A   CA 19 02               JP   z,nextToken0   
020D   3A 6B 09               LD   a,(vToken)   ; If the high bit is 1, load the pushed back character into A
0210   2A 6C 09               LD   hl,(vTokenVal)   
0213   CB BF                  RES   7,a   ; Clear the high bit
0215   32 6B 09               LD   (vToken),a   ; Store the character back in the buffer
0218   C9                     RET      ; Return with the pushed back character in A
0219                NEXTTOKEN0:      
0219   21 00 00               LD   hl,0   
021C                NEXTTOKEN1:      
021C   CD B9 03               CALL   nextChar   ; Get the next character
021F   CD F3 02               CALL   isSpace   ; Is it a space?
0222   28 F8                  JR   z,nextToken1   ; If yes, skip it and get the next character
0224   B7                     OR   a   ; Is it null (end of input)?
0225   20 03                  JR   nz,nextToken2   ; If not, continue to the next check
0227   3E 45                  LD   a,EOF_   ; If yes, return with EOF token
0229   C9                     RET      
022A                NEXTTOKEN2:      
022A   FE 0A                  CP   "\n"   ; Is it a newline?
022C   20 01                  JR   nz,nextToken3   ; If not, continue to the next check
022E   C8                     RET   z   ; token same value as char in a
022F                NEXTTOKEN3:      
022F   FE 3B                  CP   ";"   ; Is it a comment?
0231   C4 3E 02               CALL   nz,nextToken5   ; If not, continue to the next check
0234                NEXTTOKEN4:      
0234   CD B9 03               CALL   nextChar   ; Get the next character in the comment
0237   FE 21                  CP   " "+1   ; Loop until the next control character
0239   30 F9                  JR   nc,nextToken4   
023B   3E 3B                  LD   a,COMMENT_   ; Return with COMMENT token
023D   C9                     RET      
023E                NEXTTOKEN5:      
023E   FE 5F                  CP   "_"   ; Is it an identifier?
0240   28 05                  JR   z,nextToken6   ; If yes, continue to the next check
0242   CD F9 02               CALL   isAlphaNum   ; If not, check if it's alphanumeric
0245   30 4D                  JR   nc,nextToken13   ; If not, continue to the next check
0247                NEXTTOKEN6:      
0247   CD CE 02               CALL   ident   ; Parse the identifier
024A   CD B9 03               CALL   nextChar   ; Get the next character
024D   FE 3A                  CP   ":"   ; Is it a label?
024F   20 03                  JR   nz,nextToken7   ; If not, continue to the next check
0251   3E 4C                  LD   a,LABEL_   ; If yes, return with LABEL token
0253   C9                     RET      
0254                NEXTTOKEN7:      
0254   CD E1 03               CALL   rewindChar   ; Push back the character
0257   22 72 09               LD   (vStrPtr),hl   ; restore string heap ptr to prev location
025A   11 10 04               LD   de,opcodes   ; list of opcodes to search
025D   CD 8F 03               CALL   searchStr   
0260   30 03                  JR   nc,nextToken8   
0262   3E 43                  LD   a,OPCODE_   ; Return with IDENT token
0264   C9                     RET      
0265                NEXTTOKEN8:      
0265   11 38 05               LD   de,reg_pairs   ; list of register pairs to search
0268   CD 8F 03               CALL   searchStr   
026B   30 03                  JR   nc,nextToken9   
026D   3E 50                  LD   a,REGPAIR_   ; Return with REGPAIR token
026F   C9                     RET      
0270                NEXTTOKEN9:      
0270   11 23 05               LD   de,registers   ; list of registers to search
0273   CD 8F 03               CALL   searchStr   
0276   30 03                  JR   nc,nextToken10   
0278   3E 52                  LD   a,REG_   ; Return with REG token
027A   C9                     RET      
027B                NEXTTOKEN10:      
027B   11 52 05               LD   de,flags   ; list of registers to search
027E   CD 8F 03               CALL   searchStr   
0281   30 F8                  JR   nc,nextToken10   
0283   3E 46                  LD   a,FLAG_   ; Return with FLAG token
0285   C9                     RET      
0286                NEXTTOKEN11:      
0286   11 52 05               LD   de,flags   ; list of registers to search
0289   CD 8F 03               CALL   searchStr   
028C   30 03                  JR   nc,nextToken12   
028E   3E 44                  LD   a,DIRECT_   ; Return with DIRECT token
0290   C9                     RET      
0291                NEXTTOKEN12:      
0291   3E 49                  LD   a,IDENT_   ; Return with IDENT token
0293   C9                     RET      
0294                NEXTTOKEN13:      
0294   21 00 00               LD   hl,0   
0297   FE 24                  CP   "$"   ; Is it a hexadecimal number?
0299   20 0F                  JR   nz,nextToken14   ; If not, continue to the next check
029B   CD B9 03               CALL   nextChar   ; Get the next character
029E   CD F3 02               CALL   isSpace   ; Check if it's the assembly pointer
02A1   CD E1 03               CALL   rewindChar   ; Push back the character (flags unaffected)
02A4   C8                     RET   z   ; token same value as char in a
02A5   CD 11 03               CALL   number0   ; process hexasdecimal number
02A8   18 0C                  JR   nextToken16   
02AA                NEXTTOKEN14:      
02AA   FE 2D                  CP   "-"   ; Is it a negative number?
02AC   28 05                  JR   z,nextToken15   ; If yes, continue to the next check
02AE   CD 0A 03               CALL   isDigit   ; Check if it's a digit
02B1   30 06                  JR   nc,nextToken17   ; Jump to the next check
02B3                NEXTTOKEN15:      
02B3   CD 1A 03               CALL   number   ; Parse the number
02B6                NEXTTOKEN16:      
02B6   3E 39                  LD   a,NUM_   ; Return with NUM token
02B8   C9                     RET      
02B9                NEXTTOKEN17:      
02B9   FE 28                  CP   "("   
02BB   C8                     RET   z   ; token same value as char in a
02BC   FE 29                  CP   ")"   
02BE   C8                     RET   z   ; token same value as char in a
02BF   FE 2C                  CP   ","   
02C1   C8                     RET   z   ; token same value as char in a
02C2   3E 55                  LD   a,UNKNOWN_   ; Return with UNKNOWN token
02C4   C9                     RET      
02C5                PUSHBACKTOKEN:      
02C5   CB FF                  SET   7,a   ; Set the high bit of the character with affecting flags
02C7   32 6A 09               LD   (vChar),a   ; Store the character in the pushback buffer
02CA   22 6C 09               LD   (vTokenVal),hl   
02CD   C9                     RET      
02CE                             ; ident
02CE                             ; 
02CE                             ; Reads characters from the input stream and stores them in a string on the heap
02CE                             ; until a non-alphanumeric character is encountered. The string is stored in
02CE                             ; Pascal string format, with the length of the string stored in the first byte.
02CE                             ; 
02CE                             ; Input:
02CE                             ;   a: The first character of the identifier.
02CE                             ;   (vStrPtr): Points to the top of the strings heap.
02CE                             ; 
02CE                             ; Output:
02CE                             ;   hl: Points to the start of the stored string in memory.
02CE                             ;   a: Contains the length of the string.
02CE                             ;   (vStrPtr): Updated to point to the top of the strings heap after the stored string.
02CE                             ; 
02CE                             ; Destroyed:
02CE                             ;   c, de
02CE                IDENT:       
02CE   2A 72 09               LD   hl,(vStrPtr)   ; de = hl = top of strings heap
02D1   54 5D                  LD   de,hl   
02D3   23                     INC   hl   ; skip length byte
02D4                IDENT1:      
02D4   77                     LD   (hl),a   ; write char
02D5   23                     INC   hl   
02D6   CD B9 03               CALL   nextChar   
02D9   FE 5F                  CP   "_"   
02DB   28 05                  JR   z,ident2   
02DD   CD F9 02               CALL   isAlphanum   
02E0   30 04                  JR   nc,ident3   
02E2                IDENT2:      
02E2   77                     LD   (hl),a   
02E3   23                     INC   hl   
02E4   18 EE                  JR   ident1   
02E6                IDENT3:      
02E6   CD E1 03               CALL   rewindChar   
02E9   22 72 09               LD   (vStrPtr),hl   ; update top of strings heap
02EC   B7                     OR   a   
02ED   ED 52                  SBC   hl,de   ; hl = length, de = string
02EF   EB                     EX   de,hl   ; e = len, hl = string
02F0   73                     LD   (hl),e   ; save lsb(length)
02F1   7B                     LD   a,e   ; a = length
02F2   C9                     RET      
02F3                             ; isSpace
02F3                             ; checks if the character in the a register is space or tab
02F3                             ; Input:
02F3                             ;   a: Contains the character to be checked.
02F3                             ; Output:
02F3                             ;   a: Contains the character to be checked.
02F3                             ;   cf: Set if the input character was alphabetic, cleared otherwise.
02F3                             ; Destroyed:
02F3                             ;   none
02F3                ISSPACE:      
02F3   FE 20                  CP   " "   ; is char lowercase?
02F5   C8                     RET   z   
02F6   FE 09                  CP   "\t"   ; is char > last letter?
02F8   C9                     RET      
02F9                             ; isAlphaNum
02F9                             ; checks if the character in the a register is an alphanumeric character
02F9                             ; (either uppercase or lowercase).
02F9                             ; If the character is alphabetic, it converts it to uppercase and sets the carry flag.
02F9                             ; If the character is not alphabetic, it clears the carry flag.
02F9                             ; Input:
02F9                             ; a: Contains the character to be checked.
02F9                             ; Output:
02F9                             ; a: Contains the uppercase version of the input character if it was alphabetic.
02F9                             ; cf: Set if the input character was alphabetic, cleared otherwise.
02F9                             ; Destroyed: c
02F9                ISALPHANUM:      
02F9   CD 0A 03               CALL   isDigit   
02FC   C8                     RET   z   ; falls thru to isAlpha
02FD                             ; isAlpha
02FD                             ; checks if the character in the a register is an alphabetic character
02FD                             ; (either uppercase or lowercase).
02FD                             ; If the character is alphabetic, it converts it to uppercase and sets the carry flag.
02FD                             ; Input:
02FD                             ;   a: Contains the character to be checked.
02FD                             ; Output:
02FD                             ;   a: Contains the uppercase version of the input character if it was alphabetic.
02FD                             ;   cf: Set if the input character was alphabetic, cleared otherwise.
02FD                             ; Destroyed:
02FD                             ;   none
02FD                ISALPHA:      
02FD   FE 61                  CP   "a"   ; is char lowercase?
02FF   38 02                  JR   c,isAlpha1   
0301   D6 20                  SUB   $20   ; yes, convert a to uppercase
0303                ISALPHA1:      
0303   FE 5B                  CP   "Z"+1   ; is char > last letter?
0305   D0                     RET   nc   ; yes, exit with cf cleared
0306   FE 41                  CP   "A"   ; is char an uppercase letter ?
0308   3F                     CCF      ; invert cf
0309   C9                     RET      
030A                             ; isDigit
030A                             ; checks if the character in the a register is a decimal
030A                             ; digit (0-9). If the character is a decimal digit, it sets the carry flag.
030A                             ; Input:
030A                             ;   a: Contains the character to be checked.
030A                             ; Output:
030A                             ;   cf: Set if the input character was a digit, cleared otherwise.
030A                             ; Destroyed:
030A                             ;   none
030A                ISDIGIT:      
030A   FE 3A                  CP   "9"+1   ; is char > "9"?
030C   D0                     RET   nc   ; yes, exit with cf cleared
030D   FE 30                  CP   "0"   ; is char a decimal digit ?
030F   3F                     CCF      ; invert cf
0310   C9                     RET      
0311                             ; number
0311                             ; parse a number from the input. It handles both decimal and hexadecimal
0311                             ; numbers, and also supports negative numbers.
0311                             ; Input:
0311                             ;   none
0311                             ; Output:
0311                             ;   hl: Contains the parsed number.
0311                             ; Destroyed:
0311                             ;   none
0311                             ; vTemp1: A temporary memory location used to store the sign of the number.
0311                NUMBER0:      
0311   AF                     XOR   a   
0312   32 66 09               LD   (vTemp1),a   ; Store the sign flag in vTemp1
0315   CD 46 03               CALL   hex   ; If yes, parse the hexadecimal number
0318   18 1C                  JR   number3   
031A                NUMBER:      
031A   FE 2D                  CP   "-"   ; Is it a negative number?
031C   3E FF                  LD   a,-1   ; a = sign flag
031E   28 01                  JR   z,number1   
0320   3C                     INC   a   
0321                NUMBER1:      
0321   32 66 09               LD   (vTemp1),a   ; Store the sign flag in vTemp1
0324   CD B9 03               CALL   nextChar   ; Get the next character
0327   FE 24                  CP   "$"   ; Is it a hexadecimal number?
0329   20 05                  JR   nz,number2   
032B   CD 46 03               CALL   hex   ; If yes, parse the hexadecimal number
032E   18 06                  JR   number3   
0330                NUMBER2:      
0330   CD E1 03               CALL   rewindChar   ; Push back the character
0333   CD 71 03               CALL   decimal   ; Parse the decimal number
0336                NUMBER3:      
0336   3A 66 09               LD   a,(vTemp1)   ; Load the sign from vTemp1
0339   3C                     INC   a   ; Increment a
033A   C0                     RET   nz   
033B   EB                     EX   de,hl   ; negate the value of HL
033C   21 00 00               LD   hl,0   
033F   B7                     OR   a   
0340   ED 52                  SBC   hl,de   
0342   CD E1 03               CALL   rewindChar   ; Push back the character
0345   C9                     RET      
0346                             ; hex
0346                             ; parses a hexadecimal number
0346                             ; Input: none
0346                             ; Output:
0346                             ; hl: parsed number
0346                             ; Destroyed: a
0346                HEX:         
0346   21 00 00               LD   hl,0   ; Initialize HL to 0 to hold the result
0349                HEX1:        
0349   CD B9 03               CALL   nextChar   
034C   FE 30                  CP   "0"   ; Compare with ASCII "0"
034E   D8                     RET   c   ; If less, exit
034F   FE 3A                  CP   "9"+1   ; Compare with ASCII "9"
0351   38 0F                  JR   c,valid   ; If less or equal, jump to valid
0353   FE 61                  CP   "a"   ; is char lowercase letter?
0355   38 02                  JR   c,hex2   
0357   D6 20                  SUB   $20   ; yes, convert a to uppercase
0359                HEX2:        
0359   FE 41                  CP   "A"   ; Compare with ASCII "A"
035B   D8                     RET   c   ; If less, exit invalid
035C   FE 47                  CP   "F"+1   ; Compare with ASCII "F"
035E   38 00                  JR   c,upper   ; If less or equal, jump to upper
0360                UPPER:       
0360   D6 37                  SUB   $37   ; Convert from ASCII to hex
0362                VALID:       
0362   D6 30                  SUB   "0"   ; Convert from ASCII to numeric value
0364   D8                     RET   c   ; < 0 not a valid hexadecimal digit so return
0365   FE 10                  CP   $10   ; Compare the result with $10
0367   D0                     RET   nc   ; > $10 not a valid hexadecimal digit so return
0368   29                     ADD   hl,hl   ; Multiply the number in HL by 16 by shifting it left 4 times
0369   29                     ADD   hl,hl   ; This is done because each hexadecimal digit represents 16^n where n is the position of the digit from the right
036A   29                     ADD   hl,hl   
036B   29                     ADD   hl,hl   
036C   85                     ADD   a,l   ; Add the new digit to the number in HL
036D   6F                     LD   l,a   ; Store the result back in L
036E   C3 49 03               JP   hex1   ; Jump back to hex1 to process the next character
0371                             ; decimal
0371                             ; parses a decimal number
0371                             ; Input: none
0371                             ; Output:
0371                             ; hl: parsed number.
0371                             ; Destroyed registers:
0371                             ; A: Used for temporary storage and calculations.
0371                             ; DE: Used for temporary storage and calculations.
0371                DECIMAL:      
0371   21 00 00               LD   hl,0   ; Initialize HL to 0 to hold the result
0374                DECIMAL1:      
0374   CD B9 03               CALL   nextChar   
0377   D6 30                  SUB   "0"   ; convert from ASCII to binary
0379   D8                     RET   c   ; < 0 not a digit; return
037A   FE 0A                  CP   10   ; Compare the result with 10
037C   D0                     RET   nc   ; > 10 not a digit; return
037D   03                     INC   bc   ; Increment BC to point to the next digit
037E   54 5D                  LD   de,hl   ; Copy HL to DE
0380   29                     ADD   hl,hl   ; Multiply HL by 2
0381   29                     ADD   hl,hl   ; Multiply HL by 4
0382   19                     ADD   hl,de   ; Add DE to HL to multiply HL by 5
0383   29                     ADD   hl,hl   ; Multiply HL by 10
0384   85                     ADD   a,l   ; hl += a
0385   6F                     LD   l,a   
0386   3E 00                  LD   a,0   
0388   8C                     ADC   a,h   
0389   67                     LD   h,a   
038A   18 E8                  JR   decimal1   ; Jump back to the start of the loop
038C                             ; searchStr
038C                             ; search through a list of Pascal strings for a match.
038C                             ; Inputs:
038C                             ;   hl: Points to the string to search for.
038C                             ;   de: Points to the start of the list of strings.
038C                             ; Outputs:
038C                             ;   cf: true if match
038C                             ;   a: index of the matching string if a match is found,
038C                             ;      or -1 if no match is found.
038C                             ;   hl: Points to the string to search for.
038C                             ; Destroyed:
038C                             ;   a, b, c, d, e, a", f"
038C   EB                     EX   de,hl   ; de = search string hl = string list
038D   AF                     XOR   a   ; Initialize the index counter, zf = true, cf = false
038E   08                     EX   af,af'   
038F                SEARCHSTR:      
038F   1A                     LD   a,(de)   ; Load the length of search string
0390   47                     LD   b,a   ; Copy the length to b for looping
0391   D5                     PUSH   de   ; Store search string
0392   E5                     PUSH   hl   ; Store current string
0393   BE                     CP   (hl)   ; Compare with the length of the current string
0394   20 0F                  JR   nz,searchStr2   ; If the lengths are not equal, move to the next string
0396   13                     INC   de   ; Move to the start of the search string
0397   23                     INC   hl   ; Move to the start of the current string
0398                SEARCHSTR1:      
0398   1A                     LD   a,(de)   ; Load the next character from search string
0399   BE                     CP   (hl)   ; Compare with the next character in the current string
039A   20 09                  JR   nz,searchStr2   ; If the characters are not equal, move to the next string
039C   13                     INC   de   ; Move to the next character in the search string
039D   23                     INC   hl   ; Move to the next character in the current string
039E   10 F8                  DJNZ   searchStr1   ; Loop until we've compared all characters
03A0   E1                     POP   hl   ; discard current string
03A1   E1                     POP   hl   ; hl = search string
03A2   08                     EX   af,af'   ; Load the index of the match
03A3   3F                     CCF      ; if match, cf = true
03A4   C9                     RET      
03A5                SEARCHSTR2:      
03A5   E1                     POP   hl   ; Restore current string
03A6   D1                     POP   de   ; Restore search string
03A7   7E                     LD   a,(hl)   ; Load the length of the current string
03A8   3C                     INC   a   ; a = length byte plus length of string
03A9   4F                     LD   c,a   ; bc = a
03AA   06 00                  LD   b,0   
03AC   09                     ADD   hl,bc   ; hl += bc, the next string
03AD   D5                     PUSH   de   ; Store search string
03AE   E5                     PUSH   hl   ; Store current string
03AF   08                     EX   af,af'   ; Increment the index counter, zf = false, cf = false
03B0   3C                     INC   a   
03B1   08                     EX   af,af'   
03B2   7E                     LD   a,(hl)   ; a = length of next string
03B3   B7                     OR   a   ; If a != 0, continue searching
03B4   20 D9                  JR   nz,searchStr   
03B6   3D                     DEC   a   ; a = NO_MATCH (i.e. -1), zf = false
03B7   3F                     CCF      ; cf = false
03B8   C9                     RET      
03B9                             ; *****************************************************************************
03B9                             ; Routine: nextChar
03B9                             ; 
03B9                             ; Purpose:
03B9                             ;    Fetches the next character from the buffer. If the buffer is empty or
03B9                             ;    contains a null character (0), it refills the buffer by calling nextLine.
03B9                             ; 
03B9                             ; Inputs:
03B9                             ;    None
03B9                             ; 
03B9                             ; Outputs:
03B9                             ;    A - The next character from the buffer
03B9                             ; 
03B9                             ; Registers Destroyed:
03B9                             ;    A, D, E, HL
03B9                             ; *****************************************************************************
03B9                NEXTCHAR:      
03B9   21 6E 09               LD   hl,vBufferPos   ; Load the offset of buffer position variable
03BC   7E                     LD   a,(hl)   ; Load the current position offset in the buffer into A
03BD   FE 50                  CP   BUFFER_SIZE   ; Compare with buffer size
03BF   CA CB 03               JP   z,nextLine   ; Jump to nextLine if end of buffer
03C2   5F                     LD   e,a   ; Copy buffer position offset to E
03C3   16 08                  LD   d,msb(buffer)   ; Load the MSB of the buffer's address into D
03C5   1A                     LD   a,(de)   ; Load the character at the current buffer position into A
03C6   B7                     OR   a   ; Check if the character is 0 (end of line)
03C7   28 02                  JR   z,nextLine   ; Jump to nextLine if character is 0
03C9   34                     INC   (hl)   ; Increment the buffer position offset
03CA   C9                     RET      ; Return with the character in A
03CB                             ; *****************************************************************************
03CB                             ; Routine: nextLine
03CB                             ; 
03CB                             ; Purpose:
03CB                             ;    Refills the buffer by repeatedly calling getchar to fetch new characters
03CB                             ;    and stores them in the buffer. Stops when the buffer is full or a
03CB                             ;    non-printable character is encountered.
03CB                             ; 
03CB                             ; Inputs:
03CB                             ;    None
03CB                             ; 
03CB                             ; Outputs:
03CB                             ;    A - The first character in the refilled buffer
03CB                             ; 
03CB                             ; Registers Destroyed:
03CB                             ;    A, B, HL
03CB                             ; *****************************************************************************
03CB                NEXTLINE:      
03CB   21 00 08               LD   hl,buffer   ; Start of the buffer
03CE   06 50                  LD   b,BUFFER_SIZE   ; Number of bytes to fill
03D0                NEXTLINE1:      
03D0   CD 81 00               CALL   getchar   ; Get a character from getchar
03D3   77                     LD   (hl),a   ; Store it in the buffer
03D4   23                     INC   hl   ; Move to the next position in the buffer
03D5   FE 20                  CP   " "   ; Check if the character is a space
03D7   38 02                  JR   c,nextLine2   ; If less than space (non-printable), skip djnz
03D9   10 F5                  DJNZ   nextLine1   ; Repeat until B decrements to 0
03DB                NEXTLINE2:      
03DB   AF                     XOR   a   ; Clear A register
03DC   32 6E 09               LD   (vBufferPos),a   ; Reset buffer position to 0
03DF   18 D8                  JR   nextChar   ; Jump back to nextChar to return the first char
03E1                             ; *****************************************************************************
03E1                             ; Routine: rewindChar
03E1                             ; 
03E1                             ; Purpose:
03E1                             ;    Rewinds the buffer position by one character, effectively pushing back the
03E1                             ;    buffer position by one character in the input stream.
03E1                             ; 
03E1                             ; Inputs:
03E1                             ;    None
03E1                             ; 
03E1                             ; Outputs:
03E1                             ;    None
03E1                             ; 
03E1                             ; Registers Destroyed:
03E1                             ;    A
03E1                             ; *****************************************************************************
03E1                REWINDCHAR:      
03E1   21 6E 09               LD   hl,vBufferPos   ; Load the address of buffer position variable
03E4   7E                     LD   a,(hl)   ; Load the current position in the buffer into A
03E5   B7                     OR   a   ; Check if the buffer position is zero
03E6   C8                     RET   z   ; If zero, nothing to push back, return
03E7   35                     DEC   (hl)   ; Decrement the buffer position
03E8   C9                     RET      ; Return
03E9                PROMPT:      
03E9   CD FE 03               CALL   print   
03EC   04 0D 0A 3E 20         .PSTR   "\r\n> "   
03F1   C9                     RET      
03F2                CRLF:        
03F2   CD FE 03               CALL   print   
03F5   02 0D 0A               .PSTR   "\r\n"   
03F8   C9                     RET      
03F9                ERROR:       
03F9   E1                     POP   hl   
03FA   CD 03 04               CALL   printStr   
03FD   76                     HALT      
03FE                PRINT:       
03FE   E1                     POP   hl   ; "return" address is address of string			
03FF   CD 03 04               CALL   printStr   
0402   E9                     JP   (hl)   ; put it back	
0403                             ; print
0403                             ; 
0403                             ; Prints a Pascal string to the console.
0403                             ; 
0403                             ; Input:
0403                             ;   hl: Points to the start of the Pascal string in memory. The first byte at this location should be the length of the string, followed by the string data.
0403                             ; 
0403                             ; Output:
0403                             ;   hl: points to the byte after the end of the string .
0403                             ; 
0403                             ; Destroyed:
0403                             ;   a, b
0403                PRINTSTR:      
0403   7E                     LD   a,(hl)   ; Load the length of the string
0404   B7                     OR   a   ; Check if A is zero
0405   C8                     RET   z   ; If it is, return immediately
0406   23                     INC   hl   ; Move to the start of the string data
0407   47                     LD   b,a   ; Copy the length to B for looping
0408                PRINTSTR1:      
0408   7E                     LD   a,(hl)   ; Load the next character
0409   CD 85 00               CALL   putchar   ; Call a routine that prints a single character
040C   23                     INC   hl   ; Move to the next character
040D   10 F9                  DJNZ   printStr1   ; Decrement B and jump if not zero
040F   C9                     RET      ; Return from the routine
0410                             ; *******************************************************************************
0410                             ; *********  END OF MAIN   ******************************************************
0410                             ; *******************************************************************************
0410                OPCODES:      
0410   03 41 44 43            .PSTR   "ADC"   
0414   03 41 44 44            .PSTR   "ADD"   
0418   03 41 4E 44            .PSTR   "AND"   
041C   03 42 49 54            .PSTR   "BIT"   
0420   04 43 41 4C 4C         .PSTR   "CALL"   
0425   03 43 43 46            .PSTR   "CCF"   
0429   02 43 50               .PSTR   "CP"   
042C   03 43 50 44            .PSTR   "CPD"   
0430   04 43 50 44 52         .PSTR   "CPDR"   
0435   03 43 50 49            .PSTR   "CPI"   
0439   04 43 50 49 52         .PSTR   "CPIR"   
043E   03 43 50 4C            .PSTR   "CPL"   
0442   03 44 41 41            .PSTR   "DAA"   
0446   03 44 45 43            .PSTR   "DEC"   
044A   02 44 49               .PSTR   "DI"   
044D   04 44 4A 4E 5A         .PSTR   "DJNZ"   
0452   02 45 49               .PSTR   "EI"   
0455   02 45 58               .PSTR   "EX"   
0458   03 45 58 58            .PSTR   "EXX"   
045C   04 48 41 4C 54         .PSTR   "HALT"   
0461   02 49 4D               .PSTR   "IM"   
0464   02 49 4E               .PSTR   "IN"   
0467   03 49 4E 43            .PSTR   "INC"   
046B   03 49 4E 44            .PSTR   "IND"   
046F   04 49 4E 44 52         .PSTR   "INDR"   
0474   03 49 4E 49            .PSTR   "INI"   
0478   04 49 4E 49 52         .PSTR   "INIR"   
047D   02 4A 50               .PSTR   "JP"   
0480   02 4A 52               .PSTR   "JR"   
0483   02 4C 44               .PSTR   "LD"   
0486   03 4C 44 44            .PSTR   "LDD"   
048A   04 4C 44 44 52         .PSTR   "LDDR"   
048F   03 4C 44 49            .PSTR   "LDI"   
0493   04 4C 44 49 52         .PSTR   "LDIR"   
0498   03 4E 45 47            .PSTR   "NEG"   
049C   03 4E 4F 50            .PSTR   "NOP"   
04A0   02 4F 52               .PSTR   "OR"   
04A3   04 4F 54 44 52         .PSTR   "OTDR"   
04A8   04 4F 54 49 52         .PSTR   "OTIR"   
04AD   03 4F 55 54            .PSTR   "OUT"   
04B1   04 4F 55 54 44         .PSTR   "OUTD"   
04B6   04 4F 55 54 49         .PSTR   "OUTI"   
04BB   03 50 4F 50            .PSTR   "POP"   
04BF   04 50 55 53 48         .PSTR   "PUSH"   
04C4   03 52 45 53            .PSTR   "RES"   
04C8   03 52 45 54            .PSTR   "RET"   
04CC   04 52 45 54 49         .PSTR   "RETI"   
04D1   04 52 45 54 4E         .PSTR   "RETN"   
04D6   02 52 4C               .PSTR   "RL"   
04D9   03 52 4C 41            .PSTR   "RLA"   
04DD   03 52 4C 43            .PSTR   "RLC"   
04E1   04 52 4C 43 41         .PSTR   "RLCA"   
04E6   03 52 4C 44            .PSTR   "RLD"   
04EA   02 52 52               .PSTR   "RR"   
04ED   03 52 52 41            .PSTR   "RRA"   
04F1   03 52 52 43            .PSTR   "RRC"   
04F5   04 52 52 43 41         .PSTR   "RRCA"   
04FA   03 52 52 44            .PSTR   "RRD"   
04FE   03 52 53 54            .PSTR   "RST"   
0502   03 53 42 43            .PSTR   "SBC"   
0506   03 53 43 46            .PSTR   "SCF"   
050A   03 53 45 54            .PSTR   "SET"   
050E   03 53 4C 41            .PSTR   "SLA"   
0512   03 53 52 41            .PSTR   "SRA"   
0516   03 53 52 4C            .PSTR   "SRL"   
051A   03 53 55 42            .PSTR   "SUB"   
051E   03 58 4F 52            .PSTR   "XOR"   
0522   00                     .PSTR   ""   ; terminate list with a string of zero length
0523                REGISTERS:      
0523   01 42                  .PSTR   "B"   
0525   01 43                  .PSTR   "C"   
0527   01 44                  .PSTR   "D"   
0529   01 45                  .PSTR   "E"   
052B   01 48                  .PSTR   "H"   
052D   01 4C                  .PSTR   "L"   
052F   01 20                  .PSTR   " "   ; don't match, stand-in for (HL)
0531   01 41                  .PSTR   "A"   
0533   01 49                  .PSTR   "I"   
0535   01 52                  .PSTR   "R"   
0537   00                     .PSTR   ""   ; terminate list with a string of zero length
0538                REG_PAIRS:      
0538   02 42 43               .PSTR   "BC"   
053B   02 44 45               .PSTR   "DE"   
053E   02 48 4C               .PSTR   "HL"   
0541   02 53 50               .PSTR   "SP"   
0544   02 41 46               .PSTR   "AF"   ; NOTE: AF has the same code as SP in some instructions
0547   02 49 58               .PSTR   "IX"   
054A   02 49 59               .PSTR   "IY"   
054D   03 41 46 27            .PSTR   "AF'"   
0551   00                     .PSTR   ""   ; terminate list with a string of zero length
0552                FLAGS:       
0552   02 4E 5A               .PSTR   "NZ"   
0555   01 5A                  .PSTR   "Z"   
0557   02 4E 43               .PSTR   "NC"   
055A   01 43                  .PSTR   "C"   
055C   02 50 4F               .PSTR   "PO"   
055F   02 50 45               .PSTR   "PE"   
0562   01 50                  .PSTR   "P"   
0564   01 4D                  .PSTR   "M"   
0566   00                     .PSTR   ""   ; terminate list with a string of zero length
0567                DIRECTIVES:      
0567   06 2E 41 4C 49 47 4E   .PSTR   ".ALIGN"   
056E   03 2E 44 42            .PSTR   ".DB"   
0572   04 2E 4F 52 47         .PSTR   ".ORG"   
0577   04 2E 53 45 54         .PSTR   ".SET"   
057C   00                     .PSTR   ""   ; terminate list with a string of zero length
057D                             ; *******************************************************************************
057D                             ; *********  END OF DATA   ******************************************************
057D                             ; *******************************************************************************
0800                          .ORG   RAMSTART   
0800                          ALIGN   $100   
0800                BUFFER:   DS   BUFFER_SIZE   ; line buffer, page aligned
0850                          DS   $100   
0950                STACK:       ; grows down
0950                RST08:    DS   2   
0952                RST10:    DS   2   
0954                RST18:    DS   2   
0956                RST20:    DS   2   
0958                RST28:    DS   2   
095A                RST30:    DS   2   ; 
095C                BAUD:     DS   2   ; 
095E                INTVEC:   DS   2   ; 
0960                NMIVEC:   DS   2   ; 
0962                GETCVEC:   DS   2   ; 
0964                PUTCVEC:   DS   2   ; 
0966                VTEMP1:   DS   2   ; temp var 1
0968                VTEMP2:   DS   2   ; temp var 2
096A                VCHAR:    DS   1   ; buffer for pushed back character on input
096B                VTOKEN:   DS   1   ; buffer for pushed back token
096C                VTOKENVAL:   DS   2   ; buffer for pushed back token value
096E                VBUFFERPOS:   DS   2   ; pointer to char position into input buffer
0970                VASMPTR:   DS   2   ; pointer to assembly point
0972                VSTRPTR:   DS   2   ; pointer to string stack
0974                VSYMPTR:   DS   2   ; pointer to symbol stack
0976                VEXPRPTR:   DS   2   ; pointer to expression stack
0978                STRINGS:   DS   $100   ; string heap - grows up
0A78                SYMBOLS:   DS   $100   ; symbol heap - grows up
0B78                EXPRS:    DS   $100   ; expression heap - grows up
0C78                ASSEMBLY:      


ROMSTART:           0000 DEFINED AT LINE 1 IN constants.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 116 IN IOSerial.asm
                    > USED AT LINE 122 IN IOSerial.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 134 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 146 IN IOSerial.asm
                    > USED AT LINE 152 IN IOSerial.asm
                    > USED AT LINE 158 IN IOSerial.asm
                    > USED AT LINE 200 IN IOSerial.asm
                    > USED AT LINE 17 IN MAIN.asm
RAMSTART:           0800 DEFINED AT LINE 2 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 3 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 4 IN constants.asm
NO_MATCH:           00-1 DEFINED AT LINE 6 IN constants.asm
CTRL_H:             0008 DEFINED AT LINE 7 IN constants.asm
BUFFER_SIZE:        0050 DEFINED AT LINE 8 IN constants.asm
                    > USED AT LINE 546 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 5 IN ram.asm
TOKENS:             0000 DEFINED AT LINE 10 IN constants.asm
COMMA_:             000, DEFINED AT LINE 12 IN constants.asm
COMMENT_:           000; DEFINED AT LINE 13 IN constants.asm
                    > USED AT LINE 121 IN MAIN.asm
DIRECT_:            000D DEFINED AT LINE 14 IN constants.asm
                    > USED AT LINE 66 IN MAIN.asm
                    > USED AT LINE 165 IN MAIN.asm
DOLLAR_:            000$ DEFINED AT LINE 15 IN constants.asm
EOF_:               000E DEFINED AT LINE 16 IN constants.asm
                    > USED AT LINE 51 IN MAIN.asm
                    > USED AT LINE 108 IN MAIN.asm
FLAG_:              000F DEFINED AT LINE 17 IN constants.asm
                    > USED AT LINE 159 IN MAIN.asm
IDENT_:             000I DEFINED AT LINE 18 IN constants.asm
                    > USED AT LINE 168 IN MAIN.asm
LABEL_:             000L DEFINED AT LINE 19 IN constants.asm
                    > USED AT LINE 57 IN MAIN.asm
                    > USED AT LINE 133 IN MAIN.asm
NEWLN_:             000
 DEFINED AT LINE 20 IN constants.asm
NUM_:               0009 DEFINED AT LINE 21 IN constants.asm
                    > USED AT LINE 188 IN MAIN.asm
OPCODE_:            000C DEFINED AT LINE 22 IN constants.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 141 IN MAIN.asm
PARCLOSE_:          000) DEFINED AT LINE 23 IN constants.asm
PAROPEN_:           000( DEFINED AT LINE 24 IN constants.asm
REG_:               000R DEFINED AT LINE 25 IN constants.asm
                    > USED AT LINE 153 IN MAIN.asm
REGPAIR_:           000P DEFINED AT LINE 26 IN constants.asm
                    > USED AT LINE 147 IN MAIN.asm
UNKNOWN_:           000U DEFINED AT LINE 27 IN constants.asm
                    > USED AT LINE 197 IN MAIN.asm
OPCODE_IDX:         0000 DEFINED AT LINE 29 IN constants.asm
ADC_:               0000 DEFINED AT LINE 31 IN constants.asm
ADD_:               0001 DEFINED AT LINE 32 IN constants.asm
AND_:               0002 DEFINED AT LINE 33 IN constants.asm
BIT_:               0003 DEFINED AT LINE 34 IN constants.asm
CALL_:              0004 DEFINED AT LINE 35 IN constants.asm
CCF_:               0005 DEFINED AT LINE 36 IN constants.asm
CP_:                0006 DEFINED AT LINE 37 IN constants.asm
CPD_:               0007 DEFINED AT LINE 38 IN constants.asm
CPDR_:              0008 DEFINED AT LINE 39 IN constants.asm
CPI_:               0009 DEFINED AT LINE 40 IN constants.asm
CPIR_:              000A DEFINED AT LINE 41 IN constants.asm
CPL_:               000B DEFINED AT LINE 42 IN constants.asm
DAA_:               000C DEFINED AT LINE 43 IN constants.asm
DEC_:               000D DEFINED AT LINE 44 IN constants.asm
DI_:                000E DEFINED AT LINE 45 IN constants.asm
DJNZ_:              000F DEFINED AT LINE 46 IN constants.asm
EI_:                0010 DEFINED AT LINE 47 IN constants.asm
EX_:                0011 DEFINED AT LINE 48 IN constants.asm
EXX_:               0012 DEFINED AT LINE 49 IN constants.asm
HALT_:              0013 DEFINED AT LINE 50 IN constants.asm
IM_:                0014 DEFINED AT LINE 51 IN constants.asm
IN_:                0015 DEFINED AT LINE 52 IN constants.asm
INC_:               0016 DEFINED AT LINE 53 IN constants.asm
IND_:               0017 DEFINED AT LINE 54 IN constants.asm
INDR_:              0018 DEFINED AT LINE 55 IN constants.asm
INI_:               0019 DEFINED AT LINE 56 IN constants.asm
INIR_:              001A DEFINED AT LINE 57 IN constants.asm
JP_:                001B DEFINED AT LINE 58 IN constants.asm
JR_:                001C DEFINED AT LINE 59 IN constants.asm
LD_:                001D DEFINED AT LINE 60 IN constants.asm
LDD_:               001E DEFINED AT LINE 61 IN constants.asm
LDDR_:              001F DEFINED AT LINE 62 IN constants.asm
LDI_:               0020 DEFINED AT LINE 63 IN constants.asm
LDIR_:              0021 DEFINED AT LINE 64 IN constants.asm
NEG_:               0022 DEFINED AT LINE 65 IN constants.asm
NOP_:               0023 DEFINED AT LINE 66 IN constants.asm
OR_:                0024 DEFINED AT LINE 67 IN constants.asm
OTDR_:              0025 DEFINED AT LINE 68 IN constants.asm
OTIR_:              0026 DEFINED AT LINE 69 IN constants.asm
OUT_:               0027 DEFINED AT LINE 70 IN constants.asm
OUTD_:              0028 DEFINED AT LINE 71 IN constants.asm
OUTI_:              0029 DEFINED AT LINE 72 IN constants.asm
POP_:               002A DEFINED AT LINE 73 IN constants.asm
PUSH_:              002B DEFINED AT LINE 74 IN constants.asm
RES_:               002C DEFINED AT LINE 75 IN constants.asm
RET_:               002D DEFINED AT LINE 76 IN constants.asm
RETI_:              002E DEFINED AT LINE 77 IN constants.asm
RETN_:              002F DEFINED AT LINE 78 IN constants.asm
RL_:                0030 DEFINED AT LINE 79 IN constants.asm
RLA_:               0031 DEFINED AT LINE 80 IN constants.asm
RLC_:               0032 DEFINED AT LINE 81 IN constants.asm
RLCA_:              0033 DEFINED AT LINE 82 IN constants.asm
RLD_:               0034 DEFINED AT LINE 83 IN constants.asm
RR_:                0035 DEFINED AT LINE 84 IN constants.asm
RRA_:               0036 DEFINED AT LINE 85 IN constants.asm
RRC_:               0037 DEFINED AT LINE 86 IN constants.asm
RRCA_:              0038 DEFINED AT LINE 87 IN constants.asm
RRD_:               0039 DEFINED AT LINE 88 IN constants.asm
RST_:               003A DEFINED AT LINE 89 IN constants.asm
SBC_:               003B DEFINED AT LINE 90 IN constants.asm
SCF_:               003C DEFINED AT LINE 91 IN constants.asm
SET_:               0003 DEFINED AT LINE 139 IN constants.asm
SLA_:               003E DEFINED AT LINE 93 IN constants.asm
SRA_:               003F DEFINED AT LINE 94 IN constants.asm
SRL_:               0040 DEFINED AT LINE 95 IN constants.asm
SUB_:               0041 DEFINED AT LINE 96 IN constants.asm
XOR_:               0042 DEFINED AT LINE 97 IN constants.asm
REG_IDX:            0000 DEFINED AT LINE 99 IN constants.asm
B_:                 0000 DEFINED AT LINE 101 IN constants.asm
C_:                 0003 DEFINED AT LINE 128 IN constants.asm
D_:                 0002 DEFINED AT LINE 103 IN constants.asm
E_:                 0003 DEFINED AT LINE 104 IN constants.asm
H_:                 0004 DEFINED AT LINE 105 IN constants.asm
L_:                 0005 DEFINED AT LINE 106 IN constants.asm
MHL_:               0006 DEFINED AT LINE 107 IN constants.asm
A_:                 0007 DEFINED AT LINE 108 IN constants.asm
I_:                 0008 DEFINED AT LINE 109 IN constants.asm
R_:                 0009 DEFINED AT LINE 110 IN constants.asm
REG_PAIR_IDX:       0000 DEFINED AT LINE 112 IN constants.asm
BC_:                0000 DEFINED AT LINE 114 IN constants.asm
DE_:                0001 DEFINED AT LINE 115 IN constants.asm
HL_:                0002 DEFINED AT LINE 116 IN constants.asm
SP_:                0003 DEFINED AT LINE 117 IN constants.asm
AF_:                0004 DEFINED AT LINE 118 IN constants.asm
IX_:                0005 DEFINED AT LINE 119 IN constants.asm
IY_:                0006 DEFINED AT LINE 120 IN constants.asm
AFP_:               0007 DEFINED AT LINE 121 IN constants.asm
FLAG_IDX:           0000 DEFINED AT LINE 123 IN constants.asm
NZ_:                0000 DEFINED AT LINE 125 IN constants.asm
Z_:                 0001 DEFINED AT LINE 126 IN constants.asm
NC_:                0002 DEFINED AT LINE 127 IN constants.asm
PO_:                0004 DEFINED AT LINE 129 IN constants.asm
PE_:                0005 DEFINED AT LINE 130 IN constants.asm
P_:                 0006 DEFINED AT LINE 131 IN constants.asm
M_:                 0007 DEFINED AT LINE 132 IN constants.asm
DIRECTIVE_IDX:      0000 DEFINED AT LINE 134 IN constants.asm
ALIGN_:             0000 DEFINED AT LINE 136 IN constants.asm
DB_:                0001 DEFINED AT LINE 137 IN constants.asm
ORG_:               0002 DEFINED AT LINE 138 IN constants.asm
TEC_1:              0001 DEFINED AT LINE 143 IN constants.asm
RC2014:             0000 DEFINED AT LINE 144 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 146 IN constants.asm
LOADER:             0000 DEFINED AT LINE 148 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 149 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 33 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
                    > USED AT LINE 498 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 34 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 322 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 36 IN IOSerial.asm
                    > USED AT LINE 326 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 475 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 46 IN IOSerial.asm
                    > USED AT LINE 497 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 50 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 51 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 52 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 53 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 54 IN IOSerial.asm
                    > USED AT LINE 497 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 55 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 56 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 57 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 61 IN IOSerial.asm
                    > USED AT LINE 497 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 62 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 63 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 64 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 68 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 72 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 73 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 74 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 75 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 76 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 77 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 78 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 79 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 87 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 88 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 89 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 90 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 91 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 92 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 93 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 94 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 107 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 108 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 109 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 113 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 163 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 481 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 187 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 193 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 196 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 469 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 305 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 308 IN IOSerial.asm
                    > USED AT LINE 312 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 320 IN IOSerial.asm
                    > USED AT LINE 467 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 321 IN IOSerial.asm
                    > USED AT LINE 325 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 578 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 449 IN IOSerial.asm
                    > USED AT LINE 655 IN MAIN.asm
RESET:              008B DEFINED AT LINE 455 IN IOSerial.asm
                    > USED AT LINE 114 IN IOSerial.asm
START:              0180 DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 6
INIT:               0198 DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 22 IN MAIN.asm
PARSE:              01BE DEFINED AT LINE 43 IN MAIN.asm
                    > USED AT LINE 25 IN MAIN.asm
STATEMENTLIST:      01E5 DEFINED AT LINE 49 IN MAIN.asm
                    > USED AT LINE 44 IN MAIN.asm
                    > USED AT LINE 54 IN MAIN.asm
STATEMENT:          01F0 DEFINED AT LINE 56 IN MAIN.asm
                    > USED AT LINE 53 IN MAIN.asm
STATEMENT10:        01F4 DEFINED AT LINE 60 IN MAIN.asm
                    > USED AT LINE 58 IN MAIN.asm
STATEMENT1:         01FB DEFINED AT LINE 65 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
MATCH:              01FF DEFINED AT LINE 71 IN MAIN.asm
NEXTTOKEN:          0208 DEFINED AT LINE 92 IN MAIN.asm
                    > USED AT LINE 50 IN MAIN.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 74 IN MAIN.asm
NEXTTOKEN0:         0219 DEFINED AT LINE 100 IN MAIN.asm
                    > USED AT LINE 94 IN MAIN.asm
NEXTTOKEN1:         021C DEFINED AT LINE 102 IN MAIN.asm
                    > USED AT LINE 105 IN MAIN.asm
NEXTTOKEN2:         022A DEFINED AT LINE 110 IN MAIN.asm
                    > USED AT LINE 107 IN MAIN.asm
NEXTTOKEN3:         022F DEFINED AT LINE 114 IN MAIN.asm
                    > USED AT LINE 112 IN MAIN.asm
NEXTTOKEN4:         0234 DEFINED AT LINE 117 IN MAIN.asm
                    > USED AT LINE 120 IN MAIN.asm
NEXTTOKEN5:         023E DEFINED AT LINE 123 IN MAIN.asm
                    > USED AT LINE 116 IN MAIN.asm
NEXTTOKEN6:         0247 DEFINED AT LINE 128 IN MAIN.asm
                    > USED AT LINE 125 IN MAIN.asm
NEXTTOKEN7:         0254 DEFINED AT LINE 135 IN MAIN.asm
                    > USED AT LINE 132 IN MAIN.asm
NEXTTOKEN8:         0265 DEFINED AT LINE 143 IN MAIN.asm
                    > USED AT LINE 140 IN MAIN.asm
NEXTTOKEN9:         0270 DEFINED AT LINE 149 IN MAIN.asm
                    > USED AT LINE 146 IN MAIN.asm
NEXTTOKEN10:        027B DEFINED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 152 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
NEXTTOKEN11:        0286 DEFINED AT LINE 161 IN MAIN.asm
NEXTTOKEN12:        0291 DEFINED AT LINE 167 IN MAIN.asm
                    > USED AT LINE 164 IN MAIN.asm
NEXTTOKEN13:        0294 DEFINED AT LINE 170 IN MAIN.asm
                    > USED AT LINE 127 IN MAIN.asm
NEXTTOKEN14:        02AA DEFINED AT LINE 180 IN MAIN.asm
                    > USED AT LINE 173 IN MAIN.asm
NEXTTOKEN15:        02B3 DEFINED AT LINE 185 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
NEXTTOKEN16:        02B6 DEFINED AT LINE 187 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
NEXTTOKEN17:        02B9 DEFINED AT LINE 190 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
PUSHBACKTOKEN:      02C5 DEFINED AT LINE 201 IN MAIN.asm
IDENT:              02CE DEFINED AT LINE 225 IN MAIN.asm
                    > USED AT LINE 129 IN MAIN.asm
IDENT1:             02D4 DEFINED AT LINE 229 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
IDENT2:             02E2 DEFINED AT LINE 237 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
IDENT3:             02E6 DEFINED AT LINE 241 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
ISSPACE:            02F3 DEFINED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 104 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
ISALPHANUM:         02F9 DEFINED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 126 IN MAIN.asm
                    > USED AT LINE 235 IN MAIN.asm
ISALPHA:            02FD DEFINED AT LINE 307 IN MAIN.asm
ISALPHA1:           0303 DEFINED AT LINE 311 IN MAIN.asm
                    > USED AT LINE 309 IN MAIN.asm
ISDIGIT:            030A DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
NUMBER0:            0311 DEFINED AT LINE 355 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
NUMBER:             031A DEFINED AT LINE 361 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
NUMBER1:            0321 DEFINED AT LINE 366 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
NUMBER2:            0330 DEFINED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
NUMBER3:            0336 DEFINED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 359 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
HEX:                0346 DEFINED AT LINE 398 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
                    > USED AT LINE 371 IN MAIN.asm
HEX1:               0349 DEFINED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 427 IN MAIN.asm
HEX2:               0359 DEFINED AT LINE 409 IN MAIN.asm
                    > USED AT LINE 407 IN MAIN.asm
UPPER:              0360 DEFINED AT LINE 414 IN MAIN.asm
                    > USED AT LINE 413 IN MAIN.asm
VALID:              0362 DEFINED AT LINE 416 IN MAIN.asm
                    > USED AT LINE 405 IN MAIN.asm
DECIMAL:            0371 DEFINED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 375 IN MAIN.asm
DECIMAL1:           0374 DEFINED AT LINE 445 IN MAIN.asm
                    > USED AT LINE 462 IN MAIN.asm
SEARCHSTR:          038F DEFINED AT LINE 485 IN MAIN.asm
                    > USED AT LINE 139 IN MAIN.asm
                    > USED AT LINE 145 IN MAIN.asm
                    > USED AT LINE 151 IN MAIN.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 163 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
SEARCHSTR1:         0398 DEFINED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 500 IN MAIN.asm
SEARCHSTR2:         03A5 DEFINED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
NEXTCHAR:           03B9 DEFINED AT LINE 543 IN MAIN.asm
                    > USED AT LINE 103 IN MAIN.asm
                    > USED AT LINE 118 IN MAIN.asm
                    > USED AT LINE 130 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
                    > USED AT LINE 401 IN MAIN.asm
                    > USED AT LINE 446 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
NEXTLINE:           03CB DEFINED AT LINE 574 IN MAIN.asm
                    > USED AT LINE 547 IN MAIN.asm
                    > USED AT LINE 552 IN MAIN.asm
NEXTLINE1:          03D0 DEFINED AT LINE 577 IN MAIN.asm
                    > USED AT LINE 583 IN MAIN.asm
NEXTLINE2:          03DB DEFINED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
REWINDCHAR:         03E1 DEFINED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 136 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
                    > USED AT LINE 384 IN MAIN.asm
PROMPT:             03E9 DEFINED AT LINE 614 IN MAIN.asm
CRLF:               03F2 DEFINED AT LINE 619 IN MAIN.asm
ERROR:              03F9 DEFINED AT LINE 624 IN MAIN.asm
PRINT:              03FE DEFINED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 45 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
PRINTSTR:           0403 DEFINED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
PRINTSTR1:          0408 DEFINED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
OPCODES:            0410 DEFINED AT LINE 1 IN data.asm
                    > USED AT LINE 138 IN MAIN.asm
REGISTERS:          0523 DEFINED AT LINE 72 IN data.asm
                    > USED AT LINE 150 IN MAIN.asm
REG_PAIRS:          0538 DEFINED AT LINE 86 IN data.asm
                    > USED AT LINE 144 IN MAIN.asm
FLAGS:              0552 DEFINED AT LINE 98 IN data.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
DIRECTIVES:         0567 DEFINED AT LINE 110 IN data.asm
BUFFER:             0800 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 575 IN MAIN.asm
STACK:              0950 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 456 IN IOSerial.asm
                    > USED AT LINE 21 IN MAIN.asm
RST08:              0950 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 118 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
RST10:              0952 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 124 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
RST18:              0954 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 130 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
RST20:              0956 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 136 IN IOSerial.asm
                    > USED AT LINE 461 IN IOSerial.asm
RST28:              0958 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RST30:              095A DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 148 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
BAUD:               095C DEFINED AT LINE 15 IN ram.asm
INTVEC:             095E DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 154 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
NMIVEC:             0960 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 202 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
GETCVEC:            0962 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 468 IN IOSerial.asm
PUTCVEC:            0964 DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
VTEMP1:             0966 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 357 IN MAIN.asm
                    > USED AT LINE 367 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
VTEMP2:             0968 DEFINED AT LINE 22 IN ram.asm
VCHAR:              096A DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
VTOKEN:             096B DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 30 IN MAIN.asm
                    > USED AT LINE 93 IN MAIN.asm
                    > USED AT LINE 95 IN MAIN.asm
                    > USED AT LINE 98 IN MAIN.asm
VTOKENVAL:          096C DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 36 IN MAIN.asm
                    > USED AT LINE 96 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
VBUFFERPOS:         096E DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 31 IN MAIN.asm
                    > USED AT LINE 544 IN MAIN.asm
                    > USED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 607 IN MAIN.asm
VASMPTR:            0970 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 33 IN MAIN.asm
VSTRPTR:            0972 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 35 IN MAIN.asm
                    > USED AT LINE 137 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
                    > USED AT LINE 243 IN MAIN.asm
VSYMPTR:            0974 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 38 IN MAIN.asm
VEXPRPTR:           0976 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 40 IN MAIN.asm
STRINGS:            0978 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 34 IN MAIN.asm
SYMBOLS:            0A78 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 37 IN MAIN.asm
EXPRS:              0B78 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 39 IN MAIN.asm
ASSEMBLY:           0C78 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 32 IN MAIN.asm
