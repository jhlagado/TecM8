    .engine mycomputer

    .include "constants.asm"
    .include "IOSerial.asm"
    
    jp testsStart
    
    .include "MAIN.asm"
    .include "data.asm"
    .include "ram.asm"
    
    .org $4000

testsStart:
    ld sp,STACK

    ; ------------------------------------------------------------

    ; call describe
    ; .cstr "parse opcode with a reg operand, an indexed indirect operand"
    
    ; call test
    ; .db "in a,(c)"
    ; .db 0

    ; call expectOpData
    ; .db LD_, reg_ , A_, reg_ | mem_ |index_ , IX_

    ; ------------------------------------------------------------

    call describe
    .cstr "parse opcode with a reg operand, an indexed rp indirect operand"
    
    call test
    .db "ld a,(ix + 0)"
    .db 0

    call expectOpData
    .db LD_, reg_ , A_, rp_ | indirect_ |index_ , IX_

    ; ------------------------------------------------------------

    call describe
    .cstr "parse opcode with a reg operand, an rp indirect operand"
    
    call test
    .db "ld a,(hl)"
    .db 0

    call expectOpData
    .db LD_, reg_ , A_, rp_ | indirect_, HL_

    ; ------------------------------------------------------------

    call describe
    .cstr "parse opcode with a flag operand, an immediate operand"
    
    call test
    .db "jp nz,0"
    .db 0

    call expectOpData
    .db JP_, flag_, NZ_, immed_, -1

    ; ------------------------------------------------------------


    call describe
    .cstr "parse opcode with an immediate operand"
    
    call test
    .db "jp 0"
    .db 0

    call expectOpData
    .db JP_, -1, -1, immed_, -1

    ; ------------------------------------------------------------

    call describe
    .cstr "parse opcode without operands"
    
    call test
    .db "halt"
    .db 0

    call expectOpData
    .db HALT_, -1, -1, -1, -1

    ; ------------------------------------------------------------

    call describe
    .cstr "It should do nothing"
    
    call test
    .db 0

    call expect
    .db 0

    ; ------------------------------------------------------------

    ; .cstr "It should assemble one instruction"
    ; call expect
    ; .db 01,$76

    call print 
    .cstr "\r\nDone!"
    
    halt

.include "test.lib.asm"

    ; call test
    ; ; .db "label1: LD A,42;comment\r\n"
    ; ; .db "halt"
    ; .db 0