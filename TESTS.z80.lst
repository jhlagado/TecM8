0000                             ; .engine mycomputer
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $3000   
0000                ROMSIZE:   EQU   $3000   
0000                RAMSIZE:   EQU   $0800   
0000                EOF:      EQU   -1   
0000                NULL:     EQU   0   
0000                CTRL_C:   EQU   3   
0000                CTRL_H:   EQU   8   
0000                ESC:      EQU   27   
0000                NO_MATCH:   EQU   -1   
0000                BUFFER_SIZE:   EQU   $80   
0000                HEAP_SIZE:   EQU   $100   
0000                TOKENS:      
0000                COLON_:   EQU   ":"   
0000                COMMA_:   EQU   ","   
0000                DIRECT_:   EQU   "D"   
0000                DOLLAR_:   EQU   "$"   
0000                EOF_:     EQU   "E"   
0000                IDENT_:   EQU   "I"   
0000                LABEL_:   EQU   "L"   
0000                LPAREN_:   EQU   "("   
0000                MINUS_:   EQU   "-"   
0000                NEWLN_:   EQU   "\n"   
0000                NUM_:     EQU   "9"   
0000                OPCODE_:   EQU   "C"   
0000                OPELEM_:   EQU   "M"   ; op element: reg, rp, flag
0000                PLUS_:    EQU   "+"   
0000                RPAREN_:   EQU   ")"   
0000                UNKNOWN_:   EQU   "U"   
0000                ALU_:     EQU   0x00   
0000                ROT_:     EQU   0x20   
0000                BLI_:     EQU   0x40   
0000                GEN1_:    EQU   0x60   
0000                GEN2_:    EQU   0x80   
0000                ALU_IDX:      
0000                ADD_:     EQU   0 | alu_   
0000                ADC_:     EQU   1 | alu_   
0000                SUB_:     EQU   2 | alu_   
0000                SBC_:     EQU   3 | alu_   
0000                AND_:     EQU   4 | alu_   
0000                XOR_:     EQU   5 | alu_   
0000                OR_:      EQU   6 | alu_   
0000                CP_:      EQU   7 | alu_   
0000                ROT_IDX:      
0000                RLC_:     EQU   0 | rot_   
0000                RRC_:     EQU   1 | rot_   
0000                RL_:      EQU   2 | rot_   
0000                RR_:      EQU   3 | rot_   
0000                SLA_:     EQU   4 | rot_   
0000                SRA_:     EQU   5 | rot_   
0000                SLL_:     EQU   6 | rot_   
0000                SRL_:     EQU   7 | rot_   
0000                BLI_IDX:      
0000                LDI_:     EQU   00 | bli_   
0000                CPI_:     EQU   01 | bli_   
0000                INI_:     EQU   02 | bli_   
0000                OUTI_:    EQU   03 | bli_   
0000                LDD_:     EQU   04 | bli_   
0000                CPD_:     EQU   05 | bli_   
0000                IND_:     EQU   06 | bli_   
0000                OUTD_:    EQU   07 | bli_   
0000                LDIR_:    EQU   08 | bli_   
0000                CPIR_:    EQU   09 | bli_   
0000                INIR_:    EQU   10 | bli_   
0000                OTIR_:    EQU   11 | bli_   
0000                LDDR_:    EQU   12 | bli_   
0000                CPDR_:    EQU   13 | bli_   
0000                INDR_:    EQU   14 | bli_   
0000                OTDR_:    EQU   15 | bli_   
0000                GEN1_IDX:      
0000                CCF_:     EQU   00 | gen1_   
0000                CPL_:     EQU   01 | gen1_   
0000                DAA_:     EQU   02 | gen1_   
0000                DI_:      EQU   03 | gen1_   
0000                EI_:      EQU   04 | gen1_   
0000                HALT_:    EQU   05 | gen1_   
0000                NOP_:     EQU   06 | gen1_   
0000                RLCA_:    EQU   07 | gen1_   
0000                RST_:     EQU   08 | gen2_   
0000                SCF_:     EQU   09 | gen1_   
0000                GEN2_IDX:      
0000                BIT_:     EQU   00 | gen2_   
0000                CALL_:    EQU   01 | gen2_   
0000                DEC_:     EQU   02 | gen2_   
0000                DJNZ_:    EQU   03 | gen2_   
0000                EX_:      EQU   04 | gen2_   
0000                EXX_:     EQU   05 | gen2_   
0000                IM_:      EQU   06 | gen2_   
0000                IN_:      EQU   07 | gen2_   
0000                INC_:     EQU   08 | gen2_   
0000                JP_:      EQU   09 | gen2_   
0000                JR_:      EQU   10 | gen2_   
0000                LD_:      EQU   11 | gen2_   
0000                NEG_:     EQU   12 | gen2_   
0000                OUT_:     EQU   13 | gen2_   
0000                POP_:     EQU   14 | gen2_   
0000                PUSH_:    EQU   15 | gen2_   
0000                RES_:     EQU   16 | gen2_   
0000                RET_:     EQU   17 | gen2_   
0000                RETI_:    EQU   18 | gen2_   
0000                RETN_:    EQU   19 | gen2_   
0000                RLA_:     EQU   20 | gen2_   
0000                RLD_:     EQU   21 | gen2_   
0000                RRA_:     EQU   22 | gen2_   
0000                RRCA_:    EQU   23 | gen2_   
0000                RRD_:     EQU   24 | gen2_   
0000                SET_:     EQU   25 | gen2_   
0000                REG_:     EQU   0x00   ; A, B etc
0000                RP_:      EQU   0x08   ; bit 3: register pair e.g. HL, DE
0000                FLAG_:    EQU   0x10   ; bit 4: flag NZ etc
0000                IMMED_:   EQU   0x20   ; bit 5: immediate 0xff or 0xffff
0000                MEM_:     EQU   0x40   ; bit 6: memory ref (HL) or (0xffff)
0000                IDX_:     EQU   0x80   ; bit 7: indexed (IX+dd)
0000                REG8_IDX:      ; 8-bit registers
0000                B_:       EQU   0   ; B
0000                C_:       EQU   1   ; C
0000                D_:       EQU   2   ; D
0000                E_:       EQU   3   ; E
0000                H_:       EQU   4   ; H
0000                L_:       EQU   5   ; L
0000                MHL_:     EQU   6   ; (HL)
0000                A_:       EQU   7   ; A
0000                I_:       EQU   8   ; I
0000                R_:       EQU   9   ; R
0000                REG16_IDX:      ; 16-bit registers
0000                BC_:      EQU   0 | rp_   
0000                DE_:      EQU   1 | rp_   
0000                HL_:      EQU   2 | rp_   
0000                SP_:      EQU   3 | rp_   
0000                IX_:      EQU   5 | rp_   
0000                IY_:      EQU   6 | rp_   
0000                AFP_:     EQU   4 | rp_   ; AF' (prime)
0000                AF_:      EQU   7 | rp_   ; NOTE: AF has the same code as SP in some instructions
0000                FLAG_IDX:      
0000                NZ_:      EQU   0 | flag_   
0000                Z_:       EQU   1 | flag_   
0000                NC_:      EQU   2 | flag_   
0000                C_:       EQU   3 | flag_   
0000                PO_:      EQU   4 | flag_   
0000                PE_:      EQU   5 | flag_   
0000                P_:       EQU   6 | flag_   
0000                M_:       EQU   7 | flag_   
0000                DIRECTIVE_IDX:      
0000                ALIGN_:   EQU   0   
0000                DB_:      EQU   1   
0000                ORG_:     EQU   2   
0000                SET_:     EQU   3   
0000                             ; -----------------------------------------------------------------------------------------------
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                             ; *************************************************************************
0000                             ; 
0000                             ;       Serial routines 
0000                             ; 
0000                             ;       written by Craig Jones 
0000                             ; 
0000                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
0000                             ; 
0000                             ;       see the LICENSE file in this repo for more information 
0000                             ; 
0000                             ; *****************************************************************************
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8D 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 98 31               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 9A 31               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 9C 31               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 9E 31               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A A0 31               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A A2 31               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A A6 31               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A A8 31               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   E5                     PUSH   HL   
0082   2A AA 31               LD   HL,(GETCVEC)   
0085   E3                     EX   (SP),HL   
0086   C9                     RET      
0087                             ; 
0087                PUTCHAR:      
0087   E5                     PUSH   HL   
0088   2A AC 31               LD   HL,(PUTCVEC)   
008B   E3                     EX   (SP),HL   
008C   C9                     RET      
008D                             ; 
008D                RESET:       
008D   31 80 31               LD   SP,stack   
0090   21 5F 00               LD   HL,IntRet   
0093   22 98 31               LD   (RST08),HL   
0096   22 9A 31               LD   (RST10),HL   
0099   22 9C 31               LD   (RST18),HL   
009C   22 9E 31               LD   (RST20),HL   
009F   22 A0 31               LD   (RST28),HL   
00A2   22 A2 31               LD   (RST30),HL   
00A5   22 A6 31               LD   (INTVEC),HL   
00A8   22 A8 31               LD   (NMIVEC),HL   
00AB                             ; 
00AB   21 78 00               LD   HL,RXDATA   
00AE   22 AA 31               LD   (GETCVEC),HL   
00B1   21 6B 00               LD   HL,TXDATA   
00B4   22 AC 31               LD   (PUTCVEC),HL   
00B7                             ; 
00B7                          IF   TEC_1   
00B7                          IF   BITBANG = 0   
00B7                             ; 
00B7   3E 03                  LD   a,MRESET   
00B9   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00BB                             ; 
00BB                          ENDIF      
00BB                          ENDIF      
00BB                             ; 
00BB   CD 50 00               CALL   PWRUP   
00BE   ED 56                  IM   1   
00C0   FB                     EI      
00C1                             ; 
00C1                          IF   TEC_1   
00C1                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00C1                          ELSE      ;6850      
00C1                             ; 
00C1   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C3   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C5                             ; 
00C5                          ENDIF      
00C5                          ENDIF      
00C5                             ; 
00C5                             ; 
00C5   C3 00 40               JP   testsStart   
00C8                             ; *************************************************************************
00C8                             ; 
00C8                             ;       TecM8 1.0 Assembler for the Tec-1
00C8                             ; 
00C8                             ;       by John Hardy
00C8                             ; 
00C8                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3,29 June 2007
00C8                             ; 
00C8                             ;       see the LICENSE file in this repo for more information
00C8                             ; 
00C8                             ; *****************************************************************************
00C8                             ; **************************************************************************
00C8                             ; Page 0  Initialisation
00C8                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put TecM8 code from here	
0180                             ; *****************************************************************************
0180                             ; Routine: start
0180                             ; 
0180                             ; Purpose:
0180                             ;    Entry point of TecM8. Initializes the STACK pointer,calls the initialization
0180                             ;    routine,prints TecM8 version information,and jumps to the parsing routine.
0180                             ; 
0180                             ; Inputs:
0180                             ;    None
0180                             ; 
0180                             ; Outputs:
0180                             ;    None
0180                             ; 
0180                             ; Registers Destroyed:
0180                             ;    A,HL
0180                             ; *****************************************************************************
0180                START:       
0180   31 80 31               LD   sp,STACK   ; Initialize STACK pointer
0183   CD 98 01               CALL   init   ; Call initialization routine
0186   CD 74 05               CALL   print   ; Print TecM8 version information
0189   54 65 63 4D 38 20 30 2E 30 0D 0A 00 .CSTR   "TecM8 0.0\r\n"   
0195   C3 BD 01               JP   parse   ; Jump to the parsing routine
0198                             ; *****************************************************************************
0198                             ; Routine: init
0198                             ; 
0198                             ; Purpose:
0198                             ;    Initializes various pointers and variables used by TecM8.
0198                             ; 
0198                             ; Inputs:
0198                             ;    None
0198                             ; 
0198                             ; Outputs:
0198                             ;    None
0198                             ; 
0198                             ; Registers Destroyed:
0198                             ;    A,HL
0198                             ; *****************************************************************************
0198                INIT:        
0198   21 00 00               LD   hl,0   ; 
019B   22 85 31               LD   (vTokenVal),hl   ; vTokenVal = 0
019E   22 8B 31               LD   (vSymPtr),hl   ; vSymPtr = 0
01A1   22 8D 31               LD   (vExprPtr),hl   ; vExprPtr = 0
01A4   AF                     XOR   a   ; 
01A5   32 84 31               LD   (vToken),a   ; vToken = 0
01A8   32 87 31               LD   (vBufferPos),a   ; vBufferPos = 0
01AB   3E 0A                  LD   a,"\n"   ; put new line into first char of buffer
01AD   32 00 30               LD   (BUFFER),a   ; 
01B0   21 AE 31               LD   hl,HEAP   ; vHeapPtr = HEAP
01B3   22 8F 31               LD   (vHeapPtr),hl   ; 
01B6   21 AE 32               LD   hl,ASSEMBLY   ; vAsmPtr = ASSEMBLY
01B9   22 89 31               LD   (vAsmPtr),hl   ; 
01BC   C9                     RET      
01BD                             ; *****************************************************************************
01BD                             ; Routine: parse
01BD                             ; 
01BD                             ; Purpose:
01BD                             ;    Parses the input program,calling the statementList routine,printing the
01BD                             ;    completion message,and halting the system.
01BD                             ; 
01BD                             ; Inputs:
01BD                             ;    None
01BD                             ; 
01BD                             ; Outputs:
01BD                             ;    None
01BD                             ; 
01BD                             ; Registers Destroyed:
01BD                             ;    None
01BD                             ; *****************************************************************************
01BD                PARSE:       
01BD   CD F7 01               CALL   statementList   ; Parse the input program
01C0   CD 74 05               CALL   print   ; Print completion message
01C3   50 61 72 73 69 6E 67 20 63 6F 6D 70 6C 65 74 65 64 20 73 75 63 63 65 73 73 66 75 6C 6C 79 2E 00 .CSTR   "Parsing completed successfully."   
01E3   76                     HALT      
01E4                PARSEERROR:      
01E4   55 6E 65 78 70 65 63 74 65 64 20 74 6F 6B 65 6E 2E 00 .CSTR   "Unexpected token."   
01F6   76                     HALT      
01F7                             ; *****************************************************************************
01F7                             ; Routine: statementList
01F7                             ; 
01F7                             ; Purpose:
01F7                             ;    Parses a list of statements,repeatedly calling the statement routine until
01F7                             ;    the end of file (EOF) token is encountered.
01F7                             ; 
01F7                             ; Inputs:
01F7                             ;    None
01F7                             ; 
01F7                             ; Outputs:
01F7                             ;    None
01F7                             ; 
01F7                             ; Registers Destroyed:
01F7                             ;    A
01F7                             ; *****************************************************************************
01F7                STATEMENTLIST:      
01F7   CD 1B 03               CALL   nextToken   ; Get the next token
01FA   CD 06 02               CALL   statement   ; Parse a statement
01FD   FE 45                  CP   EOF_   ; Check if it's the end of file
01FF   C8                     RET   z   ; If yes,return
0200   FE 0A                  CP   NEWLN_   
0202   20 E0                  JR   nz,parseError   
0204   18 F1                  JR   statementList   ; Repeat for the next statement
0206                             ; *****************************************************************************
0206                             ; Routine: statement
0206                             ; 
0206                             ; Purpose:
0206                             ;    Parses a single statement,checking its type (label,opcode,or directive)
0206                             ;    and performing corresponding actions.
0206                             ; 
0206                             ; Inputs:
0206                             ;    None
0206                             ; 
0206                             ; Outputs:
0206                             ;    None
0206                             ; 
0206                             ; Registers Destroyed:
0206                             ;    A
0206                             ; *****************************************************************************
0206                STATEMENT:      
0206   CD 78 04               CALL   isEndOfLine   
0209   C8                     RET   z   
020A   F5                     PUSH   af   ; save token
020B   3E FF                  LD   a,-1   
020D   32 91 31               LD   (vOpcode),a   
0210   32 92 31               LD   (vOperand1),a   
0213   32 93 31               LD   (vOperand2),a   
0216   AF                     XOR   a   
0217   32 94 31               LD   (vOpExpr),a   
021A   32 96 31               LD   (vOpDisp),a   
021D   F1                     POP   af   ; restore token
021E   FE 4C                  CP   LABEL_   ; Check if it's a label
0220   20 0A                  JR   nz,statement1   ; If not,jump to statement10
0222   ED 5B 89 31            LD   de,(vAsmPtr)   ; HL = symbol name DE = symbol value (assembler pointer)
0226   CD 02 03               CALL   addSymbol   ; Add label to symbol list
0229   CD 1B 03               CALL   nextToken   ; Get the next token
022C                STATEMENT1:      
022C   FE 43                  CP   OPCODE_   ; Check if it's an opcode
022E   28 05                  JR   z,instruction   ; Jump to parseInstruction routine
0230   FE 44                  CP   DIRECT_   ; Check if it's a directive
0232   28 34                  JR   z,directive   
0234   C9                     RET      
0235                INSTRUCTION:      
0235   7D                     LD   a,l   
0236   32 91 31               LD   (vOpcode),a   
0239   CD 1B 03               CALL   nextToken   
023C   CD 78 04               CALL   isEndOfLine   
023F   C8                     RET   z   
0240   CD 69 02               CALL   operand   
0243   32 92 31               LD   (vOperand1),a   
0246   CD 1B 03               CALL   nextToken   
0249   FE 2C                  CP   COMMA_   
024B   20 0F                  JR   nz,instruction1   
024D   CD 1B 03               CALL   nextToken   
0250   CD 78 04               CALL   isEndOfLine   
0253   28 8F                  JR   z,parseError   
0255   CD 69 02               CALL   operand   
0258   32 93 31               LD   (vOperand2),a   
025B   C9                     RET      
025C                INSTRUCTION1:      
025C   3A 92 31               LD   a,(vOperand1)   ; one operand instruction
025F   32 93 31               LD   (vOperand2),a   ; move operand to operand2
0262   3E FF                  LD   a,-1   ; set operand1 to default -1
0264   32 92 31               LD   (vOperand1),a   
0267   C9                     RET      
0268                DIRECTIVE:      
0268   C9                     RET      
0269                             ; *****************************************************************************
0269                             ; Routine: operand
0269                             ; 
0269                             ; Purpose:
0269                             ;    Parses and identifies different types of operands (registers,memory,
0269                             ;    immediate values,etc.) used in assembly instructions. Sets the appropriate
0269                             ;    flags based on the operand type.
0269                             ; 
0269                             ; Inputs:
0269                             ;    None (uses the current token from a token stream)
0269                             ; 
0269                             ; Outputs:
0269                             ;    CF - if there is an operand
0269                             ;    A - Contains operand information
0269                             ; 
0269                             ; Registers Destroyed:
0269                             ;    A,B,DE,HL
0269                             ; *****************************************************************************
0269                OPERAND:      
0269   FE 4D                  CP   OPELEM_   ; Check if the token is an op element i.e. reg,rp or flag
026B   C8                     RET   z   ; Return if it is
026C   FE 28                  CP   LPAREN_   ; Check if the token is a left parenthesis
026E   28 0A                  JR   z,operand1   ; If so,handle as a memory reference
0270   CD A9 02               CALL   expression   ; Otherwise,treat as an expression
0273   22 94 31               LD   (vOpExpr),hl   ; Store the result of the operand expression
0276   3E 20                  LD   a,immed_   ; Set A to indicate an immediate value
0278   37                     SCF      ; CF = true
0279   C9                     RET      
027A                OPERAND1:      
027A   CD 1B 03               CALL   nextToken   ; Memory reference. Get the next token
027D   FE 4D                  CP   OPELEM_   ; Check if the next token is an op element
027F   20 14                  JR   nz,operand2   ; If not,handle as an expression inside parentheses
0281   7D                     LD   a,l   ; Otherwise,Load A with the lower byte of HL (operand)
0282   CD 7E 04               CALL   isIndexReg   
0285   20 18                  JR   nz,operand4   
0287   F5                     PUSH   af   ; Save HL on the stack
0288   CD A9 02               CALL   expression   ; Treat as an expression
028B   22 96 31               LD   (vOpDisp),hl   ; Store the result of the expression
028E   F1                     POP   af   ; Restore HL from the stack
028F   CB FF                  SET   7,a   ; Set A to indicate an indexed memory reference
0291                OPERAND3:      
0291   CB F7                  SET   6,a   ; Otherwise,set A to indicate a memory reference
0293   18 0A                  JR   operand4   
0295                OPERAND2:      
0295   CD A9 02               CALL   expression   ; Treat as a new expression
0298   22 94 31               LD   (vOpExpr),hl   ; Store the result of the expression
029B   3E 60                  LD   a,immed_ | mem_   ; Set A to indicate an immediate memory reference
029D   18 00                  JR   operand4   
029F                OPERAND4:      
029F   CD 1B 03               CALL   nextToken   ; Get the next token
02A2   FE 29                  CP   RPAREN_   ; Check if the next token is a right parenthesis
02A4   C2 E4 01               JP   nz,parseError   ; If not,handle as a parse error
02A7   37                     SCF      ; CF = true
02A8   C9                     RET      
02A9                             ; *****************************************************************************
02A9                             ; Routine: expression
02A9                             ; 
02A9                             ; Purpose:
02A9                             ;    Parses an expression as an array of tokens and stores it in an array.
02A9                             ;    Each token in the expression is appended to an array which is terminated by
02A9                             ;    a NULL token type.
02A9                             ;    The expression list pointer is updated to point to the start of the last token list.
02A9                             ; 
02A9                             ; Inputs:
02A9                             ;    A - token type
02A9                             ;    HL - token value
02A9                             ; 
02A9                             ; Outputs:
02A9                             ;    Updates the heap with the parsed expression and updates the expression list pointer.
02A9                             ; 
02A9                             ; Registers Destroyed:
02A9                             ;    AF,B,HL
02A9                             ; *****************************************************************************
02A9                EXPRESSION:      
02A9   06 00                  LD   b,0   ; Initialize nesting level
02AB   E5                     PUSH   hl   ; Save token value
02AC   ED 5B 8F 31            LD   de,(vHeapPtr)   ; Load the current heap pointer into DE
02B0   2A 8D 31               LD   hl,(vExprPtr)   ; Load the current expression list pointer into HL
02B3   CD 93 05               CALL   hpush   ; Push the pointer to the last symbol onto the heap
02B6   21 00 00               LD   hl,0   ; Append two words in header (for future use)
02B9   CD 93 05               CALL   hpush   
02BC   CD 93 05               CALL   hpush   
02BF   ED 53 8D 31            LD   (vExprPtr),de   ; Update the expression list pointer with the new address
02C3   E1                     POP   hl   ; HL = token value
02C4                EXPRESSION1:      
02C4   EB                     EX   de,hl   ; DE = token value
02C5   6F                     LD   l,a   ; HL = token type
02C6   26 00                  LD   h,0   
02C8   CD 93 05               CALL   hpush   ; Push the token type
02CB   EB                     EX   de,hl   ; HL = token value
02CC   CD 93 05               CALL   hpush   ; Push the token value
02CF   CD 1B 03               CALL   nextToken   ; Get the next token
02D2   FE 28                  CP   "("   ; increase nesting?
02D4   20 06                  JR   nz,expression2   
02D6   04                     INC   b   
02D7   CD 1B 03               CALL   nextToken   ; Get the next token
02DA   18 E8                  JR   expression1   ; Repeat the main loop
02DC                EXPRESSION2:      
02DC   04                     INC   b   ; Check if nesting level is zero
02DD   05                     DEC   b   
02DE   28 0A                  JR   z,expression3   ; If yes,skip to expression3
02E0   FE 29                  CP   ")"   ; if nesting > 0,decrease nesting?
02E2   20 06                  JR   nz,expression3   
02E4   05                     DEC   b   ; Decrease nesting level
02E5   CD 1B 03               CALL   nextToken   ; Get the next token
02E8   18 DA                  JR   expression1   ; Repeat the main loop
02EA                EXPRESSION3:      
02EA   FE 29                  CP   RPAREN_   ; Check if the end of the expression
02EC   28 0B                  JR   z,expression4   
02EE   FE 2C                  CP   COMMA_   
02F0   28 07                  JR   z,expression4   
02F2   CD 78 04               CALL   isEndOfLine   
02F5   28 02                  JR   z,expression4   
02F7   18 CB                  JR   expression1   
02F9                EXPRESSION4:      
02F9   21 00 00               LD   hl,NULL   ; Mark the end of the expression with NULL
02FC   CD 93 05               CALL   hpush   ; Push NULL onto the heap
02FF   C3 DF 03               JP   pushBackToken   ; Rewind the token to the last valid one
0302                             ; *****************************************************************************
0302                             ; Routine: addSymbol
0302                             ; 
0302                             ; Purpose:
0302                             ;    Adds a new symbol to the symbol list. The symbol's name is in HL and the
0302                             ;    symbol's value is in DE. Updates the symbol list pointer and ensures
0302                             ;    the previous symbol's pointer is preserved.
0302                             ; 
0302                             ; Inputs:
0302                             ;    HL - Points to the name of the new symbol.
0302                             ;    DE - Contains the value of the new symbol.
0302                             ; 
0302                             ; Outputs:
0302                             ;    Updates the symbol list pointer in vSymPtr.
0302                             ; 
0302                             ; Registers Destroyed:
0302                             ;    DE,HL
0302                             ; *****************************************************************************
0302                ADDSYMBOL:      
0302   D5                     PUSH   de   
0303   E5                     PUSH   hl   ; Push symbol name onto the stack
0304   ED 5B 8F 31            LD   de,(vHeapPtr)   ; BC = symbol address from the heap pointer
0308   2A 8B 31               LD   hl,(vSymPtr)   ; Load the current symbol list pointer into HL
030B   CD 93 05               CALL   hpush   ; Push pointer to the last symbol onto the heap
030E   ED 53 8B 31            LD   (vSymPtr),de   ; Update the symbol list pointer with the new symbol address
0312   E1                     POP   hl   ; HL = symbol name
0313   CD 93 05               CALL   hpush   ; Push symbol name onto the heap
0316   E1                     POP   hl   ; HL = symbol value
0317   CD 93 05               CALL   hpush   ; Push symbol value onto the heap
031A   C9                     RET      ; Return from subroutine
031B                             ; nextToken is a lexer function that reads characters from the input and classifies
031B                             ; them into different token types. It handles whitespace,end of input,newlines,
031B                             ; comments,identifiers,labels,directives,hexadecimal numbers,and other SYMBOLS.
031B                             ; Input: None
031B                             ; Output:
031B                             ; a: contains the type of the next token.
031B                             ; hl: contains the value associated with the next token.
031B                             ; Destroyed: None
031B                             ; *****************************************************************************
031B                             ; Routine: nextToken
031B                             ; 
031B                             ; Purpose:
031B                             ;    Parses the next token from the input stream,identifying various types of
031B                             ;    tokens such as identifiers,labels,opcodes,registers,flags,numbers,
031B                             ;    and special characters.
031B                             ; 
031B                             ; Inputs:
031B                             ;    None
031B                             ; 
031B                             ; Outputs:
031B                             ;    A - Token representing the type of the parsed element
031B                             ; 
031B                             ; Registers Destroyed:
031B                             ;    A,BC,DE,HL
031B                             ; *****************************************************************************
031B                NEXTTOKEN:      
031B   21 84 31               LD   hl,vToken   ; hl points to vToken
031E   7E                     LD   a,(hl)   ; load a with pushed back vToken
031F   CB 7F                  BIT   7,a   ; Check the high bit of token
0321   CA 2B 03               JP   z,nextToken0   ; If high bit clear,nothing pushed back
0324   CB BF                  RES   7,a   ; Clear high bit
0326   77                     LD   (hl),a   ; Store the character back in the BUFFER
0327   2A 85 31               LD   hl,(vTokenVal)   ; put token value into HL
032A   C9                     RET      ; Return with the pushed back character in A
032B                NEXTTOKEN0:      
032B   21 00 00               LD   hl,0   ; Initialize HL with 0
032E                NEXTTOKEN1:      
032E   CD ED 04               CALL   nextChar   ; Get the next character
0331   FE 20                  CP   " "   ; is it space?
0333   28 F9                  JR   z,nextToken1   ; If yes,skip it and get the next character
0335   FE FF                  CP   EOF   ; Is it null (end of input)?
0337   20 03                  JR   nz,nextToken2   ; If not,continue to the next check
0339   3E 45                  LD   a,EOF_   ; If yes,return with EOF token
033B   C9                     RET      
033C                NEXTTOKEN2:      
033C   FE 5C                  CP   $5C   ; Is it a statement separator? "\"
033E   28 08                  JR   z,nextToken2a   ; If not,continue to the next check
0340   FE 3A                  CP   ":"   ; Is it a statement separator? ":"
0342   28 04                  JR   z,nextToken2a   ; If not,continue to the next check
0344   FE 0A                  CP   "\n"   ; Is it a new line
0346   20 03                  JR   nz,nextToken3   ; If not,continue to the next check
0348                NEXTTOKEN2A:      
0348   3E 0A                  LD   a,NEWLN_   ; If yes,return with NEWLIN token
034A   C9                     RET      ; Return with newline token
034B                NEXTTOKEN3:      
034B   FE 3B                  CP   ";"   ; Is it a comment?
034D   20 0C                  JR   nz,nextToken5   ; If not,continue to the next check
034F                NEXTTOKEN4:      
034F   CD ED 04               CALL   nextChar   ; Get the next character in the comment
0352   FE 21                  CP   " "+1   ; Loop until the next control character
0354   30 F9                  JR   nc,nextToken4   
0356   CD 55 05               CALL   rewindChar   ; Push back the character
0359   18 D0                  JR   nextToken0   ; return with control char
035B                NEXTTOKEN5:      
035B   FE 5F                  CP   "_"   ; Is it an identifier?
035D   28 05                  JR   z,nextToken6   ; If yes,continue to the next check
035F   CD 88 04               CALL   isAlpha   ; If not,check if it's alphabetic
0362   30 37                  JR   nc,nextToken11   ; If not,continue to the next check
0364                NEXTTOKEN6:      
0364   CD E8 03               CALL   ident   ; Parse the identifier
0367   FE 3A                  CP   ":"   ; Is it a label?
0369   20 03                  JR   nz,nextToken7   ; If not,continue to the next check
036B   3E 4C                  LD   a,LABEL_   ; If yes,return A = LABEL HL = string
036D   C9                     RET      
036E                NEXTTOKEN7:      
036E   CD 55 05               CALL   rewindChar   ; Push back the character
0371   22 8F 31               LD   (vHeapPtr),hl   ; Restore string heap pointer to previous location
0374   CD 20 04               CALL   searchOpcode   
0377   20 06                  JR   nz,nextToken8   
0379   6F                     LD   l,a   ; hl = opcode value
037A   26 00                  LD   h,0   
037C   3E 43                  LD   a,OPCODE_   ; Return with OPCODE token
037E   C9                     RET      
037F                NEXTTOKEN8:      
037F   CD 4D 04               CALL   searchOpElem   
0382   20 06                  JR   nz,nextToken9   
0384   6F                     LD   l,a   ; hl = op element value
0385   26 00                  LD   h,0   
0387   3E 4D                  LD   a,OPELEM_   ; Return with OPELEM token
0389   C9                     RET      
038A                NEXTTOKEN9:      
038A   11 00 07               LD   de,directives   ; List of directives to search
038D   CD 08 04               CALL   searchStr   
0390   20 06                  JR   nz,nextToken10   
0392   6F                     LD   l,a   ; hl = directive value
0393   26 00                  LD   h,0   
0395   3E 44                  LD   a,DIRECT_   ; Return with DIRECT token
0397   C9                     RET      
0398                NEXTTOKEN10:      
0398   3E 49                  LD   a,IDENT_   ; Return with IDENT token
039A   C9                     RET      
039B                NEXTTOKEN11:      
039B   21 00 00               LD   hl,0   
039E   FE 24                  CP   "$"   ; Is it a hexadecimal number?
03A0   20 1A                  JR   nz,nextToken13   ; If not,continue to the next check
03A2   CD ED 04               CALL   nextChar   ; Get the next character
03A5   CD 84 04               CALL   isAlphaNum   ; Check if it's the ASSEMBLY pointer
03A8   28 06                  JR   z,nextToken12   ; If not,continue to the next check
03AA   CD 55 05               CALL   rewindChar   ; Push back the character (flags unaffected)
03AD   3E 24                  LD   a,DOLLAR_   ; Return with DOLLAR token
03AF   C9                     RET      ; Return with the DOLLAR token
03B0                NEXTTOKEN12:      
03B0   CD 55 05               CALL   rewindChar   ; Push back the character (flags unaffected)
03B3   CD C0 04               CALL   hexadecimal   ; Process hexadecimal number
03B6   CD 55 05               CALL   rewindChar   ; Push back the character (flags unaffected)
03B9   3E 39                  LD   a,NUM_   ; Return with NUM token
03BB   C9                     RET      
03BC                NEXTTOKEN13:      
03BC   CD 9A 04               CALL   isDigit   ; Check if it's a digit
03BF   30 0C                  JR   nc,nextToken14   ; Jump to the next check
03C1   CD 55 05               CALL   rewindChar   ; Push back the character (flags unaffected)
03C4   CD A1 04               CALL   decimal   ; parse decimal
03C7   CD 55 05               CALL   rewindChar   ; Push back the character (flags unaffected)
03CA   3E 39                  LD   a,NUM_   ; Return with NUM token
03CC   C9                     RET      
03CD                NEXTTOKEN14:      
03CD   FE 2B                  CP   "+"   ; If "+" then return PLUS token
03CF   C8                     RET   z   
03D0   FE 2D                  CP   "-"   ; If "-" then return MINUS token
03D2   C8                     RET   z   
03D3   FE 28                  CP   "("   ; If "(" then return LPAREN token
03D5   C8                     RET   z   
03D6   FE 29                  CP   ")"   ; If ")" then return LPAREN token
03D8   C8                     RET   z   
03D9   FE 2C                  CP   ","   ; If "," then return COMMA token
03DB   C8                     RET   z   
03DC   3E 55                  LD   a,UNKNOWN_   ; Return with UNKNOWN token
03DE   C9                     RET      
03DF                             ; *****************************************************************************
03DF                             ; Routine: pushBackToken
03DF                             ; 
03DF                             ; Purpose:
03DF                             ;    Pushes back a token into the pushback BUFFER to allow the token to be
03DF                             ;    re-read by the nextToken routine.
03DF                             ; 
03DF                             ; Inputs:
03DF                             ;    A  - token type
03DF                             ;    HL - token value
03DF                             ; 
03DF                             ; Outputs:
03DF                             ;    None
03DF                             ; 
03DF                             ; Registers Destroyed:
03DF                             ;    A,DE
03DF                             ; *****************************************************************************
03DF                PUSHBACKTOKEN:      
03DF   CB FF                  SET   7,a   ; Set the high bit of the token type (without affecting flags)
03E1   32 84 31               LD   (vToken),a   ; push back the token
03E4   22 85 31               LD   (vTokenVal),hl   ; push back the token value
03E7   C9                     RET      
03E8                             ; *****************************************************************************
03E8                             ; Routine: ident
03E8                             ; 
03E8                             ; Purpose:
03E8                             ;    Reads characters from the input stream until a charcter which is not an
03E8                             ;    an underscore or an alphanumeric character is encountered. Writes the chars
03E8                             ;    to a Pascal string and updates the top of the STRINGS heap pointer.
03E8                             ;    It also calculates the length of the string and stores it at the beginning
03E8                             ;    of the string.
03E8                             ; 
03E8                             ; Inputs:
03E8                             ;    A - Current character read from the input stream
03E8                             ;    vHeapPtr - Address of the top of heap pointer
03E8                             ; 
03E8                             ; Outputs:
03E8                             ;    A - last character read from the input stream
03E8                             ;    HL - identifier string
03E8                             ; 
03E8                             ; Registers Destroyed:
03E8                             ;    DE,HL
03E8                             ; *****************************************************************************
03E8                IDENT:       
03E8   2A 8F 31               LD   hl,(vHeapPtr)   ; Load the address of the top of STRINGS heap
03EB   E5                     PUSH   hl   ; save start of string
03EC   23                     INC   hl   ; Move to the next byte to skip the length byte
03ED                IDENT1:      
03ED   77                     LD   (hl),a   ; Write the current character to the string BUFFER
03EE   23                     INC   hl   ; Move to the next position in the BUFFER
03EF   E5                     PUSH   hl   
03F0   CD ED 04               CALL   nextChar   ; Get the next character from the input stream
03F3   E1                     POP   hl   
03F4   FE 5F                  CP   "_"   ; Compare with underscore character
03F6   28 F5                  JR   z,ident1   ; If underscore,jump to ident2
03F8   CD 84 04               CALL   isAlphanum   ; Check if the character is alphanumeric
03FB   38 F0                  JR   c,ident1   ; If not alphanumeric,jump to ident3
03FD                IDENT3:      
03FD   22 8F 31               LD   (vHeapPtr),hl   ; Update the top of STRINGS heap pointer
0400   D1                     POP   de   ; restore start of string into de
0401   B7                     OR   a   ; Clear carry
0402   ED 52                  SBC   hl,de   ; Calculate the length of the string (HL = length,DE = string)
0404   2D                     DEC   l   ; reduce by one (length byte)
0405   EB                     EX   de,hl   ; Swap DE and HL (E = length,HL = string)
0406   73                     LD   (hl),e   ; Store the length at the beginning of the string BUFFER
0407   C9                     RET      
0408                             ; *****************************************************************************
0408                             ; Routine: searchStr
0408                             ; 
0408                             ; Purpose:
0408                             ;    Search through a list of Pascal STRINGS for a match.
0408                             ; 
0408                             ; Inputs:
0408                             ;    HL - Points to the string to search for.
0408                             ;    DE - Points to the start of the list of STRINGS.
0408                             ; 
0408                             ; Outputs:
0408                             ;    ZF - True if match,false otherwise.
0408                             ;    A - Index of the matching string if a match is found,or -1 if no match
0408                             ;        is found.
0408                             ;    HL - Points to the string to search for.
0408                             ; 
0408                             ; Destroyed:
0408                             ;    A,B,C,D,E,A",F"
0408                             ; *****************************************************************************
0408                SEARCHSTR:      
0408   06 00                  LD   b,0   ; init b with index 0
040A                SEARCHSTR1:      
040A   CD 66 04               CALL   compareStr   ; compare strings
040D   20 02                  JR   nz,searchStr3   
040F   78                     LD   a,b   ; Load index of match
0410   C9                     RET      ; ZF = true
0411                SEARCHSTR3:      
0411   1A                     LD   a,(de)   ; Load length of current string
0412   3C                     INC   a   ; A = length byte plus length of string
0413   83                     ADD   a,e   ; HL += A,move HL to point to next string
0414   5F                     LD   e,a   
0415   3E 00                  LD   a,0   
0417   8A                     ADC   a,d   
0418   57                     LD   d,a   
0419   04                     INC   b   ; increase index
041A   1A                     LD   a,(de)   ; A = length of next string
041B   B7                     OR   a   ; If A != 0,continue searching
041C   20 EC                  JR   nz,searchStr1   
041E   3D                     DEC   a   ; A = NO_MATCH (i.e.,-1),ZF = false
041F   C9                     RET      
0420                             ; *****************************************************************************
0420                             ; Routine: searchOpcode
0420                             ; 
0420                             ; Purpose:
0420                             ;    Searches for a matching opcode in various lists of opcodes.
0420                             ; 
0420                             ; Inputs:
0420                             ;    HL - Points to the string to search for.
0420                             ; 
0420                             ; Outputs:
0420                             ;    ZF - Set if a match is found,cleared otherwise.
0420                             ;    A  - Contains the index of the matching opcode if a match is found,
0420                             ;         or the last checked index if no match is found.
0420                             ; 
0420                             ; Registers Destroyed:
0420                             ;    A,DE,F
0420                             ; *****************************************************************************
0420                SEARCHOPCODE:      
0420   11 C0 05               LD   de,alu_opcodes   ; Point DE to the list of ALU opcodes
0423   CD 08 04               CALL   searchStr   ; Search for the string in ALU opcodes
0426   C8                     RET   z   ; If match found (ZF set),return
0427   11 A1 05               LD   de,rot_opcodes   ; Point DE to the list of ROT opcodes
042A   CD 08 04               CALL   searchStr   ; Search for the string in ROT opcodes
042D   CB EF                  SET   5,a   ; Set bit 5 in A to indicate ROT opcodes
042F   C8                     RET   z   ; If match found (ZF set),return
0430   11 DF 05               LD   de,bli_opcodes   ; Point DE to the list of BLI opcodes
0433   CD 08 04               CALL   searchStr   ; Search for the string in BLI opcodes
0436   CB F7                  SET   6,a   ; Set bit 6 in A to indicate BLI opcodes
0438   C8                     RET   z   ; If match found (ZF set),return
0439   11 2A 06               LD   de,gen1_opcodes   ; Point DE to the list of general opcodes (set 1)
043C   CD 08 04               CALL   searchStr   ; Search for the string in general opcodes
043F   CB EF                  SET   5,a   ; Set bits 5 & 6 in A to indicate general opcodes (set 1)
0441   CB F7                  SET   6,a   
0443   C8                     RET   z   ; If match found (ZF set),return
0444   11 53 06               LD   de,gen2_opcodes   ; Point DE to the list of general opcodes (set 2)
0447   CD 08 04               CALL   searchStr   ; Search for the string in general opcodes
044A   CB FF                  SET   7,a   ; Set bit 7 in A to indicate general opcodes (set 2)
044C   C9                     RET      ; Return ZF = match
044D                             ; *****************************************************************************
044D                             ; Routine: searchOpElem
044D                             ; 
044D                             ; Purpose:
044D                             ;    Searches for an op element in the lists of 8-bit registers,16-bit registers,
044D                             ;    and flags. Sets appropriate flags based on the type of operand found.
044D                             ; 
044D                             ; Inputs:
044D                             ;    HL - Points to the start of the string to search for.
044D                             ; 
044D                             ; Outputs:
044D                             ;    A  - The index of the matching op element if a match is found,or -1 if no
044D                             ;         match is found.
044D                             ;    ZF - Set if a match is found,cleared otherwise.
044D                             ; 
044D                             ; Registers Destroyed:
044D                             ;    A,DE,HL
044D                             ; *****************************************************************************
044D                             ; reg_    .equ    0x00    ; A,B etc
044D                             ; rp_     .equ    0x08    ; bit 3: 8-bit or 16-bit e.g. A or HL,0xff or 0xffff
044D                             ; flag_   .equ    0x10    ; bit 4: NZ etc
044D                SEARCHOPELEM:      
044D   11 BC 06               LD   de,reg8   ; Point DE to the list of 8-bit register operands
0450   CD 08 04               CALL   searchStr   ; Search for the string in reg8 operands
0453   C8                     RET   z   ; If match found (ZF set),return
0454   11 D1 06               LD   de,reg16   ; Point DE to the list of 16-bit register operands
0457   CD 08 04               CALL   searchStr   ; Search for the string in reg16 operands
045A   CB DF                  SET   3,a   ; Set bit 4 in A to indicate a register operand
045C   C8                     RET   z   ; If match found (ZF set),return
045D   11 EB 06               LD   de,flags   ; Point DE to the list of flag operands
0460   CD 08 04               CALL   searchStr   ; Search for the string in flag operands
0463   CB E7                  SET   4,a   ; Set bit 3 in A to indicate flag operand
0465   C9                     RET      ; Return ZF = match
0466                             ; *****************************************************************************
0466                             ; Routine: compareStr
0466                             ; 
0466                             ; Purpose:
0466                             ;    Compares two Pascal strings. The comparison includes
0466                             ;    the length byte and continues until all characters are compared or a
0466                             ;    mismatch is found.
0466                             ; 
0466                             ; Inputs:
0466                             ;    DE - Points to the start of string1
0466                             ;    HL - Points to the start of string2
0466                             ; 
0466                             ; Outputs:
0466                             ;    ZF - Set if the strings are equal
0466                             ; 
0466                             ; Registers Destroyed:
0466                             ;    A
0466                             ; *****************************************************************************
0466                COMPARESTR:      
0466   C5                     PUSH   bc   ; save BC,DE,HL
0467   D5                     PUSH   de   
0468   E5                     PUSH   hl   
0469   1A                     LD   a,(de)   ; Load length of search string
046A   47                     LD   b,a   ; Copy length to B for looping
046B   04                     INC   b   ; Increase to include length byte
046C                COMPARESTR2:      
046C   1A                     LD   a,(de)   ; Load next character from search string
046D   BE                     CP   (hl)   ; Compare with next character in current string
046E   20 04                  JR   nz,compareStr3   ; break if characters are not equal
0470   13                     INC   de   ; Move to next character in search string
0471   23                     INC   hl   ; Move to next character in current string
0472   10 F8                  DJNZ   compareStr2   ; Loop until all characters compared or mismatch
0474                COMPARESTR3:      
0474   E1                     POP   hl   ; restore BC,DE,HL
0475   D1                     POP   de   
0476   C1                     POP   bc   
0477   C9                     RET      ; Return with ZF set if strings are equal
0478                             ; *****************************************************************************
0478                             ; Routine: isEndOfLine
0478                             ; 
0478                             ; Purpose:
0478                             ;    Checks if the token is the end-of-file (EOF) or a newline (NEWLN).
0478                             ; 
0478                             ; Inputs:
0478                             ;    A - The token to check.
0478                             ; 
0478                             ; Outputs:
0478                             ;    Z flag - Set if the token is EOF or NEWLN, cleared otherwise.
0478                             ; 
0478                             ; Registers Destroyed:
0478                             ;    None
0478                             ; *****************************************************************************
0478                ISENDOFLINE:      
0478   FE 45                  CP   EOF_   ; Compare the current character with EOF_
047A   C8                     RET   z   ; Return if the current character is EOF (Z flag set)
047B   FE 0A                  CP   NEWLN_   ; Compare the current character with NEWLN_
047D   C9                     RET      ; Return (Z flag set if NEWLN_, cleared otherwise)
047E                             ; *****************************************************************************
047E                             ; Routine: isIndexReg
047E                             ; 
047E                             ; Purpose:
047E                             ;    Checks if the current operand is an index register (IX or IY).
047E                             ; 
047E                             ; Inputs:
047E                             ;    A - The operand to check.
047E                             ; 
047E                             ; Outputs:
047E                             ;    ZF - Set if the operand is an index register (IX or IY).
047E                             ; 
047E                             ; Registers Destroyed:
047E                             ;    None
047E                             ; *****************************************************************************
047E                ISINDEXREG:      
047E   FE 0D                  CP   IX_   ; Compare operand with IX
0480   C8                     RET   z   ; Return if equal (ZF is set)
0481   FE 0E                  CP   IY_   ; Compare operand with IY
0483   C9                     RET      ; Return (ZF is set if equal,cleared otherwise)
0484                             ; *****************************************************************************
0484                             ; Routine: isAlphaNum
0484                             ; 
0484                             ; Purpose:
0484                             ;    Checks if the character in the A register is an alphanumeric character
0484                             ;    (either uppercase or lowercase). If the character is alphabetic,it converts
0484                             ;    it to uppercase and sets the carry flag. If the character is not alphabetic,
0484                             ;    it clears the carry flag.
0484                             ; 
0484                             ; Input:
0484                             ;    A - Contains the character to be checked.
0484                             ; 
0484                             ; Output:
0484                             ;    A - Contains the uppercase version of the input character if it was alphabetic.
0484                             ;    CF - Set if the input character was alphabetic,cleared otherwise.
0484                             ; 
0484                             ; Destroyed:
0484                             ;    C
0484                             ; *****************************************************************************
0484                ISALPHANUM:      
0484   CD 9A 04               CALL   isDigit   ; Check if it's a digit
0487   C8                     RET   z   ; If it's not a digit,continue to isAlpha
0488                             ; Falls through to isAlpha
0488                             ; *****************************************************************************
0488                             ; Routine: isAlpha
0488                             ; 
0488                             ; Purpose:
0488                             ;    Checks if the character in the A register is an alphabetic character
0488                             ;    (either uppercase or lowercase). If the character is alphabetic,it converts
0488                             ;    it to uppercase and sets the carry flag.
0488                             ; 
0488                             ; Input:
0488                             ;    A - Contains the character to be checked.
0488                             ; 
0488                             ; Output:
0488                             ;    A - Contains the uppercase version of the input character if it was alphabetic.
0488                             ;    CF - Set if the input character was alphabetic,cleared otherwise.
0488                             ; 
0488                             ; Destroyed:
0488                             ;    None
0488                             ; *****************************************************************************
0488                ISALPHA:      
0488   FE 7B                  CP   "z"+1   ; Compare with "Z" + 1
048A   D0                     RET   nc   ; Return if it's not alphabetic,no carry
048B   FE 61                  CP   "a"   ; Compare with lowercase "a"
048D   38 04                  JR   c,isAlpha1   ; Jump if it"s lower than "a'
048F   D6 20                  SUB   $20   ; It's lowercase alpha so convert lowercase to uppercase
0491   37                     SCF      ; no carry so set carry flag
0492   C9                     RET      
0493                ISALPHA1:      
0493   FE 5B                  CP   "Z"+1   ; Compare with "Z" + 1
0495   D0                     RET   nc   ; Return if it's not alphabetic,no carry
0496   FE 41                  CP   "A"   ; Compare with "A"
0498   3F                     CCF      ; Invert CF to set it if it's alphabetic
0499   C9                     RET      ; Return
049A                             ; *****************************************************************************
049A                             ; Routine: isDigit
049A                             ; 
049A                             ; Purpose:
049A                             ;    Checks if the character in the A register is a decimal digit (0-9). If
049A                             ;    the character is a decimal digit,it sets the carry flag.
049A                             ; 
049A                             ; Input:
049A                             ;    A - Contains the character to be checked.
049A                             ; 
049A                             ; Output:
049A                             ;    CF - Set if the input character was a digit,cleared otherwise.
049A                             ; 
049A                             ; Destroyed:
049A                             ;    None
049A                             ; *****************************************************************************
049A                ISDIGIT:      
049A   FE 3A                  CP   "9"+1   ; Compare with "9" + 1
049C   D0                     RET   nc   ; Return if it's not a digit
049D   FE 30                  CP   "0"   ; Compare with "0"
049F   3F                     CCF      ; Invert CF to set it if it's a digit
04A0   C9                     RET      ; Return
04A1                             ; ; *****************************************************************************
04A1                             ; ; Routine: number
04A1                             ; ;
04A1                             ; ; Purpose:
04A1                             ; ;    Parse a number from the input. Handles both decimal and hexadecimal
04A1                             ; ;    numbers,and supports negative numbers.
04A1                             ; ;
04A1                             ; ; Input:
04A1                             ; ;    A - first char of number
04A1                             ; ;
04A1                             ; ; Output:
04A1                             ; ;    HL - Contains the parsed number.
04A1                             ; ;
04A1                             ; ; Destroyed:
04A1                             ; ;    None
04A1                             ; ; *****************************************************************************
04A1                             ; number:
04A1                             ;     cp "-"
04A1                             ;     jr nz,number1
04A1                             ;     ld a,-1
04A1                             ;     jr number2
04A1                             ; number1:
04A1                             ;     call rewindChar
04A1                             ;     ld a,0
04A1                             ; number2:
04A1                             ;     ld (vTemp1),a
04A1                             ;     cp "$"
04A1                             ;     jr nz,number3
04A1                             ;     call hexadecimal
04A1                             ;     jr number4
04A1                             ; number3:
04A1                             ;     call isDigit
04A1                             ;     jp nz, parseError
04A1                             ;     call rewindChar
04A1                             ;     call decimal
04A1                             ; number4:
04A1                             ;     ld a,(vTemp1)       ; Load the sign from vTemp1
04A1                             ;     inc a               ; Increment to negate if necessary
04A1                             ;     ret nz              ; Return if sign is not zero
04A1                             ;     ex de,hl            ; Negate the value of HL
04A1                             ;     ld hl,0             ; Load zero to clear carry
04A1                             ;     or a                ; Clear carry flag
04A1                             ;     sbc hl,de           ; Subtract DE from HL
04A1                             ;     jp rewindChar       ; Push back the character
04A1                             ; number:
04A1                             ;     cp "-"              ; Check if it's a negative number
04A1                             ;     ld a,-1             ; Set sign flag
04A1                             ;     jr z,number1
04A1                             ;     inc a               ; Set sign flag to positive
04A1                             ; number1:
04A1                             ;     ld (vTemp1),a       ; Store the sign flag in vTemp1
04A1                             ;     call nextChar       ; Get the next character
04A1                             ;     cp "$"              ; Check if it's a hexadecimal number
04A1                             ;     jr nz,number2
04A1                             ;     call hexadecimal            ; If yes,parse hexadecimal number
04A1                             ;     jr number3
04A1                             ; number2:
04A1                             ;     call rewindChar     ; Push back the character
04A1                             ;     call decimal        ; Parse decimal number
04A1                             ; number3:
04A1                             ;     ld a,(vTemp1)       ; Load the sign from vTemp1
04A1                             ;     inc a               ; Increment to negate if necessary
04A1                             ;     ret nz              ; Return if sign is not zero
04A1                             ;     ex de,hl            ; Negate the value of HL
04A1                             ;     ld hl,0             ; Load zero to clear carry
04A1                             ;     or a                ; Clear carry flag
04A1                             ;     sbc hl,de           ; Subtract DE from HL
04A1                             ;     jp rewindChar       ; Push back the character
04A1                             ; number_dec:
04A1                             ;     xor a
04A1                             ;     ld (vTemp1),a       ; Store the sign flag in vTemp1
04A1                             ;     call decimal        ; Parse hexadecimal number
04A1                             ;     jr number3
04A1                             ; number_hex:
04A1                             ;     xor a
04A1                             ;     ld (vTemp1),a       ; Store the sign flag in vTemp1
04A1                             ;     call hexadecimal            ; Parse hexadecimal number
04A1                             ;     jr number3
04A1                             ; *****************************************************************************
04A1                             ; Routine: decimal
04A1                             ; 
04A1                             ; Purpose:
04A1                             ;    Parse a decimal number.
04A1                             ; 
04A1                             ; Input:
04A1                             ;    None
04A1                             ; 
04A1                             ; Output:
04A1                             ;    HL - Parsed number.
04A1                             ; 
04A1                             ; Destroyed:
04A1                             ;    A,DE
04A1                             ; *****************************************************************************
04A1                DECIMAL:      
04A1   21 00 00               LD   hl,0   ; Initialize HL to 0
04A4                DECIMAL1:      
04A4   D5                     PUSH   de   
04A5   E5                     PUSH   hl   
04A6   CD ED 04               CALL   nextChar   ; Get the next character
04A9   E1                     POP   hl   
04AA   D1                     POP   de   
04AB   D6 30                  SUB   "0"   ; Convert ASCII to binary
04AD   D8                     RET   c   ; Return if less than "0"
04AE   FE 0A                  CP   10   ; Compare with 10
04B0   D0                     RET   nc   ; Return if greater than 10
04B1   03                     INC   bc   ; Increment BC to point to next digit
04B2   54 5D                  LD   de,hl   ; Copy HL to DE
04B4   29                     ADD   hl,hl   ; Multiply HL by 2
04B5   29                     ADD   hl,hl   ; Multiply HL by 4
04B6   19                     ADD   hl,de   ; Add DE to HL to multiply by 5
04B7   29                     ADD   hl,hl   ; Multiply HL by 10
04B8   85                     ADD   a,l   ; Add A to HL
04B9   6F                     LD   l,a   ; Store result back in L
04BA   3E 00                  LD   a,0   ; Clear A
04BC   8C                     ADC   a,h   ; Add carry to H
04BD   67                     LD   h,a   ; Store result back in H
04BE   18 E4                  JR   decimal1   ; Jump back to start of loop
04C0                             ; *****************************************************************************
04C0                             ; Routine: hexadecimal
04C0                             ; 
04C0                             ; Purpose:
04C0                             ;    Parse a hexadecimal number.
04C0                             ; 
04C0                             ; Input:
04C0                             ;    None
04C0                             ; 
04C0                             ; Output:
04C0                             ;    HL - Parsed number.
04C0                             ; 
04C0                             ; Destroyed:
04C0                             ;    A
04C0                             ; *****************************************************************************
04C0                HEXADECIMAL:      
04C0   21 00 00               LD   hl,0   ; Initialize HL to 0
04C3                HEXADECIMAL1:      
04C3   E5                     PUSH   hl   
04C4   CD ED 04               CALL   nextChar   ; Get the next character
04C7   E1                     POP   hl   
04C8   FE 30                  CP   "0"   ; Compare with ASCII "0"
04CA   D8                     RET   c   ; Return if less than "0"
04CB   FE 3A                  CP   "9"+1   ; Compare with ASCII "9" + 1
04CD   38 0F                  JR   c,hexadecimal4   ; If less or equal,jump to valid
04CF   FE 61                  CP   "a"   ; Compare with ASCII "a"
04D1   38 02                  JR   c,hexadecimal2   ; If less,jump to hexadecimal2
04D3   D6 20                  SUB   $20   ; Convert lowercase to uppercase
04D5                HEXADECIMAL2:      
04D5   FE 41                  CP   "A"   ; Compare with ASCII "A"
04D7   D8                     RET   c   ; Return if less than "A"
04D8   FE 47                  CP   "F"+1   ; Compare with ASCII "F" + 1
04DA   38 00                  JR   c,hexadecimal3   ; If less or equal,jump to hexadecimal3
04DC                HEXADECIMAL3:      
04DC   D6 37                  SUB   $37   ; Convert ASCII to hexadecimal
04DE                HEXADECIMAL4:      
04DE   D6 30                  SUB   "0"   ; Convert ASCII to numeric value
04E0   D8                     RET   c   ; Return if less than 0 (not a valid digit)
04E1   FE 10                  CP   $10   ; Compare with 16
04E3   D0                     RET   nc   ; Return if greater than 16 (not a valid digit)
04E4   29                     ADD   hl,hl   ; Multiply by 16
04E5   29                     ADD   hl,hl   ; Multiply by 16
04E6   29                     ADD   hl,hl   ; Multiply by 16
04E7   29                     ADD   hl,hl   ; Multiply by 16
04E8   85                     ADD   a,l   ; Add new digit to HL
04E9   6F                     LD   l,a   ; Store result back in L
04EA   C3 C3 04               JP   hexadecimal1   ; Jump back to hexadecimal1 to process next character
04ED                             ; *****************************************************************************
04ED                             ; Routine: nextChar
04ED                             ; 
04ED                             ; Purpose:
04ED                             ;    Fetches the next character from the BUFFER. If the BUFFER is empty or
04ED                             ;    contains a null character (0),it refills the BUFFER by calling nextLine.
04ED                             ; 
04ED                             ; Inputs:
04ED                             ;    None
04ED                             ; 
04ED                             ; Outputs:
04ED                             ;    A - The next character from the BUFFER
04ED                             ; 
04ED                             ; Registers Destroyed:
04ED                             ;    A,D,E,HL
04ED                             ; *****************************************************************************
04ED                NEXTCHAR:      
04ED   21 87 31               LD   hl,vBufferPos   ; Load the offset of BUFFER position variable
04F0   7E                     LD   a,(hl)   ; Load the current position offset in the BUFFER into A
04F1   FE 80                  CP   BUFFER_SIZE   ; Compare with BUFFER size
04F3   CA 04 05               JP   z,nextLine   ; Jump to nextLine if end of BUFFER
04F6   11 00 30               LD   de,BUFFER   ; Load the MSB of the BUFFER's address into D
04F9   83                     ADD   a,e   ; de += a
04FA   5F                     LD   e,a   
04FB   3E 00                  LD   a,0   
04FD   8A                     ADC   a,d   
04FE   57                     LD   d,a   
04FF   1A                     LD   a,(de)   ; Load the character at the current BUFFER position into A
0500   34                     INC   (hl)   ; Increment the BUFFER position offset
0501   FE 0A                  CP   "\n"   ; if a != null return else load a new line into buffer
0503   C0                     RET   nz   
0504                NEXTLINE:      
0504   21 00 30               LD   hl,BUFFER   ; Start of the BUFFER
0507   06 80                  LD   b,BUFFER_SIZE   ; Number of bytes to fill
0509                NEXTLINE1:      
0509   CD 81 00               CALL   getchar   ; Get a character from getchar
050C   FE FF                  CP   EOF   ; is it EOF
050E   28 32                  JR   z,nextLine6   
0510   B7                     OR   a   ; is it NULL?
0511   28 04                  JR   z,nextLine2   
0513   FE 03                  CP   CTRL_C   ; is it ctrl-C ?
0515   20 04                  JR   nz,nextLine3   
0517                NEXTLINE2:      
0517   3E FF                  LD   a,EOF   
0519   18 27                  JR   nextLine6   
051B                NEXTLINE3:      
051B   FE 08                  CP   "\b"   ; Check if character is backspace
051D   20 10                  JR   nz,nextLine4   ; If not,proceed to store the character
051F   3E 80                  LD   a,BUFFER_SIZE   
0521   90                     SUB   b   ; Check if at the start of the buffer
0522   28 E5                  JR   z,nextLine1   ; If at the start,ignore backspace
0524   2B                     DEC   hl   ; Move back in the buffer
0525   04                     INC   b   ; Adjust buffer size counter
0526   CD 74 05               CALL   print   ; Erase the character at the current cursor position
0529   1B 5B 50 00            .CSTR   ESC,"[P"   ; Escape sequence for erasing character
052D   18 DA                  JR   nextLine1   
052F                NEXTLINE4:      
052F   CD 87 00               CALL   putchar   ; Echo character to terminal
0532   FE 09                  CP   "\t"   
0534   20 04                  JR   nz,nextLine5   ; if a == CR or NL replace with null
0536   3E 20                  LD   a," "   
0538   18 08                  JR   nextLine6   
053A                NEXTLINE5:      
053A   FE 0D                  CP   "\r"   ; Check if character is carriage return
053C   20 04                  JR   nz,nextLine6   
053E   3E 0A                  LD   a,"\n"   
0540   18 00                  JR   nextLine6   
0542                NEXTLINE6:      
0542   77                     LD   (hl),a   ; Store the character in the BUFFER
0543   23                     INC   hl   ; Move to the next position in the BUFFER
0544   FE FF                  CP   EOF   ; Break loop if character is end of line
0546   28 06                  JR   z,nextLine7   
0548   FE 0A                  CP   "\n"   ; Break loop if character is end of line
054A   28 02                  JR   z,nextLine7   
054C   10 BB                  DJNZ   nextLine1   ; Repeat until BUFFER is full
054E                NEXTLINE7:      
054E   21 87 31               LD   hl,vBufferPos   
0551   36 00                  LD   (hl),0   
0553   18 98                  JR   nextChar   
0555                             ; *****************************************************************************
0555                             ; Routine: rewindChar
0555                             ; 
0555                             ; Purpose:
0555                             ;    Rewinds the BUFFER position by one character,effectively pushing back the
0555                             ;    BUFFER position by one character in the input stream.
0555                             ; 
0555                             ; Inputs:
0555                             ;    None
0555                             ; 
0555                             ; Outputs:
0555                             ;    None
0555                             ; 
0555                             ; Registers Destroyed:
0555                             ;    A
0555                             ; *****************************************************************************
0555                REWINDCHAR:      
0555   3A 87 31               LD   a,(vBufferPos)   ; Load the current position in the BUFFER into A
0558   B7                     OR   a   ; Check if the BUFFER position is zero
0559   C8                     RET   z   ; If zero,nothing to push back,return
055A   3D                     DEC   a   ; Decrement the BUFFER position
055B   32 87 31               LD   (vBufferPos),a   
055E   C9                     RET      
055F                             ; *****************************************************************************
055F                             ; Routine: prompt
055F                             ; 
055F                             ; Purpose:
055F                             ;    Prints a prompt symbol ("> ") to indicate readiness for user input.
055F                             ; 
055F                             ; Inputs:
055F                             ;    None
055F                             ; 
055F                             ; Outputs:
055F                             ;    None
055F                             ; 
055F                             ; Registers Destroyed:
055F                             ;    A,HL
055F                             ; *****************************************************************************
055F                PROMPT:      
055F   CD 74 05               CALL   print   ; Print the null-terminated string (prompt message)
0562   0D 0A 3E 20 00         .CSTR   "\r\n> "   ; Define the prompt message
0567   C9                     RET      ; Return to the caller
0568                             ; *****************************************************************************
0568                             ; Routine: crlf
0568                             ; 
0568                             ; Purpose:
0568                             ;    Prints a carriage return and line feed (new line) to the output.
0568                             ; 
0568                             ; Inputs:
0568                             ;    None
0568                             ; 
0568                             ; Outputs:
0568                             ;    None
0568                             ; 
0568                             ; Registers Destroyed:
0568                             ;    A,HL
0568                             ; *****************************************************************************
0568                CRLF:        
0568   CD 74 05               CALL   print   ; Print the null-terminated string (carriage return and line feed)
056B   0D 0A 00               .CSTR   "\r\n"   ; Define the carriage return and line feed message
056E   C9                     RET      ; Return to the caller
056F                             ; *****************************************************************************
056F                             ; Routine: error
056F                             ; 
056F                             ; Purpose:
056F                             ;    Prints an error message and halts execution.
056F                             ; 
056F                             ; Inputs:
056F                             ;    (Stack) - The address of the error message to be printed
056F                             ; 
056F                             ; Outputs:
056F                             ;    None
056F                             ; 
056F                             ; Registers Destroyed:
056F                             ;    A,HL
056F                             ; *****************************************************************************
056F                ERROR:       
056F   E1                     POP   hl   ; Retrieve the "return" address which is the address of the error message
0570   CD 7B 05               CALL   printStr   ; Call the routine to print the null-terminated string
0573   76                     HALT      ; Halt the CPU
0574                             ; *****************************************************************************
0574                             ; Routine: print
0574                             ; 
0574                             ; Purpose:
0574                             ;    Prints a null-terminated string starting from the address in HL.
0574                             ; 
0574                             ; Inputs:
0574                             ;    HL - Points to the start of the string to be printed
0574                             ; 
0574                             ; Outputs:
0574                             ;    None
0574                             ; 
0574                             ; Registers Destroyed:
0574                             ;    None
0574                             ; *****************************************************************************
0574                PRINT:       
0574   E3                     EX   (sp),hl   ; Swap HL with the value on the stack to preserve HL
0575   CD 88 05               CALL   printZStr   ; Call the routine to print the null-terminated string
0578   23                     INC   hl   ; Increment HL to skip the null terminator
0579   E3                     EX   (sp),hl   ; Restore the original value of HL from the stack
057A   C9                     RET      ; Return to the caller
057B                             ; *****************************************************************************
057B                             ; Routine: printStr
057B                             ; 
057B                             ; Purpose:
057B                             ;    Prints a Pascal string stored in memory.
057B                             ; 
057B                             ; Inputs:
057B                             ;    HL - Points to the start of the string (first byte is the length)
057B                             ; 
057B                             ; Outputs:
057B                             ;    None
057B                             ; 
057B                             ; Registers Destroyed:
057B                             ;    A,B,HL
057B                             ; *****************************************************************************
057B                PRINTSTR:      
057B   7E                     LD   a,(hl)   ; Load the length of the string
057C   B7                     OR   a   ; Check if the length is zero
057D   C8                     RET   z   ; If zero,return immediately
057E   23                     INC   hl   ; Move HL to the start of the string data
057F   47                     LD   b,a   ; Copy the length to B for looping
0580                PRINTSTR1:      
0580   7E                     LD   a,(hl)   ; Load the next character
0581   CD 87 00               CALL   putchar   ; Call a routine that prints a single character
0584   23                     INC   hl   ; Move to the next character
0585   10 F9                  DJNZ   printStr1   ; Decrement B and jump if not zero
0587   C9                     RET      ; Return from the routine
0588                             ; *****************************************************************************
0588                             ; Routine: printZStr
0588                             ; 
0588                             ; Purpose:
0588                             ;    Prints a null-terminated string stored in memory.
0588                             ; 
0588                             ; Inputs:
0588                             ;    HL - Points to the start of the string to be printed
0588                             ; 
0588                             ; Outputs:
0588                             ;    None
0588                             ; 
0588                             ; Registers Destroyed:
0588                             ;    A,HL
0588                             ; *****************************************************************************
0588                PRINTZSTR:      
0588   18 04                  JR   printZStr2   ; Jump to the loop condition
058A                PRINTZSTR1:      
058A   CD 87 00               CALL   putchar   ; Print the current character
058D   23                     INC   hl   ; Move to the next character
058E                PRINTZSTR2:      
058E   7E                     LD   a,(hl)   ; Load the current character
058F   B7                     OR   a   ; Check if the character is null
0590   20 F8                  JR   nz,printZStr1   ; If not null,continue printing
0592   C9                     RET      ; Return when null character is encountered
0593                             ; *****************************************************************************
0593                             ; Routine: hpush
0593                             ; 
0593                             ; Purpose:
0593                             ;    Pushes a 16-bit value onto the heap. The value to be pushed is in DE,
0593                             ;    and the heap pointer is updated accordingly.
0593                             ; 
0593                             ; Inputs:
0593                             ;    DE - The 16-bit value to be pushed onto the heap.
0593                             ; 
0593                             ; Outputs:
0593                             ;    Updates the heap pointer in vHeapPtr.
0593                             ; 
0593                             ; Registers Destroyed:
0593                             ;    DE,HL
0593                             ; *****************************************************************************
0593                HPUSH:       
0593   D5                     PUSH   de   ; Save DE
0594   EB                     EX   de,hl   ; Exchange DE and HL to move value to DE
0595   2A 8F 31               LD   hl,(vHeapPtr)   ; Load the current top of the heap into HL
0598   72                     LD   (hl),d   ; Store the high byte of DE (now in HL) on the heap
0599   23                     INC   hl   ; Increment HL to point to the next heap position
059A   73                     LD   (hl),e   ; Store the low byte of DE (now in HL) on the heap
059B   23                     INC   hl   ; Increment HL to point to the new top of the heap
059C   22 8F 31               LD   (vHeapPtr),hl   ; Update the heap pointer with the new top of the heap
059F   D1                     POP   de   ; Restore DE
05A0   C9                     RET      ; Return from the subroutine
05A1                             ; ; *****************************************************************************
05A1                             ; ; Routine: hpop
05A1                             ; ;
05A1                             ; ; Purpose:
05A1                             ; ;    Pops a 16-bit value from the heap into HL. The heap pointer is updated
05A1                             ; ;    accordingly.
05A1                             ; ;
05A1                             ; ; Inputs:
05A1                             ; ;    None
05A1                             ; ;
05A1                             ; ; Outputs:
05A1                             ; ;    HL - Contains the 16-bit value popped from the heap.
05A1                             ; ;    Updates the heap pointer in vHeapPtr.
05A1                             ; ;
05A1                             ; ; Registers Destroyed:
05A1                             ; ;    DE,HL
05A1                             ; ; *****************************************************************************
05A1                             ; hpop:
05A1                             ;     push de                 ; Save DE
05A1                             ;     ld hl,(vHeapPtr)       ; Load the current top of the heap into HL
05A1                             ;     dec hl                  ; Decrement HL to point to the high byte of the value
05A1                             ;     ld l,(hl)              ; Load the low byte of the value into L
05A1                             ;     dec hl                  ; Decrement HL to point to the low byte of the value
05A1                             ;     ld h,(hl)              ; Load the high byte of the value into H
05A1                             ;     ld (vHeapPtr),hl       ; Update the heap pointer with the new top of the heap
05A1                             ;     ex de,hl               ; Exchange DE and HL to move the value to HL
05A1                             ;     pop de                  ; Restore DE
05A1                             ;     ret                     ; Return from the subroutine
05A1                             ; *******************************************************************************
05A1                             ; *********  END OF MAIN   ******************************************************
05A1                             ; *******************************************************************************
05A1                ROT_OPCODES:      
05A1   03 52 4C 43            .PSTR   "RLC"   
05A5   03 52 52 43            .PSTR   "RRC"   
05A9   02 52 4C               .PSTR   "RL"   
05AC   02 52 52               .PSTR   "RR"   
05AF   03 53 4C 41            .PSTR   "SLA"   
05B3   03 53 52 41            .PSTR   "SRA"   
05B7   03 53 4C 4C            .PSTR   "SLL"   
05BB   03 53 52 4C            .PSTR   "SRL"   
05BF   00                     .PSTR   ""   ; terminate list with a string of zero length
05C0                ALU_OPCODES:      
05C0   03 41 44 44            .PSTR   "ADD"   
05C4   03 41 44 43            .PSTR   "ADC"   
05C8   03 53 55 42            .PSTR   "SUB"   
05CC   03 53 42 43            .PSTR   "SBC"   
05D0   03 41 4E 44            .PSTR   "AND"   
05D4   03 58 4F 52            .PSTR   "XOR"   
05D8   02 4F 52               .PSTR   "OR"   
05DB   02 43 50               .PSTR   "CP"   
05DE   00                     .PSTR   ""   ; terminate list with a string of zero length
05DF                BLI_OPCODES:      
05DF   03 4C 44 49            .PSTR   "LDI"   
05E3   03 43 50 49            .PSTR   "CPI"   
05E7   03 49 4E 49            .PSTR   "INI"   
05EB   04 4F 55 54 49         .PSTR   "OUTI"   
05F0   03 4C 44 44            .PSTR   "LDD"   
05F4   03 43 50 44            .PSTR   "CPD"   
05F8   03 49 4E 44            .PSTR   "IND"   
05FC   04 4F 55 54 44         .PSTR   "OUTD"   
0601   04 4C 44 49 52         .PSTR   "LDIR"   
0606   04 43 50 49 52         .PSTR   "CPIR"   
060B   04 49 4E 49 52         .PSTR   "INIR"   
0610   04 4F 54 49 52         .PSTR   "OTIR"   
0615   04 4C 44 44 52         .PSTR   "LDDR"   
061A   04 43 50 44 52         .PSTR   "CPDR"   
061F   04 49 4E 44 52         .PSTR   "INDR"   
0624   04 4F 54 44 52         .PSTR   "OTDR"   
0629   00                     .PSTR   ""   ; terminate list with a string of zero length
062A                GEN1_OPCODES:      
062A   03 43 43 46            .PSTR   "CCF"   
062E   03 43 50 4C            .PSTR   "CPL"   
0632   03 44 41 41            .PSTR   "DAA"   
0636   02 44 49               .PSTR   "DI"   
0639   02 45 49               .PSTR   "EI"   
063C   04 48 41 4C 54         .PSTR   "HALT"   
0641   03 4E 4F 50            .PSTR   "NOP"   
0645   04 52 4C 43 41         .PSTR   "RLCA"   
064A   03 52 53 54            .PSTR   "RST"   
064E   03 53 43 46            .PSTR   "SCF"   
0652   00                     .PSTR   ""   ; terminate list with a string of zero length
0653                GEN2_OPCODES:      
0653   03 42 49 54            .PSTR   "BIT"   
0657   04 43 41 4C 4C         .PSTR   "CALL"   
065C   03 44 45 43            .PSTR   "DEC"   
0660   04 44 4A 4E 5A         .PSTR   "DJNZ"   
0665   02 45 58               .PSTR   "EX"   
0668   03 45 58 58            .PSTR   "EXX"   
066C   02 49 4D               .PSTR   "IM"   
066F   02 49 4E               .PSTR   "IN"   
0672   03 49 4E 43            .PSTR   "INC"   
0676   02 4A 50               .PSTR   "JP"   
0679   02 4A 52               .PSTR   "JR"   
067C   02 4C 44               .PSTR   "LD"   
067F   03 4E 45 47            .PSTR   "NEG"   
0683   03 4F 55 54            .PSTR   "OUT"   
0687   03 50 4F 50            .PSTR   "POP"   
068B   04 50 55 53 48         .PSTR   "PUSH"   
0690   03 52 45 53            .PSTR   "RES"   
0694   03 52 45 54            .PSTR   "RET"   
0698   04 52 45 54 49         .PSTR   "RETI"   
069D   04 52 45 54 4E         .PSTR   "RETN"   
06A2   03 52 4C 41            .PSTR   "RLA"   
06A6   03 52 4C 44            .PSTR   "RLD"   
06AA   03 52 52 41            .PSTR   "RRA"   
06AE   04 52 52 43 41         .PSTR   "RRCA"   
06B3   03 52 52 44            .PSTR   "RRD"   
06B7   03 53 45 54            .PSTR   "SET"   
06BB   00                     .PSTR   ""   ; terminate list with a string of zero length
06BC                REG8:        
06BC   01 42                  .PSTR   "B"   
06BE   01 43                  .PSTR   "C"   
06C0   01 44                  .PSTR   "D"   
06C2   01 45                  .PSTR   "E"   
06C4   01 48                  .PSTR   "H"   
06C6   01 4C                  .PSTR   "L"   
06C8   01 20                  .PSTR   " "   ; don't match, stand-in for (HL)
06CA   01 41                  .PSTR   "A"   
06CC   01 49                  .PSTR   "I"   
06CE   01 52                  .PSTR   "R"   
06D0   00                     .PSTR   ""   ; terminate list with a string of zero length
06D1                REG16:       
06D1   02 42 43               .PSTR   "BC"   
06D4   02 44 45               .PSTR   "DE"   
06D7   02 48 4C               .PSTR   "HL"   
06DA   02 53 50               .PSTR   "SP"   
06DD   02 49 58               .PSTR   "IX"   
06E0   02 49 59               .PSTR   "IY"   
06E3   03 41 46 27            .PSTR   "AF'"   
06E7   02 41 46               .PSTR   "AF"   ; NOTE: AF has the same code as SP in some instructions
06EA   00                     .PSTR   ""   ; terminate list with a string of zero length
06EB                FLAGS:       
06EB   02 4E 5A               .PSTR   "NZ"   
06EE   01 5A                  .PSTR   "Z"   
06F0   02 4E 43               .PSTR   "NC"   
06F3   01 43                  .PSTR   "C"   
06F5   02 50 4F               .PSTR   "PO"   
06F8   02 50 45               .PSTR   "PE"   
06FB   01 50                  .PSTR   "P"   
06FD   01 4D                  .PSTR   "M"   
06FF   00                     .PSTR   ""   ; terminate list with a string of zero length
0700                DIRECTIVES:      
0700   06 2E 41 4C 49 47 4E   .PSTR   ".ALIGN"   
0707   03 2E 44 42            .PSTR   ".DB"   
070B   04 2E 4F 52 47         .PSTR   ".ORG"   
0710   04 2E 53 45 54         .PSTR   ".SET"   
0715   00                     .PSTR   ""   ; terminate list with a string of zero length
0716                             ; *******************************************************************************
0716                             ; *********  END OF DATA   ******************************************************
0716                             ; *******************************************************************************
3000                          .ORG   RAMSTART   
3000                          ALIGN   $100   
3000                BUFFER:   DS   BUFFER_SIZE   ; line BUFFER,page aligned
3080                          DS   $100   
3180                STACK:       ; grows down
3180                VTEMP1:   DS   2   ; temp var 1
3182                VTEMP2:   DS   2   ; temp var 2
3184                VTOKEN:   DS   1   ; BUFFER for pushed back token
3185                VTOKENVAL:   DS   2   ; BUFFER for pushed back token value
3187                VBUFFERPOS:   DS   2   ; pointer to char position into input BUFFER
3189                VASMPTR:   DS   2   ; pointer to ASSEMBLY point
318B                VSYMPTR:   DS   2   ; pointer to last symbol
318D                VEXPRPTR:   DS   2   ; pointer to last expression
318F                VHEAPPTR:   DS   2   ; pointer to Heap
3191                VOPCODE:   DS   1   
3192                VOPERAND1:   DS   1   
3193                VOPERAND2:   DS   1   
3194                VOPEXPR:   DS   2   
3196                VOPDISP:   DS   2   
3198                RST08:    DS   2   
319A                RST10:    DS   2   
319C                RST18:    DS   2   
319E                RST20:    DS   2   
31A0                RST28:    DS   2   
31A2                RST30:    DS   2   
31A4                BAUD:     DS   2   
31A6                INTVEC:   DS   2   
31A8                NMIVEC:   DS   2   
31AA                GETCVEC:   DS   2   
31AC                PUTCVEC:   DS   2   
31AE                HEAP:     DS   HEAP_SIZE   ; expression heap - grows up
32AE                ASSEMBLY:      
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000   31 80 31               LD   sp,STACK   
4003                             ; ------------------------------------------------------------
4003                             ; call describe
4003                             ; .cstr "It should do nothing"
4003                             ; call test
4003                             ; .db 0
4003                             ; call expect
4003                             ; .db 0
4003                             ; ------------------------------------------------------------
4003                             ; call describe
4003                             ; .cstr "parse opcode without operands"
4003                             ; call test
4003                             ; .db "halt"
4003                             ; .db 0
4003                             ; call expectOpData
4003                             ; .db HALT_, -1, -1
4003                             ; ------------------------------------------------------------
4003   CD 4D 40               CALL   describe   
4006   70 61 72 73 65 20 6F 70 63 6F 64 65 20 77 69 74 68 20 61 6E 20 69 6D 6D 65 64 69 61 74 65 20 6F 70 65 72 61 6E 64 00 .CSTR   "parse opcode with an immediate operand"   
402D   CD 56 40               CALL   test   
4030   6A 70 20 30            DB   "jp 0"   
4034   00                     DB   0   
4035   CD 8A 40               CALL   expectOpData   
4038   89 FF 20               DB   JP_,-1,immed_   
403B                             ; ------------------------------------------------------------
403B                             ; .cstr "It should assemble one instruction"
403B                             ; call expect
403B                             ; .db 01,$76
403B   CD 74 05               CALL   print   
403E   0D 0A 44 6F 6E 65 21 00 .CSTR   "\r\nDone!"   
4046   76                     HALT      
4047                             ; *****************************************************************************
4047                             ; Test variables
4047                             ; *****************************************************************************
4047                TBDESC:      
4047   00 00                  DW   0   ; Address of the description
4049                TBTEXT:      
4049   00 00                  DW   0   ; Address of the test text
404B                TBPTR:       
404B   00 00                  DW   0   ; Pointer to the current position in the test text
404D                             ; *****************************************************************************
404D                             ; Routine: describe
404D                             ; 
404D                             ; Purpose:
404D                             ;    Stores the address of a description string in tbDesc and then skips the string.
404D                             ; 
404D                             ; Inputs:
404D                             ;    HL - Address of the description string
404D                             ; 
404D                             ; Outputs:
404D                             ;    None
404D                             ; 
404D                             ; Registers Destroyed:
404D                             ;    HL
404D                             ; *****************************************************************************
404D                DESCRIBE:      
404D   E1                     POP   hl   ; Retrieve the return address (address of the description string)
404E   22 47 40               LD   (tbDesc),hl   ; Store the address in tbDesc
4051   CD 38 41               CALL   skipZStr   ; Skip the description string
4054   23                     INC   hl   ; Move to the next byte after the null terminator
4055   E9                     JP   (hl)   ; Jump to the address specified by the next byte
4056                             ; *****************************************************************************
4056                             ; Routine: test
4056                             ; 
4056                             ; Purpose:
4056                             ;    Stores the address of a test text in tbText and tbPtr,and then skips the string.
4056                             ; 
4056                             ; Inputs:
4056                             ;    HL - Address of the test text
4056                             ; 
4056                             ; Outputs:
4056                             ;    None
4056                             ; 
4056                             ; Registers Destroyed:
4056                             ;    HL
4056                             ; *****************************************************************************
4056                TEST:        
4056   E1                     POP   hl   ; Retrieve the return address (address of the test text)
4057   22 49 40               LD   (tbText),hl   ; Store the address in tbText
405A   22 4B 40               LD   (tbPtr),hl   ; Initialize tbPtr with the address of the test text
405D   CD 38 41               CALL   skipZStr   ; Skip the test text string
4060   23                     INC   hl   ; Move to the next byte after the null terminator
4061   E5                     PUSH   hl   ; push new return address
4062   CD 98 01               CALL   init   ; Initialize the environment
4065   21 0E 41               LD   hl,testGetCharImpl   ; Load the address of testGetCharImpl
4068   22 AA 31               LD   (GETCVEC),hl   ; Set the GETCVEC to point to testGetCharImpl
406B   C3 F7 01               JP   statementList   
406E                             ; *****************************************************************************
406E                             ; Routine: expect
406E                             ; 
406E                             ; Purpose:
406E                             ;    Initializes the environment,sets up the testGetCharImpl,executes the statementList,
406E                             ;    and compares the result with the expected output.
406E                             ; 
406E                             ; Inputs:
406E                             ;    None
406E                             ; 
406E                             ; Outputs:
406E                             ;    None
406E                             ; 
406E                             ; Registers Destroyed:
406E                             ;    HL,DE
406E                             ; *****************************************************************************
406E                EXPECT:      
406E   E1                     POP   hl   ; Retrieve the return address
406F   11 AE 32               LD   de,ASSEMBLY   ; Load the expected output address into DE
4072   CD 66 04               CALL   compareStr   ; Compare the result with the expected output
4075   20 01                  JR   nz,expect1   ; If comparison fails,jump to expect1
4077   E9                     JP   (hl)   ; If comparison succeeds,jump to the return address
4078                EXPECT1:      
4078   CD 74 05               CALL   print   ; Print the failure message
407B   46 61 69 6C 65 64 21 00 .CSTR   "Failed!"   
4083   2A 49 40               LD   hl,(tbText)   ; Load the address of the test text
4086   CD 88 05               CALL   printZStr   ; Print the test text
4089   76                     HALT      ; Halt the program
408A                             ; *****************************************************************************
408A                             ; Routine: expectOpData
408A                             ; 
408A                             ; Purpose:
408A                             ;    Validate the sequence of opcode and operands against expected values.
408A                             ;    Print error messages if any mismatch occurs and jump to the next handler.
408A                             ; 
408A                             ; Inputs:
408A                             ;    DE - Points to the expected op data
408A                             ;    HL - Points to the actual op data
408A                             ; 
408A                             ; Outputs:
408A                             ;    Updates DE and HL as it processes each byte in the sequences.
408A                             ; 
408A                             ; Registers Destroyed:
408A                             ;    A,DE,HL
408A                             ; *****************************************************************************
408A                EXPECTOPDATA:      
408A   D1                     POP   de   ; Load DE with the return address pointing to the actual opcode/operand sequence
408B   21 91 31               LD   hl,vOpcode   ; Load HL with the address of the expected opcode/operand sequence
408E   CD C6 40               CALL   expectOpItem   ; Compare actual and expected opcode
4091   57 72 6F 6E 67 20 6F 70 63 6F 64 65 00 .CSTR   "Wrong opcode"   ; Error message if the opcode does not match
409E   CD C6 40               CALL   expectOpItem   ; Compare actual and expected first operand
40A1   57 72 6F 6E 67 20 6F 70 65 72 61 6E 64 20 31 00 .CSTR   "Wrong operand 1"   ; Error message if the first operand does not match
40B1   CD C6 40               CALL   expectOpItem   ; Compare actual and expected second operand
40B4   57 72 6F 6E 67 20 6F 70 65 72 61 6E 64 20 32 00 .CSTR   "Wrong operand 2"   ; Error message if the second operand does not match
40C4   EB                     EX   de,hl   
40C5   E9                     JP   (hl)   ; Jump to the address after expected op data
40C6                             ; *****************************************************************************
40C6                             ; Routine: expectOpItem
40C6                             ; 
40C6                             ; Purpose:
40C6                             ;    Compare the actual and expected opcode/operand byte and handle mismatches.
40C6                             ; 
40C6                             ; Inputs:
40C6                             ;    DE - Points to the expected byte.
40C6                             ;    HL - Points to the actual byte.
40C6                             ; 
40C6                             ; Outputs:
40C6                             ;    Increments DE and HL to the next byte in the sequences.
40C6                             ;    Prints error messages if any mismatch occurs.
40C6                             ; 
40C6                             ; Registers Destroyed:
40C6                             ;    A,DE,HL
40C6                             ; *****************************************************************************
40C6                EXPECTOPITEM:      
40C6   1A                     LD   a,(de)   ; Load the expected byte into A from DE
40C7   BE                     CP   (hl)   ; Compare expected with actual
40C8   13                     INC   de   ; Move DE to point to next expected byte
40C9   23                     INC   hl   ; Move HL to point to next actual byte
40CA   20 07                  JR   nz,expectOpItem1   ; Return if the bytes match
40CC   E3                     EX   (sp),hl   ; HL = expected string to skip (sp) = actual*
40CD   CD 38 41               CALL   skipZStr   ; Skip the message string
40D0   23                     INC   hl   ; Move to the next byte after the null terminator
40D1   E3                     EX   (sp),hl   ; HL = actual* (SP) = expected string to skip
40D2   C9                     RET      ; return after message string
40D3                EXPECTOPITEM1:      
40D3   CD 68 05               CALL   crlf   
40D6   CD 68 05               CALL   crlf   
40D9   2A 47 40               LD   hl,(tbDesc)   ; Load the address of the test text
40DC   CD 88 05               CALL   printZStr   ; Print the test description
40DF   CD 68 05               CALL   crlf   
40E2   CD 68 05               CALL   crlf   
40E5   CD 74 05               CALL   print   ; Print error messages if the bytes do not match
40E8   45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "Expected: "   ; Print "Expected"
40F3   1A                     LD   a,(de)   ; Load the expected byte into A for printing
40F4   CD 24 41               CALL   printHex2   ; Print the expected byte in hexadecimal
40F7   CD 68 05               CALL   crlf   
40FA   CD 74 05               CALL   print   ; Print "Received"
40FD   41 63 74 75 61 6C 3A 20 00 .CSTR   "Actual: "   
4106   7E                     LD   a,(hl)   ; Load the actual byte into A for printing
4107   CD 24 41               CALL   printHex2   ; Print the actual byte in hexadecimal
410A   CD 68 05               CALL   crlf   
410D   76                     HALT      ; Halt the program
410E                             ; *****************************************************************************
410E                             ; Routine: testGetCharImpl
410E                             ; 
410E                             ; Purpose:
410E                             ;    Retrieves the next character from the test text.
410E                             ; 
410E                             ; Inputs:
410E                             ;    tbPtr - Pointer to the current position in the test text
410E                             ; 
410E                             ; Outputs:
410E                             ;    A - The next character from the test text
410E                             ; 
410E                             ; Registers Destroyed:
410E                             ;    A,HL
410E                             ; *****************************************************************************
410E                TESTGETCHARIMPL:      
410E   E5                     PUSH   hl   ; Save HL register
410F   2A 4B 40               LD   hl,(tbPtr)   ; Load the current pointer from tbPtr
4112   7E                     LD   a,(hl)   ; Load the next character from the test text
4113   23                     INC   hl   ; Move to the next character
4114   22 4B 40               LD   (tbPtr),hl   ; Update tbPtr with the new pointer
4117   E1                     POP   hl   ; Restore HL register
4118   C9                     RET      ; Return with the character in A
4119                             ; *****************************************************************************
4119                             ; Routine: printHex
4119                             ; 
4119                             ; Purpose:
4119                             ;    Displays the 16-bit value in the HL register as a hexadecimal number.
4119                             ; 
4119                             ; Inputs:
4119                             ;    HL - The 16-bit value to be displayed.
4119                             ; 
4119                             ; Outputs:
4119                             ;    None
4119                             ; 
4119                             ; Registers Destroyed:
4119                             ;    A,C
4119                             ; *****************************************************************************
4119                PRINTHEX:      
4119   C5                     PUSH   bc   ; Preserve the BC register pair
411A   7C                     LD   a,h   ; Load the high byte of HL into A
411B   CD 24 41               CALL   printHex2   ; Print the high byte as hex
411E   7D                     LD   a,l   ; Load the low byte of HL into A
411F   CD 24 41               CALL   printHex2   ; Print the low byte as hex
4122   C1                     POP   bc   ; Restore the BC register pair
4123   C9                     RET      ; Return from the routine
4124                             ; *****************************************************************************
4124                             ; Routine: printHex2
4124                             ; 
4124                             ; Purpose:
4124                             ;    Prints a single byte in hexadecimal format by printing its high and low nibbles.
4124                             ; 
4124                             ; Inputs:
4124                             ;    A - The byte to be printed.
4124                             ; 
4124                             ; Outputs:
4124                             ;    None.
4124                             ; 
4124                             ; Registers Destroyed:
4124                             ;    A,C
4124                             ; *****************************************************************************
4124                PRINTHEX2:      
4124   4F                     LD   c,a   ; Copy the value in A to C
4125   1F                     RRA      ; Shift the high nibble to the low nibble
4126   1F                     RRA      
4127   1F                     RRA      
4128   1F                     RRA      
4129   CD 2D 41               CALL   printHex3   ; Print the high nibble as hex
412C   79                     LD   a,c   ; Restore the original value to A
412D                PRINTHEX3:      
412D   E6 0F                  AND   0x0F   ; Mask out the upper nibble
412F   C6 90                  ADD   a,0x90   ; Add 0x90 to adjust for the ASCII range
4131   27                     DAA      ; Decimal adjust A to get the correct ASCII value
4132   CE 40                  ADC   a,0x40   ; Add 0x40 to get the ASCII character for 0-9/A-F
4134   27                     DAA      ; Decimal adjust A to get the correct ASCII value
4135   C3 87 00               JP   putchar   ; Jump to the putchar routine to display the character
4138                             ; 
4138                             ; *****************************************************************************
4138                             ; Routine: skipZStr
4138                             ; 
4138                             ; Purpose:
4138                             ;    Skips over a null-terminated string in memory,advancing the HL register
4138                             ;    to the character following the null terminator.
4138                             ; 
4138                             ; Inputs:
4138                             ;    HL - Points to the start of the string to skip.
4138                             ; 
4138                             ; Outputs:
4138                             ;    HL - Points to the character immediately after the null terminator.
4138                             ; 
4138                             ; Registers Destroyed:
4138                             ;    A
4138                             ; *****************************************************************************
4138                SKIPZSTR:      
4138   18 01                  JR   skipZStr2   ; Jump to the character loading step
413A                SKIPZSTR1:      
413A   23                     INC   hl   ; Move to the next character
413B                SKIPZSTR2:      
413B   7E                     LD   a,(hl)   ; Load the current character
413C   B7                     OR   a   ; Check if the character is null
413D   20 FB                  JR   nz,skipZStr1   ; If not null,continue to the next character
413F   C9                     RET      ; Return when a null character is found
4140                             ; call test
4140                             ; ; .db "label1: LD A,42;comment\r\n"
4140                             ; ; .db "halt"
4140                             ; .db 0


ROMSTART:           0000 DEFINED AT LINE 1 IN constants.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 116 IN IOSerial.asm
                    > USED AT LINE 122 IN IOSerial.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 134 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 146 IN IOSerial.asm
                    > USED AT LINE 152 IN IOSerial.asm
                    > USED AT LINE 158 IN IOSerial.asm
                    > USED AT LINE 200 IN IOSerial.asm
                    > USED AT LINE 17 IN MAIN.asm
RAMSTART:           3000 DEFINED AT LINE 2 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            3000 DEFINED AT LINE 3 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 4 IN constants.asm
EOF:                00-1 DEFINED AT LINE 6 IN constants.asm
                    > USED AT LINE 424 IN MAIN.asm
                    > USED AT LINE 1124 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
NULL:               0000 DEFINED AT LINE 7 IN constants.asm
                    > USED AT LINE 342 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 8 IN constants.asm
                    > USED AT LINE 1128 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 9 IN constants.asm
ESC:                001B DEFINED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 1145 IN MAIN.asm
NO_MATCH:           00-1 DEFINED AT LINE 11 IN constants.asm
BUFFER_SIZE:        0080 DEFINED AT LINE 13 IN constants.asm
                    > USED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 5 IN ram.asm
HEAP_SIZE:          0100 DEFINED AT LINE 14 IN constants.asm
                    > USED AT LINE 39 IN ram.asm
TOKENS:             0000 DEFINED AT LINE 16 IN constants.asm
COLON_:             000: DEFINED AT LINE 18 IN constants.asm
COMMA_:             000, DEFINED AT LINE 19 IN constants.asm
                    > USED AT LINE 185 IN MAIN.asm
                    > USED AT LINE 333 IN MAIN.asm
DIRECT_:            000D DEFINED AT LINE 20 IN constants.asm
                    > USED AT LINE 170 IN MAIN.asm
                    > USED AT LINE 488 IN MAIN.asm
DOLLAR_:            000$ DEFINED AT LINE 21 IN constants.asm
                    > USED AT LINE 504 IN MAIN.asm
EOF_:               000E DEFINED AT LINE 22 IN constants.asm
                    > USED AT LINE 123 IN MAIN.asm
                    > USED AT LINE 426 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
IDENT_:             000I DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 492 IN MAIN.asm
LABEL_:             000L DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 461 IN MAIN.asm
LPAREN_:            000( DEFINED AT LINE 25 IN constants.asm
                    > USED AT LINE 229 IN MAIN.asm
MINUS_:             000- DEFINED AT LINE 26 IN constants.asm
NEWLN_:             000
 DEFINED AT LINE 27 IN constants.asm
                    > USED AT LINE 125 IN MAIN.asm
                    > USED AT LINE 437 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
NUM_:               0009 DEFINED AT LINE 28 IN constants.asm
                    > USED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
OPCODE_:            000C DEFINED AT LINE 29 IN constants.asm
                    > USED AT LINE 167 IN MAIN.asm
                    > USED AT LINE 471 IN MAIN.asm
OPELEM_:            000M DEFINED AT LINE 30 IN constants.asm
                    > USED AT LINE 226 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
                    > USED AT LINE 479 IN MAIN.asm
PLUS_:              000+ DEFINED AT LINE 31 IN constants.asm
RPAREN_:            000) DEFINED AT LINE 32 IN constants.asm
                    > USED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 330 IN MAIN.asm
UNKNOWN_:           000U DEFINED AT LINE 33 IN constants.asm
                    > USED AT LINE 535 IN MAIN.asm
ALU_:               0000 DEFINED AT LINE 35 IN constants.asm
                    > USED AT LINE 43 IN constants.asm
                    > USED AT LINE 44 IN constants.asm
                    > USED AT LINE 45 IN constants.asm
                    > USED AT LINE 46 IN constants.asm
                    > USED AT LINE 47 IN constants.asm
                    > USED AT LINE 48 IN constants.asm
                    > USED AT LINE 49 IN constants.asm
                    > USED AT LINE 50 IN constants.asm
ROT_:               0020 DEFINED AT LINE 36 IN constants.asm
                    > USED AT LINE 54 IN constants.asm
                    > USED AT LINE 55 IN constants.asm
                    > USED AT LINE 56 IN constants.asm
                    > USED AT LINE 57 IN constants.asm
                    > USED AT LINE 58 IN constants.asm
                    > USED AT LINE 59 IN constants.asm
                    > USED AT LINE 60 IN constants.asm
                    > USED AT LINE 61 IN constants.asm
BLI_:               0040 DEFINED AT LINE 37 IN constants.asm
                    > USED AT LINE 65 IN constants.asm
                    > USED AT LINE 66 IN constants.asm
                    > USED AT LINE 67 IN constants.asm
                    > USED AT LINE 68 IN constants.asm
                    > USED AT LINE 69 IN constants.asm
                    > USED AT LINE 70 IN constants.asm
                    > USED AT LINE 71 IN constants.asm
                    > USED AT LINE 72 IN constants.asm
                    > USED AT LINE 73 IN constants.asm
                    > USED AT LINE 74 IN constants.asm
                    > USED AT LINE 75 IN constants.asm
                    > USED AT LINE 76 IN constants.asm
                    > USED AT LINE 77 IN constants.asm
                    > USED AT LINE 78 IN constants.asm
                    > USED AT LINE 79 IN constants.asm
                    > USED AT LINE 80 IN constants.asm
GEN1_:              0060 DEFINED AT LINE 38 IN constants.asm
                    > USED AT LINE 84 IN constants.asm
                    > USED AT LINE 85 IN constants.asm
                    > USED AT LINE 86 IN constants.asm
                    > USED AT LINE 87 IN constants.asm
                    > USED AT LINE 88 IN constants.asm
                    > USED AT LINE 89 IN constants.asm
                    > USED AT LINE 90 IN constants.asm
                    > USED AT LINE 91 IN constants.asm
                    > USED AT LINE 93 IN constants.asm
GEN2_:              0080 DEFINED AT LINE 39 IN constants.asm
                    > USED AT LINE 92 IN constants.asm
                    > USED AT LINE 97 IN constants.asm
                    > USED AT LINE 98 IN constants.asm
                    > USED AT LINE 99 IN constants.asm
                    > USED AT LINE 100 IN constants.asm
                    > USED AT LINE 101 IN constants.asm
                    > USED AT LINE 102 IN constants.asm
                    > USED AT LINE 103 IN constants.asm
                    > USED AT LINE 104 IN constants.asm
                    > USED AT LINE 105 IN constants.asm
                    > USED AT LINE 106 IN constants.asm
                    > USED AT LINE 107 IN constants.asm
                    > USED AT LINE 108 IN constants.asm
                    > USED AT LINE 109 IN constants.asm
                    > USED AT LINE 110 IN constants.asm
                    > USED AT LINE 111 IN constants.asm
                    > USED AT LINE 112 IN constants.asm
                    > USED AT LINE 113 IN constants.asm
                    > USED AT LINE 114 IN constants.asm
                    > USED AT LINE 115 IN constants.asm
                    > USED AT LINE 116 IN constants.asm
                    > USED AT LINE 117 IN constants.asm
                    > USED AT LINE 118 IN constants.asm
                    > USED AT LINE 119 IN constants.asm
                    > USED AT LINE 120 IN constants.asm
                    > USED AT LINE 121 IN constants.asm
                    > USED AT LINE 122 IN constants.asm
ALU_IDX:            0000 DEFINED AT LINE 41 IN constants.asm
ADD_:               0000 DEFINED AT LINE 43 IN constants.asm
ADC_:               0001 DEFINED AT LINE 44 IN constants.asm
SUB_:               0002 DEFINED AT LINE 45 IN constants.asm
SBC_:               0003 DEFINED AT LINE 46 IN constants.asm
AND_:               0004 DEFINED AT LINE 47 IN constants.asm
XOR_:               0005 DEFINED AT LINE 48 IN constants.asm
OR_:                0006 DEFINED AT LINE 49 IN constants.asm
CP_:                0007 DEFINED AT LINE 50 IN constants.asm
ROT_IDX:            0000 DEFINED AT LINE 52 IN constants.asm
RLC_:               0020 DEFINED AT LINE 54 IN constants.asm
RRC_:               0021 DEFINED AT LINE 55 IN constants.asm
RL_:                0022 DEFINED AT LINE 56 IN constants.asm
RR_:                0023 DEFINED AT LINE 57 IN constants.asm
SLA_:               0024 DEFINED AT LINE 58 IN constants.asm
SRA_:               0025 DEFINED AT LINE 59 IN constants.asm
SLL_:               0026 DEFINED AT LINE 60 IN constants.asm
SRL_:               0027 DEFINED AT LINE 61 IN constants.asm
BLI_IDX:            0000 DEFINED AT LINE 63 IN constants.asm
LDI_:               0040 DEFINED AT LINE 65 IN constants.asm
CPI_:               0041 DEFINED AT LINE 66 IN constants.asm
INI_:               0042 DEFINED AT LINE 67 IN constants.asm
OUTI_:              0043 DEFINED AT LINE 68 IN constants.asm
LDD_:               0044 DEFINED AT LINE 69 IN constants.asm
CPD_:               0045 DEFINED AT LINE 70 IN constants.asm
IND_:               0046 DEFINED AT LINE 71 IN constants.asm
OUTD_:              0047 DEFINED AT LINE 72 IN constants.asm
LDIR_:              0048 DEFINED AT LINE 73 IN constants.asm
CPIR_:              0049 DEFINED AT LINE 74 IN constants.asm
INIR_:              004A DEFINED AT LINE 75 IN constants.asm
OTIR_:              004B DEFINED AT LINE 76 IN constants.asm
LDDR_:              004C DEFINED AT LINE 77 IN constants.asm
CPDR_:              004D DEFINED AT LINE 78 IN constants.asm
INDR_:              004E DEFINED AT LINE 79 IN constants.asm
OTDR_:              004F DEFINED AT LINE 80 IN constants.asm
GEN1_IDX:           0000 DEFINED AT LINE 82 IN constants.asm
CCF_:               0060 DEFINED AT LINE 84 IN constants.asm
CPL_:               0061 DEFINED AT LINE 85 IN constants.asm
DAA_:               0062 DEFINED AT LINE 86 IN constants.asm
DI_:                0063 DEFINED AT LINE 87 IN constants.asm
EI_:                0064 DEFINED AT LINE 88 IN constants.asm
HALT_:              0065 DEFINED AT LINE 89 IN constants.asm
NOP_:               0066 DEFINED AT LINE 90 IN constants.asm
RLCA_:              0067 DEFINED AT LINE 91 IN constants.asm
RST_:               0088 DEFINED AT LINE 92 IN constants.asm
SCF_:               0069 DEFINED AT LINE 93 IN constants.asm
GEN2_IDX:           0000 DEFINED AT LINE 95 IN constants.asm
BIT_:               0080 DEFINED AT LINE 97 IN constants.asm
CALL_:              0081 DEFINED AT LINE 98 IN constants.asm
DEC_:               0082 DEFINED AT LINE 99 IN constants.asm
DJNZ_:              0083 DEFINED AT LINE 100 IN constants.asm
EX_:                0084 DEFINED AT LINE 101 IN constants.asm
EXX_:               0085 DEFINED AT LINE 102 IN constants.asm
IM_:                0086 DEFINED AT LINE 103 IN constants.asm
IN_:                0087 DEFINED AT LINE 104 IN constants.asm
INC_:               0088 DEFINED AT LINE 105 IN constants.asm
JP_:                0089 DEFINED AT LINE 106 IN constants.asm
                    > USED AT LINE 50
JR_:                008A DEFINED AT LINE 107 IN constants.asm
LD_:                008B DEFINED AT LINE 108 IN constants.asm
NEG_:               008C DEFINED AT LINE 109 IN constants.asm
OUT_:               008D DEFINED AT LINE 110 IN constants.asm
POP_:               008E DEFINED AT LINE 111 IN constants.asm
PUSH_:              008F DEFINED AT LINE 112 IN constants.asm
RES_:               0090 DEFINED AT LINE 113 IN constants.asm
RET_:               0091 DEFINED AT LINE 114 IN constants.asm
RETI_:              0092 DEFINED AT LINE 115 IN constants.asm
RETN_:              0093 DEFINED AT LINE 116 IN constants.asm
RLA_:               0094 DEFINED AT LINE 117 IN constants.asm
RLD_:               0095 DEFINED AT LINE 118 IN constants.asm
RRA_:               0096 DEFINED AT LINE 119 IN constants.asm
RRCA_:              0097 DEFINED AT LINE 120 IN constants.asm
RRD_:               0098 DEFINED AT LINE 121 IN constants.asm
SET_:               0003 DEFINED AT LINE 171 IN constants.asm
REG_:               0000 DEFINED AT LINE 124 IN constants.asm
RP_:                0008 DEFINED AT LINE 125 IN constants.asm
                    > USED AT LINE 146 IN constants.asm
                    > USED AT LINE 147 IN constants.asm
                    > USED AT LINE 148 IN constants.asm
                    > USED AT LINE 149 IN constants.asm
                    > USED AT LINE 150 IN constants.asm
                    > USED AT LINE 151 IN constants.asm
                    > USED AT LINE 152 IN constants.asm
                    > USED AT LINE 153 IN constants.asm
FLAG_:              0010 DEFINED AT LINE 126 IN constants.asm
                    > USED AT LINE 157 IN constants.asm
                    > USED AT LINE 158 IN constants.asm
                    > USED AT LINE 159 IN constants.asm
                    > USED AT LINE 160 IN constants.asm
                    > USED AT LINE 161 IN constants.asm
                    > USED AT LINE 162 IN constants.asm
                    > USED AT LINE 163 IN constants.asm
                    > USED AT LINE 164 IN constants.asm
IMMED_:             0020 DEFINED AT LINE 127 IN constants.asm
                    > USED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
MEM_:               0040 DEFINED AT LINE 128 IN constants.asm
                    > USED AT LINE 261 IN MAIN.asm
IDX_:               0080 DEFINED AT LINE 129 IN constants.asm
REG8_IDX:           0000 DEFINED AT LINE 131 IN constants.asm
B_:                 0000 DEFINED AT LINE 133 IN constants.asm
C_:                 0013 DEFINED AT LINE 160 IN constants.asm
D_:                 0002 DEFINED AT LINE 135 IN constants.asm
E_:                 0003 DEFINED AT LINE 136 IN constants.asm
H_:                 0004 DEFINED AT LINE 137 IN constants.asm
L_:                 0005 DEFINED AT LINE 138 IN constants.asm
MHL_:               0006 DEFINED AT LINE 139 IN constants.asm
A_:                 0007 DEFINED AT LINE 140 IN constants.asm
I_:                 0008 DEFINED AT LINE 141 IN constants.asm
R_:                 0009 DEFINED AT LINE 142 IN constants.asm
REG16_IDX:          0000 DEFINED AT LINE 144 IN constants.asm
BC_:                0008 DEFINED AT LINE 146 IN constants.asm
DE_:                0009 DEFINED AT LINE 147 IN constants.asm
HL_:                000A DEFINED AT LINE 148 IN constants.asm
SP_:                000B DEFINED AT LINE 149 IN constants.asm
IX_:                000D DEFINED AT LINE 150 IN constants.asm
                    > USED AT LINE 818 IN MAIN.asm
IY_:                000E DEFINED AT LINE 151 IN constants.asm
                    > USED AT LINE 820 IN MAIN.asm
AFP_:               000C DEFINED AT LINE 152 IN constants.asm
AF_:                000F DEFINED AT LINE 153 IN constants.asm
FLAG_IDX:           0000 DEFINED AT LINE 155 IN constants.asm
NZ_:                0010 DEFINED AT LINE 157 IN constants.asm
Z_:                 0011 DEFINED AT LINE 158 IN constants.asm
NC_:                0012 DEFINED AT LINE 159 IN constants.asm
PO_:                0014 DEFINED AT LINE 161 IN constants.asm
PE_:                0015 DEFINED AT LINE 162 IN constants.asm
P_:                 0016 DEFINED AT LINE 163 IN constants.asm
M_:                 0017 DEFINED AT LINE 164 IN constants.asm
DIRECTIVE_IDX:      0000 DEFINED AT LINE 166 IN constants.asm
ALIGN_:             0000 DEFINED AT LINE 168 IN constants.asm
DB_:                0001 DEFINED AT LINE 169 IN constants.asm
ORG_:               0002 DEFINED AT LINE 170 IN constants.asm
TEC_1:              0001 DEFINED AT LINE 175 IN constants.asm
RC2014:             0000 DEFINED AT LINE 176 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 178 IN constants.asm
LOADER:             0000 DEFINED AT LINE 180 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 181 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 33 IN IOSerial.asm
                    > USED AT LINE 478 IN IOSerial.asm
                    > USED AT LINE 500 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 34 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 322 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 36 IN IOSerial.asm
                    > USED AT LINE 326 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 477 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 46 IN IOSerial.asm
                    > USED AT LINE 499 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 50 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 51 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 52 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 53 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 54 IN IOSerial.asm
                    > USED AT LINE 499 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 55 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 56 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 57 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 61 IN IOSerial.asm
                    > USED AT LINE 499 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 62 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 63 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 64 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 68 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 72 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 73 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 74 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 75 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 76 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 77 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 78 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 79 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 87 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 88 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 89 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 90 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 91 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 92 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 93 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 94 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 108 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 109 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 113 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 163 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 483 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 187 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 193 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 196 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 305 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 308 IN IOSerial.asm
                    > USED AT LINE 312 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 320 IN IOSerial.asm
                    > USED AT LINE 469 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 321 IN IOSerial.asm
                    > USED AT LINE 325 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 1123 IN MAIN.asm
PUTCHAR:            0087 DEFINED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1336 IN MAIN.asm
                    > USED AT LINE 258 IN test.lib.asm
RESET:              008D DEFINED AT LINE 457 IN IOSerial.asm
                    > USED AT LINE 114 IN IOSerial.asm
START:              0180 DEFINED AT LINE 37 IN MAIN.asm
INIT:               0198 DEFINED AT LINE 60 IN MAIN.asm
                    > USED AT LINE 39 IN MAIN.asm
                    > USED AT LINE 58 IN test.lib.asm
PARSE:              01BD DEFINED AT LINE 93 IN MAIN.asm
                    > USED AT LINE 42 IN MAIN.asm
PARSEERROR:         01E4 DEFINED AT LINE 99 IN MAIN.asm
                    > USED AT LINE 126 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
                    > USED AT LINE 267 IN MAIN.asm
STATEMENTLIST:      01F7 DEFINED AT LINE 120 IN MAIN.asm
                    > USED AT LINE 94 IN MAIN.asm
                    > USED AT LINE 127 IN MAIN.asm
                    > USED AT LINE 61 IN test.lib.asm
STATEMENT:          0206 DEFINED AT LINE 146 IN MAIN.asm
                    > USED AT LINE 122 IN MAIN.asm
STATEMENT1:         022C DEFINED AT LINE 166 IN MAIN.asm
                    > USED AT LINE 160 IN MAIN.asm
INSTRUCTION:        0235 DEFINED AT LINE 175 IN MAIN.asm
                    > USED AT LINE 168 IN MAIN.asm
INSTRUCTION1:       025C DEFINED AT LINE 196 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
DIRECTIVE:          0268 DEFINED AT LINE 203 IN MAIN.asm
                    > USED AT LINE 171 IN MAIN.asm
OPERAND:            0269 DEFINED AT LINE 225 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
OPERAND1:           027A DEFINED AT LINE 239 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
OPERAND3:           0291 DEFINED AT LINE 254 IN MAIN.asm
OPERAND2:           0295 DEFINED AT LINE 258 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
OPERAND4:           029F DEFINED AT LINE 264 IN MAIN.asm
                    > USED AT LINE 246 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
                    > USED AT LINE 262 IN MAIN.asm
EXPRESSION:         02A9 DEFINED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 249 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
EXPRESSION1:        02C4 DEFINED AT LINE 303 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 327 IN MAIN.asm
                    > USED AT LINE 339 IN MAIN.asm
EXPRESSION2:        02DC DEFINED AT LINE 317 IN MAIN.asm
                    > USED AT LINE 312 IN MAIN.asm
EXPRESSION3:        02EA DEFINED AT LINE 329 IN MAIN.asm
                    > USED AT LINE 320 IN MAIN.asm
                    > USED AT LINE 323 IN MAIN.asm
EXPRESSION4:        02F9 DEFINED AT LINE 341 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 337 IN MAIN.asm
ADDSYMBOL:          0302 DEFINED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 163 IN MAIN.asm
NEXTTOKEN:          031B DEFINED AT LINE 407 IN MAIN.asm
                    > USED AT LINE 121 IN MAIN.asm
                    > USED AT LINE 164 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
                    > USED AT LINE 188 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
NEXTTOKEN0:         032B DEFINED AT LINE 417 IN MAIN.asm
                    > USED AT LINE 411 IN MAIN.asm
                    > USED AT LINE 449 IN MAIN.asm
NEXTTOKEN1:         032E DEFINED AT LINE 420 IN MAIN.asm
                    > USED AT LINE 423 IN MAIN.asm
NEXTTOKEN2:         033C DEFINED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 425 IN MAIN.asm
NEXTTOKEN2A:        0348 DEFINED AT LINE 436 IN MAIN.asm
                    > USED AT LINE 431 IN MAIN.asm
                    > USED AT LINE 433 IN MAIN.asm
NEXTTOKEN3:         034B DEFINED AT LINE 440 IN MAIN.asm
                    > USED AT LINE 435 IN MAIN.asm
NEXTTOKEN4:         034F DEFINED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
NEXTTOKEN5:         035B DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 442 IN MAIN.asm
NEXTTOKEN6:         0364 DEFINED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
NEXTTOKEN7:         036E DEFINED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 460 IN MAIN.asm
NEXTTOKEN8:         037F DEFINED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
NEXTTOKEN9:         038A DEFINED AT LINE 482 IN MAIN.asm
                    > USED AT LINE 476 IN MAIN.asm
NEXTTOKEN10:        0398 DEFINED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
NEXTTOKEN11:        039B DEFINED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
NEXTTOKEN12:        03B0 DEFINED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
NEXTTOKEN13:        03BC DEFINED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
NEXTTOKEN14:        03CD DEFINED AT LINE 524 IN MAIN.asm
                    > USED AT LINE 516 IN MAIN.asm
PUSHBACKTOKEN:      03DF DEFINED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 344 IN MAIN.asm
IDENT:              03E8 DEFINED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
IDENT1:             03ED DEFINED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 597 IN MAIN.asm
IDENT3:             03FD DEFINED AT LINE 598 IN MAIN.asm
SEARCHSTR:          0408 DEFINED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
                    > USED AT LINE 678 IN MAIN.asm
                    > USED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 688 IN MAIN.asm
                    > USED AT LINE 694 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
SEARCHSTR1:         040A DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
SEARCHSTR3:         0411 DEFINED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
SEARCHOPCODE:       0420 DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 467 IN MAIN.asm
SEARCHOPELEM:       044D DEFINED AT LINE 722 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
COMPARESTR:         0466 DEFINED AT LINE 757 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 83 IN test.lib.asm
COMPARESTR2:        046C DEFINED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
COMPARESTR3:        0474 DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
ISENDOFLINE:        0478 DEFINED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 147 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
                    > USED AT LINE 336 IN MAIN.asm
ISINDEXREG:         047E DEFINED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
ISALPHANUM:         0484 DEFINED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 500 IN MAIN.asm
                    > USED AT LINE 596 IN MAIN.asm
ISALPHA:            0488 DEFINED AT LINE 867 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
ISALPHA1:           0493 DEFINED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
ISDIGIT:            049A DEFINED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
DECIMAL:            04A1 DEFINED AT LINE 1011 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
DECIMAL1:           04A4 DEFINED AT LINE 1013 IN MAIN.asm
                    > USED AT LINE 1034 IN MAIN.asm
HEXADECIMAL:        04C0 DEFINED AT LINE 1052 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
HEXADECIMAL1:       04C3 DEFINED AT LINE 1054 IN MAIN.asm
                    > USED AT LINE 1083 IN MAIN.asm
HEXADECIMAL2:       04D5 DEFINED AT LINE 1065 IN MAIN.asm
                    > USED AT LINE 1063 IN MAIN.asm
HEXADECIMAL3:       04DC DEFINED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1069 IN MAIN.asm
HEXADECIMAL4:       04DE DEFINED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1061 IN MAIN.asm
NEXTCHAR:           04ED DEFINED AT LINE 1102 IN MAIN.asm
                    > USED AT LINE 421 IN MAIN.asm
                    > USED AT LINE 445 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 1056 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
NEXTLINE:           0504 DEFINED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 1106 IN MAIN.asm
NEXTLINE1:          0509 DEFINED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1169 IN MAIN.asm
NEXTLINE2:          0517 DEFINED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 1127 IN MAIN.asm
NEXTLINE3:          051B DEFINED AT LINE 1135 IN MAIN.asm
                    > USED AT LINE 1129 IN MAIN.asm
NEXTLINE4:          052F DEFINED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 1137 IN MAIN.asm
NEXTLINE5:          053A DEFINED AT LINE 1156 IN MAIN.asm
                    > USED AT LINE 1152 IN MAIN.asm
NEXTLINE6:          0542 DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 1154 IN MAIN.asm
                    > USED AT LINE 1158 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
NEXTLINE7:          054E DEFINED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
REWINDCHAR:         0555 DEFINED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
                    > USED AT LINE 465 IN MAIN.asm
                    > USED AT LINE 503 IN MAIN.asm
                    > USED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 518 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
PROMPT:             055F DEFINED AT LINE 1217 IN MAIN.asm
CRLF:               0568 DEFINED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 159 IN test.lib.asm
                    > USED AT LINE 160 IN test.lib.asm
                    > USED AT LINE 163 IN test.lib.asm
                    > USED AT LINE 164 IN test.lib.asm
                    > USED AT LINE 169 IN test.lib.asm
                    > USED AT LINE 174 IN test.lib.asm
ERROR:              056F DEFINED AT LINE 1259 IN MAIN.asm
PRINT:              0574 DEFINED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 40 IN MAIN.asm
                    > USED AT LINE 95 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 60
                    > USED AT LINE 88 IN test.lib.asm
                    > USED AT LINE 165 IN test.lib.asm
                    > USED AT LINE 170 IN test.lib.asm
PRINTSTR:           057B DEFINED AT LINE 1303 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
PRINTSTR1:          0580 DEFINED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1313 IN MAIN.asm
PRINTZSTR:          0588 DEFINED AT LINE 1332 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 91 IN test.lib.asm
                    > USED AT LINE 162 IN test.lib.asm
PRINTZSTR1:         058A DEFINED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 1342 IN MAIN.asm
PRINTZSTR2:         058E DEFINED AT LINE 1339 IN MAIN.asm
                    > USED AT LINE 1333 IN MAIN.asm
HPUSH:              0593 DEFINED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 298 IN MAIN.asm
                    > USED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 307 IN MAIN.asm
                    > USED AT LINE 309 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 369 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ROT_OPCODES:        05A1 DEFINED AT LINE 1 IN data.asm
                    > USED AT LINE 677 IN MAIN.asm
ALU_OPCODES:        05C0 DEFINED AT LINE 13 IN data.asm
                    > USED AT LINE 673 IN MAIN.asm
BLI_OPCODES:        05DF DEFINED AT LINE 25 IN data.asm
                    > USED AT LINE 682 IN MAIN.asm
GEN1_OPCODES:       062A DEFINED AT LINE 45 IN data.asm
                    > USED AT LINE 687 IN MAIN.asm
GEN2_OPCODES:       0653 DEFINED AT LINE 59 IN data.asm
                    > USED AT LINE 693 IN MAIN.asm
REG8:               06BC DEFINED AT LINE 89 IN data.asm
                    > USED AT LINE 723 IN MAIN.asm
REG16:              06D1 DEFINED AT LINE 103 IN data.asm
                    > USED AT LINE 727 IN MAIN.asm
FLAGS:              06EB DEFINED AT LINE 115 IN data.asm
                    > USED AT LINE 732 IN MAIN.asm
DIRECTIVES:         0700 DEFINED AT LINE 127 IN data.asm
                    > USED AT LINE 483 IN MAIN.asm
BUFFER:             3000 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 69 IN MAIN.asm
                    > USED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
STACK:              3180 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 458 IN IOSerial.asm
                    > USED AT LINE 38 IN MAIN.asm
                    > USED AT LINE 15
VTEMP1:             3180 DEFINED AT LINE 9 IN ram.asm
VTEMP2:             3182 DEFINED AT LINE 10 IN ram.asm
VTOKEN:             3184 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 66 IN MAIN.asm
                    > USED AT LINE 408 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
VTOKENVAL:          3185 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 414 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
VBUFFERPOS:         3187 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 67 IN MAIN.asm
                    > USED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
VASMPTR:            3189 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 73 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
VSYMPTR:            318B DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
VEXPRPTR:           318D DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 295 IN MAIN.asm
                    > USED AT LINE 300 IN MAIN.asm
VHEAPPTR:           318F DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 71 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 367 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1369 IN MAIN.asm
VOPCODE:            3191 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 152 IN MAIN.asm
                    > USED AT LINE 177 IN MAIN.asm
                    > USED AT LINE 114 IN test.lib.asm
VOPERAND1:          3192 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
                    > USED AT LINE 200 IN MAIN.asm
VOPERAND2:          3193 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
VOPEXPR:            3194 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
VOPDISP:            3196 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
RST08:              3198 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 118 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
RST10:              319A DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 124 IN IOSerial.asm
                    > USED AT LINE 461 IN IOSerial.asm
RST18:              319C DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 130 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RST20:              319E DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 136 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
RST28:              31A0 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
RST30:              31A2 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 148 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
BAUD:               31A4 DEFINED AT LINE 33 IN ram.asm
INTVEC:             31A6 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 154 IN IOSerial.asm
                    > USED AT LINE 466 IN IOSerial.asm
NMIVEC:             31A8 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 202 IN IOSerial.asm
                    > USED AT LINE 467 IN IOSerial.asm
GETCVEC:            31AA DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 447 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
                    > USED AT LINE 60 IN test.lib.asm
PUTCVEC:            31AC DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 453 IN IOSerial.asm
                    > USED AT LINE 472 IN IOSerial.asm
HEAP:               31AE DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 70 IN MAIN.asm
ASSEMBLY:           32AE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 72 IN MAIN.asm
                    > USED AT LINE 82 IN test.lib.asm
TESTSSTART:         4000 DEFINED AT LINE 14
                    > USED AT LINE 6
TBDESC:             4047 DEFINED AT LINE 5 IN test.lib.asm
                    > USED AT LINE 30 IN test.lib.asm
                    > USED AT LINE 161 IN test.lib.asm
TBTEXT:             4049 DEFINED AT LINE 7 IN test.lib.asm
                    > USED AT LINE 53 IN test.lib.asm
                    > USED AT LINE 90 IN test.lib.asm
TBPTR:              404B DEFINED AT LINE 9 IN test.lib.asm
                    > USED AT LINE 54 IN test.lib.asm
                    > USED AT LINE 195 IN test.lib.asm
                    > USED AT LINE 198 IN test.lib.asm
DESCRIBE:           404D DEFINED AT LINE 28 IN test.lib.asm
                    > USED AT LINE 42
TEST:               4056 DEFINED AT LINE 51 IN test.lib.asm
                    > USED AT LINE 45
EXPECT:             406E DEFINED AT LINE 80 IN test.lib.asm
EXPECT1:            4078 DEFINED AT LINE 87 IN test.lib.asm
                    > USED AT LINE 84 IN test.lib.asm
EXPECTOPDATA:       408A DEFINED AT LINE 112 IN test.lib.asm
                    > USED AT LINE 49
EXPECTOPITEM:       40C6 DEFINED AT LINE 146 IN test.lib.asm
                    > USED AT LINE 116 IN test.lib.asm
                    > USED AT LINE 119 IN test.lib.asm
                    > USED AT LINE 122 IN test.lib.asm
EXPECTOPITEM1:      40D3 DEFINED AT LINE 158 IN test.lib.asm
                    > USED AT LINE 151 IN test.lib.asm
TESTGETCHARIMPL:    410E DEFINED AT LINE 193 IN test.lib.asm
                    > USED AT LINE 59 IN test.lib.asm
PRINTHEX:           4119 DEFINED AT LINE 218 IN test.lib.asm
PRINTHEX2:          4124 DEFINED AT LINE 243 IN test.lib.asm
                    > USED AT LINE 168 IN test.lib.asm
                    > USED AT LINE 173 IN test.lib.asm
                    > USED AT LINE 221 IN test.lib.asm
                    > USED AT LINE 223 IN test.lib.asm
PRINTHEX3:          412D DEFINED AT LINE 252 IN test.lib.asm
                    > USED AT LINE 249 IN test.lib.asm
SKIPZSTR:           4138 DEFINED AT LINE 277 IN test.lib.asm
                    > USED AT LINE 31 IN test.lib.asm
                    > USED AT LINE 55 IN test.lib.asm
                    > USED AT LINE 153 IN test.lib.asm
SKIPZSTR1:          413A DEFINED AT LINE 280 IN test.lib.asm
                    > USED AT LINE 286 IN test.lib.asm
SKIPZSTR2:          413B DEFINED AT LINE 283 IN test.lib.asm
                    > USED AT LINE 278 IN test.lib.asm
