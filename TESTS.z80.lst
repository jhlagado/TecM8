0000                             ; .engine mycomputer
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $3000   
0000                ROMSIZE:   EQU   $3000   
0000                RAMSIZE:   EQU   $0800   
0000                EOF:      EQU   -1   
0000                NULL:     EQU   0   
0000                CTRL_C:   EQU   3   
0000                CTRL_H:   EQU   8   
0000                ESC:      EQU   27   
0000                NO_MATCH:   EQU   -1   
0000                BUFFER_SIZE:   EQU   $80   
0000                STRS_SIZE:   EQU   $100   
0000                HEAP_SIZE:   EQU   $100   
0000                TOKENS:      
0000                COLON_:   EQU   ":"   
0000                COMMA_:   EQU   ","   
0000                DIRECT_:   EQU   "D"   
0000                DOLLAR_:   EQU   "$"   
0000                EOF_:     EQU   "E"   
0000                IDENT_:   EQU   "I"   
0000                LABEL_:   EQU   "L"   
0000                LPAREN_:   EQU   "("   
0000                NEWLN_:   EQU   "\n"   
0000                NUM_:     EQU   "9"   
0000                OPCODE_:   EQU   "C"   
0000                OPELEM_:   EQU   "M"   ; op element: reg, rp, flag
0000                RPAREN_:   EQU   ")"   
0000                UNKNOWN_:   EQU   "U"   
0000                ALU_:     EQU   0x00   
0000                ROT_:     EQU   0x20   
0000                BLI_:     EQU   0x40   
0000                GEN1_:    EQU   0x60   
0000                GEN2_:    EQU   0x80   
0000                ALU_IDX:      
0000                ADD_:     EQU   0 | alu_   
0000                ADC_:     EQU   1 | alu_   
0000                SUB_:     EQU   2 | alu_   
0000                SBC_:     EQU   3 | alu_   
0000                AND_:     EQU   4 | alu_   
0000                XOR_:     EQU   5 | alu_   
0000                OR_:      EQU   6 | alu_   
0000                CP_:      EQU   7 | alu_   
0000                ROT_IDX:      
0000                RLC_:     EQU   0 | rot_   
0000                RRC_:     EQU   1 | rot_   
0000                RL_:      EQU   2 | rot_   
0000                RR_:      EQU   3 | rot_   
0000                SLA_:     EQU   4 | rot_   
0000                SRA_:     EQU   5 | rot_   
0000                SLL_:     EQU   6 | rot_   
0000                SRL_:     EQU   7 | rot_   
0000                BLI_IDX:      
0000                LDI_:     EQU   00 | bli_   
0000                CPI_:     EQU   01 | bli_   
0000                INI_:     EQU   02 | bli_   
0000                OUTI_:    EQU   03 | bli_   
0000                LDD_:     EQU   04 | bli_   
0000                CPD_:     EQU   05 | bli_   
0000                IND_:     EQU   06 | bli_   
0000                OUTD_:    EQU   07 | bli_   
0000                LDIR_:    EQU   08 | bli_   
0000                CPIR_:    EQU   09 | bli_   
0000                INIR_:    EQU   10 | bli_   
0000                OTIR_:    EQU   11 | bli_   
0000                LDDR_:    EQU   12 | bli_   
0000                CPDR_:    EQU   13 | bli_   
0000                INDR_:    EQU   14 | bli_   
0000                OTDR_:    EQU   15 | bli_   
0000                GEN1_IDX:      
0000                CCF_:     EQU   00 | gen1_   
0000                CPL_:     EQU   01 | gen1_   
0000                DAA_:     EQU   02 | gen1_   
0000                DI_:      EQU   03 | gen1_   
0000                EI_:      EQU   04 | gen1_   
0000                HALT_:    EQU   05 | gen1_   
0000                NOP_:     EQU   06 | gen1_   
0000                RLCA_:    EQU   07 | gen1_   
0000                RST_:     EQU   08 | gen2_   
0000                SCF_:     EQU   09 | gen1_   
0000                GEN2_IDX:      
0000                BIT_:     EQU   00 | gen2_   
0000                CALL_:    EQU   01 | gen2_   
0000                DEC_:     EQU   02 | gen2_   
0000                DJNZ_:    EQU   03 | gen2_   
0000                EX_:      EQU   04 | gen2_   
0000                EXX_:     EQU   05 | gen2_   
0000                IM_:      EQU   06 | gen2_   
0000                IN_:      EQU   07 | gen2_   
0000                INC_:     EQU   08 | gen2_   
0000                JP_:      EQU   09 | gen2_   
0000                JR_:      EQU   10 | gen2_   
0000                LD_:      EQU   11 | gen2_   
0000                NEG_:     EQU   12 | gen2_   
0000                OUT_:     EQU   13 | gen2_   
0000                POP_:     EQU   14 | gen2_   
0000                PUSH_:    EQU   15 | gen2_   
0000                RES_:     EQU   16 | gen2_   
0000                RET_:     EQU   17 | gen2_   
0000                RETI_:    EQU   18 | gen2_   
0000                RETN_:    EQU   19 | gen2_   
0000                RLA_:     EQU   20 | gen2_   
0000                RLD_:     EQU   21 | gen2_   
0000                RRA_:     EQU   22 | gen2_   
0000                RRCA_:    EQU   23 | gen2_   
0000                RRD_:     EQU   24 | gen2_   
0000                SET_:     EQU   25 | gen2_   
0000                REG_:     EQU   0x00   ; A, B etc
0000                RP_:      EQU   0x08   ; bit 3: register pair e.g. HL, DE
0000                FLAG_:    EQU   0x10   ; bit 4: flag NZ etc
0000                IMMED_:   EQU   0x20   ; bit 5: immediate 0xff or 0xffff
0000                MEM_:     EQU   0x40   ; bit 6: memory ref (HL) or (0xffff)
0000                IDX_:     EQU   0x80   ; bit 7: indexed (IX+dd)
0000                REG8_IDX:      ; 8-bit registers
0000                B_:       EQU   0   ; B
0000                C_:       EQU   1   ; C
0000                D_:       EQU   2   ; D
0000                E_:       EQU   3   ; E
0000                H_:       EQU   4   ; H
0000                L_:       EQU   5   ; L
0000                MHL_:     EQU   6   ; (HL)
0000                A_:       EQU   7   ; A
0000                I_:       EQU   8   ; I
0000                R_:       EQU   9   ; R
0000                REG16_IDX:      ; 16-bit registers
0000                BC_:      EQU   0 | rp_   
0000                DE_:      EQU   1 | rp_   
0000                HL_:      EQU   2 | rp_   
0000                SP_:      EQU   3 | rp_   
0000                IX_:      EQU   5 | rp_   
0000                IY_:      EQU   6 | rp_   
0000                AFP_:     EQU   4 | rp_   ; AF' (prime)
0000                AF_:      EQU   7 | rp_   ; NOTE: AF has the same code as SP in some instructions
0000                FLAG_IDX:      
0000                NZ_:      EQU   0 | flag_   
0000                Z_:       EQU   1 | flag_   
0000                NC_:      EQU   2 | flag_   
0000                C_:       EQU   3 | flag_   
0000                PO_:      EQU   4 | flag_   
0000                PE_:      EQU   5 | flag_   
0000                P_:       EQU   6 | flag_   
0000                M_:       EQU   7 | flag_   
0000                DIRECTIVE_IDX:      
0000                ALIGN_:   EQU   0   
0000                DB_:      EQU   1   
0000                ORG_:     EQU   2   
0000                SET_:     EQU   3   
0000                             ; -----------------------------------------------------------------------------------------------
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                             ; *************************************************************************
0000                             ; 
0000                             ;       Serial routines 
0000                             ; 
0000                             ;       written by Craig Jones 
0000                             ; 
0000                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
0000                             ; 
0000                             ;       see the LICENSE file in this repo for more information 
0000                             ; 
0000                             ; *****************************************************************************
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8D 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 9A 31               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 9C 31               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 9E 31               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A A0 31               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A A2 31               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A A4 31               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A A8 31               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A AA 31               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   E5                     PUSH   HL   
0082   2A AC 31               LD   HL,(GETCVEC)   
0085   E3                     EX   (SP),HL   
0086   C9                     RET      
0087                             ; 
0087                PUTCHAR:      
0087   E5                     PUSH   HL   
0088   2A AE 31               LD   HL,(PUTCVEC)   
008B   E3                     EX   (SP),HL   
008C   C9                     RET      
008D                             ; 
008D                RESET:       
008D   31 80 31               LD   SP,stack   
0090   21 5F 00               LD   HL,IntRet   
0093   22 9A 31               LD   (RST08),HL   
0096   22 9C 31               LD   (RST10),HL   
0099   22 9E 31               LD   (RST18),HL   
009C   22 A0 31               LD   (RST20),HL   
009F   22 A2 31               LD   (RST28),HL   
00A2   22 A4 31               LD   (RST30),HL   
00A5   22 A8 31               LD   (INTVEC),HL   
00A8   22 AA 31               LD   (NMIVEC),HL   
00AB                             ; 
00AB   21 78 00               LD   HL,RXDATA   
00AE   22 AC 31               LD   (GETCVEC),HL   
00B1   21 6B 00               LD   HL,TXDATA   
00B4   22 AE 31               LD   (PUTCVEC),HL   
00B7                             ; 
00B7                          IF   TEC_1   
00B7                          IF   BITBANG = 0   
00B7                             ; 
00B7   3E 03                  LD   a,MRESET   
00B9   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00BB                             ; 
00BB                          ENDIF      
00BB                          ENDIF      
00BB                             ; 
00BB   CD 50 00               CALL   PWRUP   
00BE   ED 56                  IM   1   
00C0   FB                     EI      
00C1                             ; 
00C1                          IF   TEC_1   
00C1                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00C1                          ELSE      ;6850      
00C1                             ; 
00C1   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C3   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C5                             ; 
00C5                          ENDIF      
00C5                          ENDIF      
00C5                             ; 
00C5                             ; 
00C5   C3 00 40               JP   testsStart   
00C8                             ; *************************************************************************
00C8                             ; 
00C8                             ;       TecM8 1.0 Assembler for the Tec-1
00C8                             ; 
00C8                             ;       by John Hardy
00C8                             ; 
00C8                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C8                             ; 
00C8                             ;       see the LICENSE file in this repo for more information
00C8                             ; 
00C8                             ; *****************************************************************************
00C8                             ; **************************************************************************
00C8                             ; Page 0  Initialisation
00C8                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put TecM8 code from here	
0180                             ; *****************************************************************************
0180                             ; Routine: start
0180                             ; 
0180                             ; Purpose:
0180                             ;    Entry point of TecM8. Initializes the STACK pointer, calls the initialization
0180                             ;    routine, prints TecM8 version information, and jumps to the parsing routine.
0180                             ; 
0180                             ; Inputs:
0180                             ;    None
0180                             ; 
0180                             ; Outputs:
0180                             ;    None
0180                             ; 
0180                             ; Registers Destroyed:
0180                             ;    A, HL
0180                             ; *****************************************************************************
0180                START:       
0180   31 80 31               LD   sp,STACK   ; Initialize STACK pointer
0183   CD 98 01               CALL   init   ; Call initialization routine
0186   CD 87 05               CALL   print   ; Print TecM8 version information
0189   54 65 63 4D 38 20 30 2E 30 0D 0A 00 .CSTR   "TecM8 0.0\r\n"   
0195   C3 C3 01               JP   parse   ; Jump to the parsing routine
0198                             ; *****************************************************************************
0198                             ; Routine: init
0198                             ; 
0198                             ; Purpose:
0198                             ;    Initializes various pointers and variables used by TecM8.
0198                             ; 
0198                             ; Inputs:
0198                             ;    None
0198                             ; 
0198                             ; Outputs:
0198                             ;    None
0198                             ; 
0198                             ; Registers Destroyed:
0198                             ;    A, HL
0198                             ; *****************************************************************************
0198                INIT:        
0198   21 00 00               LD   hl,0   ; 
019B   22 85 31               LD   (vTokenVal),hl   ; vTokenVal = 0
019E   22 8D 31               LD   (vSymPtr),hl   ; vSymPtr = 0
01A1   22 8F 31               LD   (vExprPtr),hl   ; vExprPtr = 0
01A4   AF                     XOR   a   ; 
01A5   32 84 31               LD   (vToken),a   ; vToken = 0
01A8   32 87 31               LD   (vBufferPos),a   ; vBufferPos = 0
01AB   3E 0A                  LD   a,"\n"   ; put new line into first char of buffer
01AD   32 00 30               LD   (BUFFER),a   ; 
01B0   21 B0 32               LD   hl,HEAP   ; vHeapPtr = HEAP
01B3   22 91 31               LD   (vHeapPtr),hl   ; 
01B6   21 B0 33               LD   hl,ASSEMBLY   ; vAsmPtr = ASSEMBLY
01B9   22 89 31               LD   (vAsmPtr),hl   ; 
01BC   21 B0 31               LD   hl,STRINGS   ; vStrPtr = STRINGS
01BF   22 8B 31               LD   (vStrPtr),hl   ; 
01C2   C9                     RET      
01C3                             ; *****************************************************************************
01C3                             ; Routine: parse
01C3                             ; 
01C3                             ; Purpose:
01C3                             ;    Parses the input program, calling the statementList routine, printing the
01C3                             ;    completion message, and halting the system.
01C3                             ; 
01C3                             ; Inputs:
01C3                             ;    None
01C3                             ; 
01C3                             ; Outputs:
01C3                             ;    None
01C3                             ; 
01C3                             ; Registers Destroyed:
01C3                             ;    None
01C3                             ; *****************************************************************************
01C3                PARSE:       
01C3   CD FD 01               CALL   statementList   ; Parse the input program
01C6   CD 87 05               CALL   print   ; Print completion message
01C9   50 61 72 73 69 6E 67 20 63 6F 6D 70 6C 65 74 65 64 20 73 75 63 63 65 73 73 66 75 6C 6C 79 2E 00 .CSTR   "Parsing completed successfully."   
01E9   76                     HALT      
01EA                PARSEERROR:      
01EA   55 6E 65 78 70 65 63 74 65 64 20 74 6F 6B 65 6E 2E 00 .CSTR   "Unexpected token."   
01FC   76                     HALT      
01FD                             ; *****************************************************************************
01FD                             ; Routine: statementList
01FD                             ; 
01FD                             ; Purpose:
01FD                             ;    Parses a list of statements, repeatedly calling the statement routine until
01FD                             ;    the end of file (EOF) token is encountered.
01FD                             ; 
01FD                             ; Inputs:
01FD                             ;    None
01FD                             ; 
01FD                             ; Outputs:
01FD                             ;    None
01FD                             ; 
01FD                             ; Registers Destroyed:
01FD                             ;    A
01FD                             ; *****************************************************************************
01FD                STATEMENTLIST:      
01FD   CD 0C 03               CALL   nextToken   ; Get the next token
0200   CD 0C 02               CALL   statement   ; Parse a statement
0203   FE 45                  CP   EOF_   ; Check if it's the end of file
0205   C8                     RET   z   ; If yes, return
0206   FE 0A                  CP   NEWLN_   
0208   20 E0                  JR   nz,parseError   
020A   18 F1                  JR   statementList   ; Repeat for the next statement
020C                             ; *****************************************************************************
020C                             ; Routine: statement
020C                             ; 
020C                             ; Purpose:
020C                             ;    Parses a single statement, checking its type (label, opcode, or directive)
020C                             ;    and performing corresponding actions.
020C                             ; 
020C                             ; Inputs:
020C                             ;    None
020C                             ; 
020C                             ; Outputs:
020C                             ;    None
020C                             ; 
020C                             ; Registers Destroyed:
020C                             ;    A
020C                             ; *****************************************************************************
020C                STATEMENT:      
020C   F5                     PUSH   af   ; save token
020D   3E FF                  LD   a,-1   
020F   32 93 31               LD   (vOpcode),a   
0212   32 94 31               LD   (vOperand1),a   
0215   32 95 31               LD   (vOperand2),a   
0218   AF                     XOR   a   
0219   32 96 31               LD   (vOpExpr),a   
021C   32 98 31               LD   (vOpDisp),a   
021F   F1                     POP   af   ; restore token
0220   FE 45                  CP   EOF_   
0222   C8                     RET   z   
0223   FE 0A                  CP   NEWLN_   
0225   C8                     RET   z   
0226   FE 4C                  CP   LABEL_   ; Check if it's a label
0228   20 0A                  JR   nz,statement1   ; If not, jump to statement10
022A   ED 5B 89 31            LD   de,(vAsmPtr)   ; HL = symbol name DE = symbol value (assembler pointer)
022E   CD F3 02               CALL   addSymbol   ; Add label to symbol list
0231   CD 0C 03               CALL   nextToken   ; Get the next token
0234                STATEMENT1:      
0234   FE 43                  CP   OPCODE_   ; Check if it's an opcode
0236   28 05                  JR   z,instruction   ; Jump to parseInstruction routine
0238   FE 44                  CP   DIRECT_   ; Check if it's a directive
023A   28 1E                  JR   z,directive   
023C   C9                     RET      
023D                INSTRUCTION:      
023D   7D                     LD   a,l   
023E   32 93 31               LD   (vOpcode),a   
0241   CD 0C 03               CALL   nextToken   
0244   CD 5B 02               CALL   operand   
0247   32 94 31               LD   (vOperand1),a   
024A   CD 0C 03               CALL   nextToken   
024D   FE 2C                  CP   COMMA_   
024F   C0                     RET   nz   
0250   CD 0C 03               CALL   nextToken   
0253   CD 5B 02               CALL   operand   
0256   32 95 31               LD   (vOperand2),a   
0259   C9                     RET      
025A                DIRECTIVE:      
025A   C9                     RET      
025B                             ; *****************************************************************************
025B                             ; Routine: operand
025B                             ; 
025B                             ; Purpose:
025B                             ;    Parses and identifies different types of operands (registers, memory,
025B                             ;    immediate values, etc.) used in assembly instructions. Sets the appropriate
025B                             ;    flags based on the operand type.
025B                             ; 
025B                             ; Inputs:
025B                             ;    None (uses the current token from a token stream)
025B                             ; 
025B                             ; Outputs:
025B                             ;    A - Contains the code indicating the type of operand identified.
025B                             ; 
025B                             ; Registers Destroyed:
025B                             ;    A, DE, HL
025B                             ; Define operand codes for readability and use in the operand routine.
025B                             ; 
025B                             ; reg_    .equ    0x00        ; A, B etc
025B                             ; rp_     .equ    0x08        ; bit 3: register pair e.g. HL, DE
025B                             ; flag_   .equ    0x10        ; bit 4: flag NZ etc
025B                             ; immed_  .equ    0x20        ; bit 5: immediate 0xff or 0xffff
025B                             ; mem_    .equ    0x40        ; bit 6: memory ref (HL) or (0xffff)
025B                             ; idx_    .equ    0x80        ; bit 7: indexed (IX+dd)
025B                             ; *****************************************************************************
025B                OPERAND:      
025B   FE 4D                  CP   OPELEM_   ; Check if the token is an op element i.e. reg, rp or flag
025D   C8                     RET   z   ; Return if it is
025E   FE 28                  CP   LPAREN_   ; Check if the token is a left parenthesis
0260   28 09                  JR   z,operand1   ; If so, handle as a memory reference
0262   CD 99 02               CALL   expression   ; Otherwise, treat as an expression
0265   22 96 31               LD   (vOpExpr),hl   ; Store the result of the operand expression
0268   3E 20                  LD   a,immed_   ; Set A to indicate an immediate value
026A   C9                     RET      
026B                OPERAND1:      
026B   CD 0C 03               CALL   nextToken   ; Memory reference. Get the next token
026E   FE 4D                  CP   OPELEM_   ; Check if the next token is an op element
0270   20 14                  JR   nz,operand2   ; If not, handle as an expression inside parentheses
0272   7D                     LD   a,l   ; Otherwise, Load A with the lower byte of HL (operand)
0273   CD 5F 04               CALL   isIndexReg   
0276   20 18                  JR   nz,operand4   
0278   F5                     PUSH   af   ; Save HL on the stack
0279   CD 99 02               CALL   expression   ; Treat as an expression
027C   22 98 31               LD   (vOpDisp),hl   ; Store the result of the expression
027F   F1                     POP   af   ; Restore HL from the stack
0280   CB FF                  SET   7,a   ; Set A to indicate an indexed memory reference
0282                OPERAND3:      
0282   CB F7                  SET   6,a   ; Otherwise, set A to indicate a memory reference
0284   18 0A                  JR   operand4   
0286                OPERAND2:      
0286   CD 99 02               CALL   expression   ; Treat as a new expression
0289   22 96 31               LD   (vOpExpr),hl   ; Store the result of the expression
028C   3E 60                  LD   a,immed_ | mem_   ; Set A to indicate an immediate memory reference
028E   18 00                  JR   operand4   
0290                OPERAND4:      
0290   CD 0C 03               CALL   nextToken   ; Get the next token
0293   FE 29                  CP   RPAREN_   ; Check if the next token is a right parenthesis
0295   C2 EA 01               JP   nz,parseError   ; If not, handle as a parse error
0298   C9                     RET      
0299                             ; *****************************************************************************
0299                             ; Routine: expression
0299                             ; 
0299                             ; Purpose:
0299                             ;    Parses an expression as an array of tokens and stores it in an array.
0299                             ;    Each token in the expression is appended to an array which is terminated by
0299                             ;    a NULL token type.
0299                             ;    The expression list pointer is updated to point to the start of the last token list.
0299                             ; 
0299                             ; Inputs:
0299                             ;    A - token type
0299                             ;    HL - token value
0299                             ; 
0299                             ; Outputs:
0299                             ;    Updates the heap with the parsed expression and updates the expression list pointer.
0299                             ; 
0299                             ; Registers Destroyed:
0299                             ;    AF, B, HL
0299                             ; *****************************************************************************
0299                EXPRESSION:      
0299   06 00                  LD   b,0   ; Initialize nesting level
029B   E5                     PUSH   hl   ; Save token value
029C   ED 5B 91 31            LD   de,(vHeapPtr)   ; Load the current heap pointer into DE
02A0   2A 8F 31               LD   hl,(vExprPtr)   ; Load the current expression list pointer into HL
02A3   CD A6 05               CALL   hpush   ; Push the pointer to the last symbol onto the heap
02A6   21 00 00               LD   hl,0   ; Append two words in header (for future use)
02A9   CD A6 05               CALL   hpush   
02AC   CD A6 05               CALL   hpush   
02AF   ED 53 8F 31            LD   (vExprPtr),de   ; Update the expression list pointer with the new address
02B3   E1                     POP   hl   ; HL = token value
02B4                EXPRESSION1:      
02B4   EB                     EX   de,hl   ; DE = token value
02B5   6F                     LD   l,a   ; HL = token type
02B6   26 00                  LD   h,0   
02B8   CD A6 05               CALL   hpush   ; Push the token type
02BB   EB                     EX   de,hl   ; HL = token value
02BC   CD A6 05               CALL   hpush   ; Push the token value
02BF   CD 0C 03               CALL   nextToken   ; Get the next token
02C2   FE 28                  CP   "("   ; increase nesting?
02C4   20 06                  JR   nz,expression2   
02C6   04                     INC   b   
02C7   CD 0C 03               CALL   nextToken   ; Get the next token
02CA   18 E8                  JR   expression1   ; Repeat the main loop
02CC                EXPRESSION2:      
02CC   04                     INC   b   ; Check if nesting level is zero
02CD   05                     DEC   b   
02CE   28 0A                  JR   z,expression3   ; If yes, skip to expression3
02D0   FE 29                  CP   ")"   ; if nesting > 0, decrease nesting?
02D2   20 06                  JR   nz,expression3   
02D4   05                     DEC   b   ; Decrease nesting level
02D5   CD 0C 03               CALL   nextToken   ; Get the next token
02D8   18 DA                  JR   expression1   ; Repeat the main loop
02DA                EXPRESSION3:      
02DA   FE 29                  CP   RPAREN_   ; Check if the end of the expression
02DC   28 0C                  JR   z,expression4   
02DE   FE 2C                  CP   COMMA_   
02E0   28 08                  JR   z,expression4   
02E2   FE 0A                  CP   NEWLN_   
02E4   28 04                  JR   z,expression4   
02E6   FE 45                  CP   EOF_   
02E8   20 CA                  JR   nz,expression1   
02EA                EXPRESSION4:      
02EA   21 00 00               LD   hl,NULL   ; Mark the end of the expression with NULL
02ED   CD A6 05               CALL   hpush   ; Push NULL onto the heap
02F0   C3 C4 03               JP   pushBackToken   ; Rewind the token to the last valid one
02F3                             ; *****************************************************************************
02F3                             ; Routine: addSymbol
02F3                             ; 
02F3                             ; Purpose:
02F3                             ;    Adds a new symbol to the symbol list. The symbol's name is in HL and the
02F3                             ;    symbol's value is in DE. Updates the symbol list pointer and ensures
02F3                             ;    the previous symbol's pointer is preserved.
02F3                             ; 
02F3                             ; Inputs:
02F3                             ;    HL - Points to the name of the new symbol.
02F3                             ;    DE - Contains the value of the new symbol.
02F3                             ; 
02F3                             ; Outputs:
02F3                             ;    Updates the symbol list pointer in vSymPtr.
02F3                             ; 
02F3                             ; Registers Destroyed:
02F3                             ;    DE, HL
02F3                             ; *****************************************************************************
02F3                ADDSYMBOL:      
02F3   D5                     PUSH   de   
02F4   E5                     PUSH   hl   ; Push symbol name onto the stack
02F5   ED 5B 91 31            LD   de,(vHeapPtr)   ; BC = symbol address from the heap pointer
02F9   2A 8D 31               LD   hl,(vSymPtr)   ; Load the current symbol list pointer into HL
02FC   CD A6 05               CALL   hpush   ; Push pointer to the last symbol onto the heap
02FF   ED 53 8D 31            LD   (vSymPtr),de   ; Update the symbol list pointer with the new symbol address
0303   E1                     POP   hl   ; HL = symbol name
0304   CD A6 05               CALL   hpush   ; Push symbol name onto the heap
0307   E1                     POP   hl   ; HL = symbol value
0308   CD A6 05               CALL   hpush   ; Push symbol value onto the heap
030B   C9                     RET      ; Return from subroutine
030C                             ; nextToken is a lexer function that reads characters from the input and classifies
030C                             ; them into different token types. It handles whitespace, end of input, newlines,
030C                             ; comments, identifiers, labels, directives, hexadecimal numbers, and other SYMBOLS.
030C                             ; Input: None
030C                             ; Output:
030C                             ; a: contains the type of the next token.
030C                             ; hl: contains the value associated with the next token.
030C                             ; Destroyed: None
030C                             ; *****************************************************************************
030C                             ; Routine: nextToken
030C                             ; 
030C                             ; Purpose:
030C                             ;    Parses the next token from the input stream, identifying various types of
030C                             ;    tokens such as identifiers, labels, opcodes, registers, flags, numbers,
030C                             ;    and special characters.
030C                             ; 
030C                             ; Inputs:
030C                             ;    None
030C                             ; 
030C                             ; Outputs:
030C                             ;    A - Token representing the type of the parsed element
030C                             ; 
030C                             ; Registers Destroyed:
030C                             ;    A, BC, DE, HL
030C                             ; *****************************************************************************
030C                NEXTTOKEN:      
030C   CB 77                  BIT   7,(vToken)   ; Check the high bit of the pushback BUFFER
030E   CA 1D 03               JP   z,nextToken0   ; If high bit clear, nothing pushed back
0311   3A 84 31               LD   a,(vToken)   ; If high bit set, load the pushed back token type into A
0314   2A 85 31               LD   hl,(vTokenVal)   ; and token value into HL
0317   CB BF                  RES   7,a   ; Clear the high bit
0319   32 84 31               LD   (vToken),a   ; Store the character back in the BUFFER
031C   C9                     RET      ; Return with the pushed back character in A
031D                NEXTTOKEN0:      
031D   21 00 00               LD   hl,0   ; Initialize HL with 0
0320                NEXTTOKEN1:      
0320   CD 00 05               CALL   nextChar   ; Get the next character
0323   FE 20                  CP   " "   ; is it space?
0325   28 F9                  JR   z,nextToken1   ; If yes, skip it and get the next character
0327   FE FF                  CP   EOF   ; Is it null (end of input)?
0329   20 03                  JR   nz,nextToken2   ; If not, continue to the next check
032B   3E 45                  LD   a,EOF_   ; If yes, return with EOF token
032D   C9                     RET      
032E                NEXTTOKEN2:      
032E   FE 5C                  CP   $5C   ; Is it a statement separator? "\"
0330   20 0B                  JR   nz,nextToken3   ; If not, continue to the next check
0332   FE 3A                  CP   ":"   ; Is it a statement separator? ":"
0334   20 07                  JR   nz,nextToken3   ; If not, continue to the next check
0336   FE 0A                  CP   "\n"   ; Is it a new line
0338   30 03                  JR   nc,nextToken3   ; If not, continue to the next check
033A   3E 0A                  LD   a,NEWLN_   ; If yes, return with NEWLIN token
033C   C9                     RET      ; Return with newline token
033D                NEXTTOKEN3:      
033D   FE 3B                  CP   ";"   ; Is it a comment?
033F   C4 4E 03               CALL   nz,nextToken5   ; If not, continue to the next check
0342                NEXTTOKEN4:      
0342   CD 00 05               CALL   nextChar   ; Get the next character in the comment
0345   FE 21                  CP   " "+1   ; Loop until the next control character
0347   30 F9                  JR   nc,nextToken4   
0349   CD 68 05               CALL   rewindChar   ; Push back the character
034C   18 CF                  JR   nextToken0   ; return with control char
034E                NEXTTOKEN5:      
034E   FE 5F                  CP   "_"   ; Is it an identifier?
0350   28 05                  JR   z,nextToken6   ; If yes, continue to the next check
0352   CD 69 04               CALL   isAlpha   ; If not, check if it's alphabetic
0355   30 37                  JR   nc,nextToken11   ; If not, continue to the next check
0357                NEXTTOKEN6:      
0357   CD CD 03               CALL   ident   ; Parse the identifier
035A   FE 3A                  CP   ":"   ; Is it a label?
035C   20 03                  JR   nz,nextToken7   ; If not, continue to the next check
035E   3E 4C                  LD   a,LABEL_   ; If yes, return A = LABEL HL = string
0360   C9                     RET      
0361                NEXTTOKEN7:      
0361   CD 68 05               CALL   rewindChar   ; Push back the character
0364   22 8B 31               LD   (vStrPtr),hl   ; Restore string heap pointer to previous location
0367   CD 07 04               CALL   searchOpcode   
036A   20 06                  JR   nz,nextToken8   
036C   6F                     LD   l,a   ; hl = opcode value
036D   26 00                  LD   h,0   
036F   3E 43                  LD   a,OPCODE_   ; Return with OPCODE token
0371   C9                     RET      
0372                NEXTTOKEN8:      
0372   CD 34 04               CALL   searchOpElem   
0375   20 06                  JR   nz,nextToken9   
0377   6F                     LD   l,a   ; hl = op element value
0378   26 00                  LD   h,0   
037A   3E 4D                  LD   a,OPELEM_   ; Return with OPELEM token
037C   C9                     RET      
037D                NEXTTOKEN9:      
037D   11 13 07               LD   de,directives   ; List of directives to search
0380   CD ED 03               CALL   searchStr   
0383   20 06                  JR   nz,nextToken10   
0385   6F                     LD   l,a   ; hl = directive value
0386   26 00                  LD   h,0   
0388   3E 44                  LD   a,DIRECT_   ; Return with DIRECT token
038A   C9                     RET      
038B                NEXTTOKEN10:      
038B   3E 49                  LD   a,IDENT_   ; Return with IDENT token
038D   C9                     RET      
038E                NEXTTOKEN11:      
038E   21 00 00               LD   hl,0   
0391   FE 24                  CP   "$"   ; Is it a hexadecimal number?
0393   20 14                  JR   nz,nextToken12   ; If not, continue to the next check
0395   CD 00 05               CALL   nextChar   ; Get the next character
0398   CD 65 04               CALL   isAlphaNum   ; Check if it's the ASSEMBLY pointer
039B   20 06                  JR   nz,nextToken11a   ; If not, continue to the next check
039D   CD AE 04               CALL   number_hex   ; Process hexadecimal number
03A0   3E 39                  LD   a,NUM_   ; Return with NUM token
03A2   C9                     RET      
03A3                NEXTTOKEN11A:      
03A3   CD 68 05               CALL   rewindChar   ; Push back the character (flags unaffected)
03A6   3E 24                  LD   a,DOLLAR_   ; Return with DOLLAR token
03A8   C9                     RET      ; Return with the DOLLAR token
03A9                NEXTTOKEN12:      
03A9   FE 2D                  CP   "-"   ; Is it a negative number?
03AB   28 05                  JR   z,nextToken13   ; If yes, continue to the next check
03AD   CD 7B 04               CALL   isDigit   ; Check if it's a digit
03B0   30 06                  JR   nc,nextToken15   ; Jump to the next check
03B2                NEXTTOKEN13:      
03B2   CD 82 04               CALL   number   ; Parse the number
03B5                NEXTTOKEN14:      
03B5   3E 39                  LD   a,NUM_   ; Return with NUM token
03B7   C9                     RET      
03B8                NEXTTOKEN15:      
03B8   FE 28                  CP   "("   
03BA   C8                     RET   z   ; Return with the LPAREN token
03BB   FE 29                  CP   ")"   
03BD   C8                     RET   z   ; Return with the RPAREN token
03BE   FE 2C                  CP   ","   
03C0   C8                     RET   z   ; Return with the COMMA token
03C1   3E 55                  LD   a,UNKNOWN_   ; Return with UNKNOWN token
03C3   C9                     RET      
03C4                             ; *****************************************************************************
03C4                             ; Routine: pushBackToken
03C4                             ; 
03C4                             ; Purpose:
03C4                             ;    Pushes back a token into the pushback BUFFER to allow the token to be
03C4                             ;    re-read by the nextToken routine.
03C4                             ; 
03C4                             ; Inputs:
03C4                             ;    A  - token type
03C4                             ;    HL - token value
03C4                             ; 
03C4                             ; Outputs:
03C4                             ;    None
03C4                             ; 
03C4                             ; Registers Destroyed:
03C4                             ;    A, DE
03C4                             ; *****************************************************************************
03C4                PUSHBACKTOKEN:      
03C4   CB FF                  SET   7,a   ; Set the high bit of the token type (without affecting flags)
03C6   32 84 31               LD   (vToken),a   ; push back the token
03C9   22 85 31               LD   (vTokenVal),hl   ; push back the token value
03CC   C9                     RET      
03CD                             ; *****************************************************************************
03CD                             ; Routine: ident
03CD                             ; 
03CD                             ; Purpose:
03CD                             ;    Reads characters from the input stream until a charcter which is not an
03CD                             ;    an underscore or an alphanumeric character is encountered. Writes the chars
03CD                             ;    to a Pascal string and updates the top of the STRINGS heap pointer.
03CD                             ;    It also calculates the length of the string and stores it at the beginning
03CD                             ;    of the string.
03CD                             ; 
03CD                             ; Inputs:
03CD                             ;    A - Current character read from the input stream
03CD                             ;    vStrPtr - Address of the top of STRINGS heap pointer
03CD                             ; 
03CD                             ; Outputs:
03CD                             ;    A - last character read from the input stream
03CD                             ;    HL - identifier string
03CD                             ; 
03CD                             ; Registers Destroyed:
03CD                             ;    DE, HL
03CD                             ; *****************************************************************************
03CD                IDENT:       
03CD   2A 8B 31               LD   hl,(vStrPtr)   ; Load the address of the top of STRINGS heap
03D0   E5                     PUSH   hl   ; save start of string
03D1   23                     INC   hl   ; Move to the next byte to skip the length byte
03D2                IDENT1:      
03D2   77                     LD   (hl),a   ; Write the current character to the string BUFFER
03D3   23                     INC   hl   ; Move to the next position in the BUFFER
03D4   E5                     PUSH   hl   
03D5   CD 00 05               CALL   nextChar   ; Get the next character from the input stream
03D8   E1                     POP   hl   
03D9   FE 5F                  CP   "_"   ; Compare with underscore character
03DB   28 F5                  JR   z,ident1   ; If underscore, jump to ident2
03DD   CD 65 04               CALL   isAlphanum   ; Check if the character is alphanumeric
03E0   38 F0                  JR   c,ident1   ; If not alphanumeric, jump to ident3
03E2                IDENT3:      
03E2   22 8B 31               LD   (vStrPtr),hl   ; Update the top of STRINGS heap pointer
03E5   D1                     POP   de   ; restore start of string into de
03E6   B7                     OR   a   ; Clear carry
03E7   ED 52                  SBC   hl,de   ; Calculate the length of the string (HL = length, DE = string)
03E9   2D                     DEC   l   ; reduce by one (length byte)
03EA   EB                     EX   de,hl   ; Swap DE and HL (E = length, HL = string)
03EB   73                     LD   (hl),e   ; Store the length at the beginning of the string BUFFER
03EC   C9                     RET      
03ED                             ; *****************************************************************************
03ED                             ; Routine: searchStr
03ED                             ; 
03ED                             ; Purpose:
03ED                             ;    Search through a list of Pascal STRINGS for a match.
03ED                             ; 
03ED                             ; Inputs:
03ED                             ;    HL - Points to the string to search for.
03ED                             ;    DE - Points to the start of the list of STRINGS.
03ED                             ; 
03ED                             ; Outputs:
03ED                             ;    ZF - True if match, false otherwise.
03ED                             ;    A - Index of the matching string if a match is found, or -1 if no match
03ED                             ;        is found.
03ED                             ;    HL - Points to the string to search for.
03ED                             ; 
03ED                             ; Destroyed:
03ED                             ;    A, B, C, D, E, A", F"
03ED                             ; *****************************************************************************
03ED                SEARCHSTR:      
03ED   EB                     EX   de,hl   ; DE = search string, HL = string list
03EE   06 00                  LD   b,0   ; init b with index 0
03F0                SEARCHSTR1:      
03F0   CD 4D 04               CALL   compareStr   ; compare strings
03F3   20 03                  JR   nz,searchStr3   
03F5   EB                     EX   de,hl   ; HL = search string
03F6   78                     LD   a,b   ; Load index of match
03F7   C9                     RET      ; ZF = true
03F8                SEARCHSTR3:      
03F8   7E                     LD   a,(hl)   ; Load length of current string
03F9   3C                     INC   a   ; A = length byte plus length of string
03FA   85                     ADD   a,l   ; HL += A, move HL to point to next string
03FB   6F                     LD   l,a   
03FC   3E 00                  LD   a,0   
03FE   8C                     ADC   a,h   
03FF   67                     LD   h,a   
0400   04                     INC   b   ; increase index
0401   7E                     LD   a,(hl)   ; A = length of next string
0402   B7                     OR   a   ; If A != 0, continue searching
0403   20 EB                  JR   nz,searchStr1   
0405   3D                     DEC   a   ; A = NO_MATCH (i.e., -1), ZF = false
0406   C9                     RET      
0407                             ; *****************************************************************************
0407                             ; Routine: searchOpcode
0407                             ; 
0407                             ; Purpose:
0407                             ;    Searches for a matching opcode in various lists of opcodes.
0407                             ; 
0407                             ; Inputs:
0407                             ;    HL - Points to the string to search for.
0407                             ; 
0407                             ; Outputs:
0407                             ;    ZF - Set if a match is found, cleared otherwise.
0407                             ;    A  - Contains the index of the matching opcode if a match is found,
0407                             ;         or the last checked index if no match is found.
0407                             ; 
0407                             ; Registers Destroyed:
0407                             ;    A, DE, F
0407                             ; *****************************************************************************
0407                SEARCHOPCODE:      
0407   11 D3 05               LD   de,alu_opcodes   ; Point DE to the list of ALU opcodes
040A   CD ED 03               CALL   searchStr   ; Search for the string in ALU opcodes
040D   C8                     RET   z   ; If match found (ZF set), return
040E   11 B4 05               LD   de,rot_opcodes   ; Point DE to the list of ROT opcodes
0411   CD ED 03               CALL   searchStr   ; Search for the string in ROT opcodes
0414   CB EF                  SET   5,a   ; Set bit 5 in A to indicate ROT opcodes
0416   C8                     RET   z   ; If match found (ZF set), return
0417   11 F2 05               LD   de,bli_opcodes   ; Point DE to the list of BLI opcodes
041A   CD ED 03               CALL   searchStr   ; Search for the string in BLI opcodes
041D   CB F7                  SET   6,a   ; Set bit 6 in A to indicate BLI opcodes
041F   C8                     RET   z   ; If match found (ZF set), return
0420   11 3D 06               LD   de,gen1_opcodes   ; Point DE to the list of general opcodes (set 1)
0423   CD ED 03               CALL   searchStr   ; Search for the string in general opcodes
0426   CB EF                  SET   5,a   ; Set bits 5 & 6 in A to indicate general opcodes (set 1)
0428   CB F7                  SET   6,a   
042A   C8                     RET   z   ; If match found (ZF set), return
042B   11 66 06               LD   de,gen2_opcodes   ; Point DE to the list of general opcodes (set 2)
042E   CD ED 03               CALL   searchStr   ; Search for the string in general opcodes
0431   CB FF                  SET   7,a   ; Set bit 7 in A to indicate general opcodes (set 2)
0433   C9                     RET      ; Return ZF = match
0434                             ; *****************************************************************************
0434                             ; Routine: searchOpElem
0434                             ; 
0434                             ; Purpose:
0434                             ;    Searches for an op element in the lists of 8-bit registers, 16-bit registers,
0434                             ;    and flags. Sets appropriate flags based on the type of operand found.
0434                             ; 
0434                             ; Inputs:
0434                             ;    HL - Points to the start of the string to search for.
0434                             ; 
0434                             ; Outputs:
0434                             ;    A  - The index of the matching op element if a match is found, or -1 if no
0434                             ;         match is found.
0434                             ;    ZF - Set if a match is found, cleared otherwise.
0434                             ; 
0434                             ; Registers Destroyed:
0434                             ;    A, DE, HL
0434                             ; *****************************************************************************
0434                             ; reg_    .equ    0x00    ; A, B etc
0434                             ; rp_     .equ    0x08    ; bit 3: 8-bit or 16-bit e.g. A or HL, 0xff or 0xffff
0434                             ; flag_   .equ    0x10    ; bit 4: NZ etc
0434                SEARCHOPELEM:      
0434   11 CF 06               LD   de,reg8   ; Point DE to the list of 8-bit register operands
0437   CD ED 03               CALL   searchStr   ; Search for the string in reg8 operands
043A   C8                     RET   z   ; If match found (ZF set), return
043B   11 E4 06               LD   de,reg16   ; Point DE to the list of 16-bit register operands
043E   CD ED 03               CALL   searchStr   ; Search for the string in reg16 operands
0441   CB DF                  SET   3,a   ; Set bit 4 in A to indicate a register operand
0443   C8                     RET   z   ; If match found (ZF set), return
0444   11 FE 06               LD   de,flags   ; Point DE to the list of flag operands
0447   CD ED 03               CALL   searchStr   ; Search for the string in flag operands
044A   CB E7                  SET   4,a   ; Set bit 3 in A to indicate flag operand
044C   C9                     RET      ; Return ZF = match
044D                             ; *****************************************************************************
044D                             ; Routine: compareStr
044D                             ; 
044D                             ; Purpose:
044D                             ;    Compares two Pascal strings. The comparison includes
044D                             ;    the length byte and continues until all characters are compared or a
044D                             ;    mismatch is found.
044D                             ; 
044D                             ; Inputs:
044D                             ;    DE - Points to the start of string1
044D                             ;    HL - Points to the start of string2
044D                             ; 
044D                             ; Outputs:
044D                             ;    ZF - Set if the strings are equal
044D                             ; 
044D                             ; Registers Destroyed:
044D                             ;    A
044D                             ; *****************************************************************************
044D                COMPARESTR:      
044D   C5                     PUSH   bc   ; save BC, DE, HL
044E   D5                     PUSH   de   
044F   E5                     PUSH   hl   
0450   1A                     LD   a,(de)   ; Load length of search string
0451   47                     LD   b,a   ; Copy length to B for looping
0452   04                     INC   b   ; Increase to include length byte
0453                COMPARESTR2:      
0453   1A                     LD   a,(de)   ; Load next character from search string
0454   BE                     CP   (hl)   ; Compare with next character in current string
0455   20 04                  JR   nz,compareStr3   ; break if characters are not equal
0457   13                     INC   de   ; Move to next character in search string
0458   23                     INC   hl   ; Move to next character in current string
0459   10 F8                  DJNZ   compareStr2   ; Loop until all characters compared or mismatch
045B                COMPARESTR3:      
045B   E1                     POP   hl   ; restore BC, DE, HL
045C   D1                     POP   de   
045D   C1                     POP   bc   
045E   C9                     RET      ; Return with ZF set if strings are equal
045F                             ; *****************************************************************************
045F                             ; Routine: isIndexReg
045F                             ; 
045F                             ; Purpose:
045F                             ;    Checks if the current operand is an index register (IX or IY).
045F                             ; 
045F                             ; Inputs:
045F                             ;    A - The operand to check.
045F                             ; 
045F                             ; Outputs:
045F                             ;    ZF - Set if the operand is an index register (IX or IY).
045F                             ; 
045F                             ; Registers Destroyed:
045F                             ;    None
045F                             ; *****************************************************************************
045F                ISINDEXREG:      
045F   FE 0D                  CP   IX_   ; Compare operand with IX
0461   C8                     RET   z   ; Return if equal (ZF is set)
0462   FE 0E                  CP   IY_   ; Compare operand with IY
0464   C9                     RET      ; Return (ZF is set if equal, cleared otherwise)
0465                             ; *****************************************************************************
0465                             ; Routine: isAlphaNum
0465                             ; 
0465                             ; Purpose:
0465                             ;    Checks if the character in the A register is an alphanumeric character
0465                             ;    (either uppercase or lowercase). If the character is alphabetic, it converts
0465                             ;    it to uppercase and sets the carry flag. If the character is not alphabetic,
0465                             ;    it clears the carry flag.
0465                             ; 
0465                             ; Input:
0465                             ;    A - Contains the character to be checked.
0465                             ; 
0465                             ; Output:
0465                             ;    A - Contains the uppercase version of the input character if it was alphabetic.
0465                             ;    CF - Set if the input character was alphabetic, cleared otherwise.
0465                             ; 
0465                             ; Destroyed:
0465                             ;    C
0465                             ; *****************************************************************************
0465                ISALPHANUM:      
0465   CD 7B 04               CALL   isDigit   ; Check if it's a digit
0468   C8                     RET   z   ; If it's not a digit, continue to isAlpha
0469                             ; Falls through to isAlpha
0469                             ; *****************************************************************************
0469                             ; Routine: isAlpha
0469                             ; 
0469                             ; Purpose:
0469                             ;    Checks if the character in the A register is an alphabetic character
0469                             ;    (either uppercase or lowercase). If the character is alphabetic, it converts
0469                             ;    it to uppercase and sets the carry flag.
0469                             ; 
0469                             ; Input:
0469                             ;    A - Contains the character to be checked.
0469                             ; 
0469                             ; Output:
0469                             ;    A - Contains the uppercase version of the input character if it was alphabetic.
0469                             ;    CF - Set if the input character was alphabetic, cleared otherwise.
0469                             ; 
0469                             ; Destroyed:
0469                             ;    None
0469                             ; *****************************************************************************
0469                ISALPHA:      
0469   FE 7B                  CP   "z"+1   ; Compare with "Z" + 1
046B   D0                     RET   nc   ; Return if it's not alphabetic, no carry
046C   FE 61                  CP   "a"   ; Compare with lowercase "a"
046E   38 04                  JR   c,isAlpha1   ; Jump if it"s lower than "a'
0470   D6 20                  SUB   $20   ; It's lowercase alpha so convert lowercase to uppercase
0472   37                     SCF      ; no carry so set carry flag
0473   C9                     RET      
0474                ISALPHA1:      
0474   FE 5B                  CP   "Z"+1   ; Compare with "Z" + 1
0476   D0                     RET   nc   ; Return if it's not alphabetic, no carry
0477   FE 41                  CP   "A"   ; Compare with "A"
0479   3F                     CCF      ; Invert CF to set it if it's alphabetic
047A   C9                     RET      ; Return
047B                             ; *****************************************************************************
047B                             ; Routine: isDigit
047B                             ; 
047B                             ; Purpose:
047B                             ;    Checks if the character in the A register is a decimal digit (0-9). If
047B                             ;    the character is a decimal digit, it sets the carry flag.
047B                             ; 
047B                             ; Input:
047B                             ;    A - Contains the character to be checked.
047B                             ; 
047B                             ; Output:
047B                             ;    CF - Set if the input character was a digit, cleared otherwise.
047B                             ; 
047B                             ; Destroyed:
047B                             ;    None
047B                             ; *****************************************************************************
047B                ISDIGIT:      
047B   FE 3A                  CP   "9"+1   ; Compare with "9" + 1
047D   D0                     RET   nc   ; Return if it's not a digit
047E   FE 30                  CP   "0"   ; Compare with "0"
0480   3F                     CCF      ; Invert CF to set it if it's a digit
0481   C9                     RET      ; Return
0482                             ; *****************************************************************************
0482                             ; Routine: number
0482                             ; 
0482                             ; Purpose:
0482                             ;    Parse a number from the input. Handles both decimal and hexadecimal
0482                             ;    numbers, and supports negative numbers.
0482                             ; 
0482                             ; Input:
0482                             ;    A - first char of number
0482                             ; 
0482                             ; Output:
0482                             ;    HL - Contains the parsed number.
0482                             ; 
0482                             ; Destroyed:
0482                             ;    None
0482                             ; *****************************************************************************
0482                NUMBER:      
0482   FE 2D                  CP   "-"   ; Check if it's a negative number
0484   3E FF                  LD   a,-1   ; Set sign flag
0486   28 01                  JR   z,number1   
0488   3C                     INC   a   ; Set sign flag to positive
0489                NUMBER1:      
0489   32 80 31               LD   (vTemp1),a   ; Store the sign flag in vTemp1
048C   CD 00 05               CALL   nextChar   ; Get the next character
048F   FE 24                  CP   "$"   ; Check if it's a hexadecimal number
0491   20 05                  JR   nz,number2   
0493   CD BA 04               CALL   hex   ; If yes, parse hexadecimal number
0496   18 06                  JR   number3   
0498                NUMBER2:      
0498   CD 68 05               CALL   rewindChar   ; Push back the character
049B   CD E5 04               CALL   decimal   ; Parse decimal number
049E                NUMBER3:      
049E   3A 80 31               LD   a,(vTemp1)   ; Load the sign from vTemp1
04A1   3C                     INC   a   ; Increment to negate if necessary
04A2   C0                     RET   nz   ; Return if sign is not zero
04A3   EB                     EX   de,hl   ; Negate the value of HL
04A4   21 00 00               LD   hl,0   ; Load zero to clear carry
04A7   B7                     OR   a   ; Clear carry flag
04A8   ED 52                  SBC   hl,de   ; Subtract DE from HL
04AA   CD 68 05               CALL   rewindChar   ; Push back the character
04AD   C9                     RET      ; Return
04AE                NUMBER_HEX:      
04AE   CD 68 05               CALL   rewindChar   
04B1   AF                     XOR   a   
04B2   32 80 31               LD   (vTemp1),a   ; Store the sign flag in vTemp1
04B5   CD BA 04               CALL   hex   ; Parse hexadecimal number
04B8   18 E4                  JR   number3   
04BA                             ; *****************************************************************************
04BA                             ; Routine: hex
04BA                             ; 
04BA                             ; Purpose:
04BA                             ;    Parse a hexadecimal number.
04BA                             ; 
04BA                             ; Input:
04BA                             ;    None
04BA                             ; 
04BA                             ; Output:
04BA                             ;    HL - Parsed number.
04BA                             ; 
04BA                             ; Destroyed:
04BA                             ;    A
04BA                             ; *****************************************************************************
04BA                HEX:         
04BA   21 00 00               LD   hl,0   ; Initialize HL to 0
04BD                HEX1:        
04BD   CD 00 05               CALL   nextChar   ; Get the next character
04C0   FE 30                  CP   "0"   ; Compare with ASCII "0"
04C2   D8                     RET   c   ; Return if less than "0"
04C3   FE 3A                  CP   "9"+1   ; Compare with ASCII "9" + 1
04C5   38 0F                  JR   c,valid   ; If less or equal, jump to valid
04C7   FE 61                  CP   "a"   ; Compare with ASCII "a"
04C9   38 02                  JR   c,hex2   ; If less, jump to hex2
04CB   D6 20                  SUB   $20   ; Convert lowercase to uppercase
04CD                HEX2:        
04CD   FE 41                  CP   "A"   ; Compare with ASCII "A"
04CF   D8                     RET   c   ; Return if less than "A"
04D0   FE 47                  CP   "F"+1   ; Compare with ASCII "F" + 1
04D2   38 00                  JR   c,upper   ; If less or equal, jump to upper
04D4                UPPER:       
04D4   D6 37                  SUB   $37   ; Convert ASCII to hexadecimal
04D6                VALID:       
04D6   D6 30                  SUB   "0"   ; Convert ASCII to numeric value
04D8   D8                     RET   c   ; Return if less than 0 (not a valid digit)
04D9   FE 10                  CP   $10   ; Compare with 16
04DB   D0                     RET   nc   ; Return if greater than 16 (not a valid digit)
04DC   29                     ADD   hl,hl   ; Multiply by 16
04DD   29                     ADD   hl,hl   ; Multiply by 16
04DE   29                     ADD   hl,hl   ; Multiply by 16
04DF   29                     ADD   hl,hl   ; Multiply by 16
04E0   85                     ADD   a,l   ; Add new digit to HL
04E1   6F                     LD   l,a   ; Store result back in L
04E2   C3 BD 04               JP   hex1   ; Jump back to hex1 to process next character
04E5                             ; *****************************************************************************
04E5                             ; Routine: decimal
04E5                             ; 
04E5                             ; Purpose:
04E5                             ;    Parse a decimal number.
04E5                             ; 
04E5                             ; Input:
04E5                             ;    None
04E5                             ; 
04E5                             ; Output:
04E5                             ;    HL - Parsed number.
04E5                             ; 
04E5                             ; Destroyed:
04E5                             ;    A, DE
04E5                             ; *****************************************************************************
04E5                DECIMAL:      
04E5   21 00 00               LD   hl,0   ; Initialize HL to 0
04E8                DECIMAL1:      
04E8   CD 00 05               CALL   nextChar   ; Get the next character
04EB   D6 30                  SUB   "0"   ; Convert ASCII to binary
04ED   D8                     RET   c   ; Return if less than "0"
04EE   FE 0A                  CP   10   ; Compare with 10
04F0   D0                     RET   nc   ; Return if greater than 10
04F1   03                     INC   bc   ; Increment BC to point to next digit
04F2   54 5D                  LD   de,hl   ; Copy HL to DE
04F4   29                     ADD   hl,hl   ; Multiply HL by 2
04F5   29                     ADD   hl,hl   ; Multiply HL by 4
04F6   19                     ADD   hl,de   ; Add DE to HL to multiply by 5
04F7   29                     ADD   hl,hl   ; Multiply HL by 10
04F8   85                     ADD   a,l   ; Add A to HL
04F9   6F                     LD   l,a   ; Store result back in L
04FA   3E 00                  LD   a,0   ; Clear A
04FC   8C                     ADC   a,h   ; Add carry to H
04FD   67                     LD   h,a   ; Store result back in H
04FE   18 E8                  JR   decimal1   ; Jump back to start of loop
0500                             ; *****************************************************************************
0500                             ; Routine: nextChar
0500                             ; 
0500                             ; Purpose:
0500                             ;    Fetches the next character from the BUFFER. If the BUFFER is empty or
0500                             ;    contains a null character (0), it refills the BUFFER by calling nextLine.
0500                             ; 
0500                             ; Inputs:
0500                             ;    None
0500                             ; 
0500                             ; Outputs:
0500                             ;    A - The next character from the BUFFER
0500                             ; 
0500                             ; Registers Destroyed:
0500                             ;    A, D, E, HL
0500                             ; *****************************************************************************
0500                NEXTCHAR:      
0500   21 87 31               LD   hl,vBufferPos   ; Load the offset of BUFFER position variable
0503   7E                     LD   a,(hl)   ; Load the current position offset in the BUFFER into A
0504   FE 80                  CP   BUFFER_SIZE   ; Compare with BUFFER size
0506   CA 17 05               JP   z,nextLine   ; Jump to nextLine if end of BUFFER
0509   11 00 30               LD   de,BUFFER   ; Load the MSB of the BUFFER's address into D
050C   83                     ADD   a,e   ; de += a
050D   5F                     LD   e,a   
050E   3E 00                  LD   a,0   
0510   8A                     ADC   a,d   
0511   57                     LD   d,a   
0512   1A                     LD   a,(de)   ; Load the character at the current BUFFER position into A
0513   34                     INC   (hl)   ; Increment the BUFFER position offset
0514   FE 0A                  CP   "\n"   ; if a != null return else load a new line into buffer
0516   C0                     RET   nz   
0517                NEXTLINE:      
0517   21 00 30               LD   hl,BUFFER   ; Start of the BUFFER
051A   06 80                  LD   b,BUFFER_SIZE   ; Number of bytes to fill
051C                NEXTLINE1:      
051C   CD 81 00               CALL   getchar   ; Get a character from getchar
051F   FE FF                  CP   EOF   ; is it EOF
0521   28 32                  JR   z,nextLine6   
0523   B7                     OR   a   ; is it NULL?
0524   28 04                  JR   z,nextLine2   
0526   FE 03                  CP   CTRL_C   ; is it ctrl-C ?
0528   20 04                  JR   nz,nextLine3   
052A                NEXTLINE2:      
052A   3E FF                  LD   a,EOF   
052C   18 27                  JR   nextLine6   
052E                NEXTLINE3:      
052E   FE 08                  CP   "\b"   ; Check if character is backspace
0530   20 10                  JR   nz,nextLine4   ; If not, proceed to store the character
0532   3E 80                  LD   a,BUFFER_SIZE   
0534   90                     SUB   b   ; Check if at the start of the buffer
0535   28 E5                  JR   z,nextLine1   ; If at the start, ignore backspace
0537   2B                     DEC   hl   ; Move back in the buffer
0538   04                     INC   b   ; Adjust buffer size counter
0539   CD 87 05               CALL   print   ; Erase the character at the current cursor position
053C   1B 5B 50 00            .CSTR   ESC,"[P"   ; Escape sequence for erasing character
0540   18 DA                  JR   nextLine1   
0542                NEXTLINE4:      
0542   CD 87 00               CALL   putchar   ; Echo character to terminal
0545   FE 09                  CP   "\t"   
0547   20 04                  JR   nz,nextLine5   ; if a == CR or NL replace with null
0549   3E 20                  LD   a," "   
054B   18 08                  JR   nextLine6   
054D                NEXTLINE5:      
054D   FE 0D                  CP   "\r"   ; Check if character is carriage return
054F   20 04                  JR   nz,nextLine6   
0551   3E 0A                  LD   a,"\n"   
0553   18 00                  JR   nextLine6   
0555                NEXTLINE6:      
0555   77                     LD   (hl),a   ; Store the character in the BUFFER
0556   23                     INC   hl   ; Move to the next position in the BUFFER
0557   FE FF                  CP   EOF   ; Break loop if character is end of line
0559   28 06                  JR   z,nextLine7   
055B   FE 0A                  CP   "\n"   ; Break loop if character is end of line
055D   28 02                  JR   z,nextLine7   
055F   10 BB                  DJNZ   nextLine1   ; Repeat until BUFFER is full
0561                NEXTLINE7:      
0561   21 87 31               LD   hl,vBufferPos   
0564   36 00                  LD   (hl),0   
0566   18 98                  JR   nextChar   
0568                             ; *****************************************************************************
0568                             ; Routine: rewindChar
0568                             ; 
0568                             ; Purpose:
0568                             ;    Rewinds the BUFFER position by one character, effectively pushing back the
0568                             ;    BUFFER position by one character in the input stream.
0568                             ; 
0568                             ; Inputs:
0568                             ;    None
0568                             ; 
0568                             ; Outputs:
0568                             ;    None
0568                             ; 
0568                             ; Registers Destroyed:
0568                             ;    A
0568                             ; *****************************************************************************
0568                REWINDCHAR:      
0568   3A 87 31               LD   a,(vBufferPos)   ; Load the current position in the BUFFER into A
056B   B7                     OR   a   ; Check if the BUFFER position is zero
056C   C8                     RET   z   ; If zero, nothing to push back, return
056D   3D                     DEC   a   ; Decrement the BUFFER position
056E   32 87 31               LD   (vBufferPos),a   
0571   C9                     RET      
0572                             ; *****************************************************************************
0572                             ; Routine: prompt
0572                             ; 
0572                             ; Purpose:
0572                             ;    Prints a prompt symbol ("> ") to indicate readiness for user input.
0572                             ; 
0572                             ; Inputs:
0572                             ;    None
0572                             ; 
0572                             ; Outputs:
0572                             ;    None
0572                             ; 
0572                             ; Registers Destroyed:
0572                             ;    A, HL
0572                             ; *****************************************************************************
0572                PROMPT:      
0572   CD 87 05               CALL   print   ; Print the null-terminated string (prompt message)
0575   0D 0A 3E 20 00         .CSTR   "\r\n> "   ; Define the prompt message
057A   C9                     RET      ; Return to the caller
057B                             ; *****************************************************************************
057B                             ; Routine: crlf
057B                             ; 
057B                             ; Purpose:
057B                             ;    Prints a carriage return and line feed (new line) to the output.
057B                             ; 
057B                             ; Inputs:
057B                             ;    None
057B                             ; 
057B                             ; Outputs:
057B                             ;    None
057B                             ; 
057B                             ; Registers Destroyed:
057B                             ;    A, HL
057B                             ; *****************************************************************************
057B                CRLF:        
057B   CD 87 05               CALL   print   ; Print the null-terminated string (carriage return and line feed)
057E   0D 0A 00               .CSTR   "\r\n"   ; Define the carriage return and line feed message
0581   C9                     RET      ; Return to the caller
0582                             ; *****************************************************************************
0582                             ; Routine: error
0582                             ; 
0582                             ; Purpose:
0582                             ;    Prints an error message and halts execution.
0582                             ; 
0582                             ; Inputs:
0582                             ;    (Stack) - The address of the error message to be printed
0582                             ; 
0582                             ; Outputs:
0582                             ;    None
0582                             ; 
0582                             ; Registers Destroyed:
0582                             ;    A, HL
0582                             ; *****************************************************************************
0582                ERROR:       
0582   E1                     POP   hl   ; Retrieve the "return" address which is the address of the error message
0583   CD 8E 05               CALL   printStr   ; Call the routine to print the null-terminated string
0586   76                     HALT      ; Halt the CPU
0587                             ; *****************************************************************************
0587                             ; Routine: print
0587                             ; 
0587                             ; Purpose:
0587                             ;    Prints a null-terminated string starting from the address in HL.
0587                             ; 
0587                             ; Inputs:
0587                             ;    HL - Points to the start of the string to be printed
0587                             ; 
0587                             ; Outputs:
0587                             ;    None
0587                             ; 
0587                             ; Registers Destroyed:
0587                             ;    None
0587                             ; *****************************************************************************
0587                PRINT:       
0587   E3                     EX   (sp),hl   ; Swap HL with the value on the stack to preserve HL
0588   CD 9B 05               CALL   printZStr   ; Call the routine to print the null-terminated string
058B   23                     INC   hl   ; Increment HL to skip the null terminator
058C   E3                     EX   (sp),hl   ; Restore the original value of HL from the stack
058D   C9                     RET      ; Return to the caller
058E                             ; *****************************************************************************
058E                             ; Routine: printStr
058E                             ; 
058E                             ; Purpose:
058E                             ;    Prints a Pascal string stored in memory.
058E                             ; 
058E                             ; Inputs:
058E                             ;    HL - Points to the start of the string (first byte is the length)
058E                             ; 
058E                             ; Outputs:
058E                             ;    None
058E                             ; 
058E                             ; Registers Destroyed:
058E                             ;    A, B, HL
058E                             ; *****************************************************************************
058E                PRINTSTR:      
058E   7E                     LD   a,(hl)   ; Load the length of the string
058F   B7                     OR   a   ; Check if the length is zero
0590   C8                     RET   z   ; If zero, return immediately
0591   23                     INC   hl   ; Move HL to the start of the string data
0592   47                     LD   b,a   ; Copy the length to B for looping
0593                PRINTSTR1:      
0593   7E                     LD   a,(hl)   ; Load the next character
0594   CD 87 00               CALL   putchar   ; Call a routine that prints a single character
0597   23                     INC   hl   ; Move to the next character
0598   10 F9                  DJNZ   printStr1   ; Decrement B and jump if not zero
059A   C9                     RET      ; Return from the routine
059B                             ; *****************************************************************************
059B                             ; Routine: printZStr
059B                             ; 
059B                             ; Purpose:
059B                             ;    Prints a null-terminated string stored in memory.
059B                             ; 
059B                             ; Inputs:
059B                             ;    HL - Points to the start of the string to be printed
059B                             ; 
059B                             ; Outputs:
059B                             ;    None
059B                             ; 
059B                             ; Registers Destroyed:
059B                             ;    A, HL
059B                             ; *****************************************************************************
059B                PRINTZSTR:      
059B   18 04                  JR   printZStr2   ; Jump to the loop condition
059D                PRINTZSTR1:      
059D   CD 87 00               CALL   putchar   ; Print the current character
05A0   23                     INC   hl   ; Move to the next character
05A1                PRINTZSTR2:      
05A1   7E                     LD   a,(hl)   ; Load the current character
05A2   B7                     OR   a   ; Check if the character is null
05A3   20 F8                  JR   nz,printZStr1   ; If not null, continue printing
05A5   C9                     RET      ; Return when null character is encountered
05A6                             ; *****************************************************************************
05A6                             ; Routine: hpush
05A6                             ; 
05A6                             ; Purpose:
05A6                             ;    Pushes a 16-bit value onto the heap. The value to be pushed is in DE,
05A6                             ;    and the heap pointer is updated accordingly.
05A6                             ; 
05A6                             ; Inputs:
05A6                             ;    DE - The 16-bit value to be pushed onto the heap.
05A6                             ; 
05A6                             ; Outputs:
05A6                             ;    Updates the heap pointer in vHeapPtr.
05A6                             ; 
05A6                             ; Registers Destroyed:
05A6                             ;    DE, HL
05A6                             ; *****************************************************************************
05A6                HPUSH:       
05A6   D5                     PUSH   de   ; Save DE
05A7   EB                     EX   de,hl   ; Exchange DE and HL to move value to DE
05A8   2A 91 31               LD   hl,(vHeapPtr)   ; Load the current top of the heap into HL
05AB   72                     LD   (hl),d   ; Store the high byte of DE (now in HL) on the heap
05AC   23                     INC   hl   ; Increment HL to point to the next heap position
05AD   73                     LD   (hl),e   ; Store the low byte of DE (now in HL) on the heap
05AE   23                     INC   hl   ; Increment HL to point to the new top of the heap
05AF   22 91 31               LD   (vHeapPtr),hl   ; Update the heap pointer with the new top of the heap
05B2   D1                     POP   de   ; Restore DE
05B3   C9                     RET      ; Return from the subroutine
05B4                             ; ; *****************************************************************************
05B4                             ; ; Routine: hpop
05B4                             ; ;
05B4                             ; ; Purpose:
05B4                             ; ;    Pops a 16-bit value from the heap into HL. The heap pointer is updated
05B4                             ; ;    accordingly.
05B4                             ; ;
05B4                             ; ; Inputs:
05B4                             ; ;    None
05B4                             ; ;
05B4                             ; ; Outputs:
05B4                             ; ;    HL - Contains the 16-bit value popped from the heap.
05B4                             ; ;    Updates the heap pointer in vHeapPtr.
05B4                             ; ;
05B4                             ; ; Registers Destroyed:
05B4                             ; ;    DE, HL
05B4                             ; ; *****************************************************************************
05B4                             ; hpop:
05B4                             ;     push de                 ; Save DE
05B4                             ;     ld hl, (vHeapPtr)       ; Load the current top of the heap into HL
05B4                             ;     dec hl                  ; Decrement HL to point to the high byte of the value
05B4                             ;     ld l, (hl)              ; Load the low byte of the value into L
05B4                             ;     dec hl                  ; Decrement HL to point to the low byte of the value
05B4                             ;     ld h, (hl)              ; Load the high byte of the value into H
05B4                             ;     ld (vHeapPtr), hl       ; Update the heap pointer with the new top of the heap
05B4                             ;     ex de, hl               ; Exchange DE and HL to move the value to HL
05B4                             ;     pop de                  ; Restore DE
05B4                             ;     ret                     ; Return from the subroutine
05B4                             ; *******************************************************************************
05B4                             ; *********  END OF MAIN   ******************************************************
05B4                             ; *******************************************************************************
05B4                ROT_OPCODES:      
05B4   03 52 4C 43            .PSTR   "RLC"   
05B8   03 52 52 43            .PSTR   "RRC"   
05BC   02 52 4C               .PSTR   "RL"   
05BF   02 52 52               .PSTR   "RR"   
05C2   03 53 4C 41            .PSTR   "SLA"   
05C6   03 53 52 41            .PSTR   "SRA"   
05CA   03 53 4C 4C            .PSTR   "SLL"   
05CE   03 53 52 4C            .PSTR   "SRL"   
05D2   00                     .PSTR   ""   ; terminate list with a string of zero length
05D3                ALU_OPCODES:      
05D3   03 41 44 44            .PSTR   "ADD"   
05D7   03 41 44 43            .PSTR   "ADC"   
05DB   03 53 55 42            .PSTR   "SUB"   
05DF   03 53 42 43            .PSTR   "SBC"   
05E3   03 41 4E 44            .PSTR   "AND"   
05E7   03 58 4F 52            .PSTR   "XOR"   
05EB   02 4F 52               .PSTR   "OR"   
05EE   02 43 50               .PSTR   "CP"   
05F1   00                     .PSTR   ""   ; terminate list with a string of zero length
05F2                BLI_OPCODES:      
05F2   03 4C 44 49            .PSTR   "LDI"   
05F6   03 43 50 49            .PSTR   "CPI"   
05FA   03 49 4E 49            .PSTR   "INI"   
05FE   04 4F 55 54 49         .PSTR   "OUTI"   
0603   03 4C 44 44            .PSTR   "LDD"   
0607   03 43 50 44            .PSTR   "CPD"   
060B   03 49 4E 44            .PSTR   "IND"   
060F   04 4F 55 54 44         .PSTR   "OUTD"   
0614   04 4C 44 49 52         .PSTR   "LDIR"   
0619   04 43 50 49 52         .PSTR   "CPIR"   
061E   04 49 4E 49 52         .PSTR   "INIR"   
0623   04 4F 54 49 52         .PSTR   "OTIR"   
0628   04 4C 44 44 52         .PSTR   "LDDR"   
062D   04 43 50 44 52         .PSTR   "CPDR"   
0632   04 49 4E 44 52         .PSTR   "INDR"   
0637   04 4F 54 44 52         .PSTR   "OTDR"   
063C   00                     .PSTR   ""   ; terminate list with a string of zero length
063D                GEN1_OPCODES:      
063D   03 43 43 46            .PSTR   "CCF"   
0641   03 43 50 4C            .PSTR   "CPL"   
0645   03 44 41 41            .PSTR   "DAA"   
0649   02 44 49               .PSTR   "DI"   
064C   02 45 49               .PSTR   "EI"   
064F   04 48 41 4C 54         .PSTR   "HALT"   
0654   03 4E 4F 50            .PSTR   "NOP"   
0658   04 52 4C 43 41         .PSTR   "RLCA"   
065D   03 52 53 54            .PSTR   "RST"   
0661   03 53 43 46            .PSTR   "SCF"   
0665   00                     .PSTR   ""   ; terminate list with a string of zero length
0666                GEN2_OPCODES:      
0666   03 42 49 54            .PSTR   "BIT"   
066A   04 43 41 4C 4C         .PSTR   "CALL"   
066F   03 44 45 43            .PSTR   "DEC"   
0673   04 44 4A 4E 5A         .PSTR   "DJNZ"   
0678   02 45 58               .PSTR   "EX"   
067B   03 45 58 58            .PSTR   "EXX"   
067F   02 49 4D               .PSTR   "IM"   
0682   02 49 4E               .PSTR   "IN"   
0685   03 49 4E 43            .PSTR   "INC"   
0689   02 4A 50               .PSTR   "JP"   
068C   02 4A 52               .PSTR   "JR"   
068F   02 4C 44               .PSTR   "LD"   
0692   03 4E 45 47            .PSTR   "NEG"   
0696   03 4F 55 54            .PSTR   "OUT"   
069A   03 50 4F 50            .PSTR   "POP"   
069E   04 50 55 53 48         .PSTR   "PUSH"   
06A3   03 52 45 53            .PSTR   "RES"   
06A7   03 52 45 54            .PSTR   "RET"   
06AB   04 52 45 54 49         .PSTR   "RETI"   
06B0   04 52 45 54 4E         .PSTR   "RETN"   
06B5   03 52 4C 41            .PSTR   "RLA"   
06B9   03 52 4C 44            .PSTR   "RLD"   
06BD   03 52 52 41            .PSTR   "RRA"   
06C1   04 52 52 43 41         .PSTR   "RRCA"   
06C6   03 52 52 44            .PSTR   "RRD"   
06CA   03 53 45 54            .PSTR   "SET"   
06CE   00                     .PSTR   ""   ; terminate list with a string of zero length
06CF                REG8:        
06CF   01 42                  .PSTR   "B"   
06D1   01 43                  .PSTR   "C"   
06D3   01 44                  .PSTR   "D"   
06D5   01 45                  .PSTR   "E"   
06D7   01 48                  .PSTR   "H"   
06D9   01 4C                  .PSTR   "L"   
06DB   01 20                  .PSTR   " "   ; don't match, stand-in for (HL)
06DD   01 41                  .PSTR   "A"   
06DF   01 49                  .PSTR   "I"   
06E1   01 52                  .PSTR   "R"   
06E3   00                     .PSTR   ""   ; terminate list with a string of zero length
06E4                REG16:       
06E4   02 42 43               .PSTR   "BC"   
06E7   02 44 45               .PSTR   "DE"   
06EA   02 48 4C               .PSTR   "HL"   
06ED   02 53 50               .PSTR   "SP"   
06F0   02 49 58               .PSTR   "IX"   
06F3   02 49 59               .PSTR   "IY"   
06F6   03 41 46 27            .PSTR   "AF'"   
06FA   02 41 46               .PSTR   "AF"   ; NOTE: AF has the same code as SP in some instructions
06FD   00                     .PSTR   ""   ; terminate list with a string of zero length
06FE                FLAGS:       
06FE   02 4E 5A               .PSTR   "NZ"   
0701   01 5A                  .PSTR   "Z"   
0703   02 4E 43               .PSTR   "NC"   
0706   01 43                  .PSTR   "C"   
0708   02 50 4F               .PSTR   "PO"   
070B   02 50 45               .PSTR   "PE"   
070E   01 50                  .PSTR   "P"   
0710   01 4D                  .PSTR   "M"   
0712   00                     .PSTR   ""   ; terminate list with a string of zero length
0713                DIRECTIVES:      
0713   06 2E 41 4C 49 47 4E   .PSTR   ".ALIGN"   
071A   03 2E 44 42            .PSTR   ".DB"   
071E   04 2E 4F 52 47         .PSTR   ".ORG"   
0723   04 2E 53 45 54         .PSTR   ".SET"   
0728   00                     .PSTR   ""   ; terminate list with a string of zero length
0729                             ; *******************************************************************************
0729                             ; *********  END OF DATA   ******************************************************
0729                             ; *******************************************************************************
3000                          .ORG   RAMSTART   
3000                          ALIGN   $100   
3000                BUFFER:   DS   BUFFER_SIZE   ; line BUFFER, page aligned
3080                          DS   $100   
3180                STACK:       ; grows down
3180                VTEMP1:   DS   2   ; temp var 1
3182                VTEMP2:   DS   2   ; temp var 2
3184                VTOKEN:   DS   1   ; BUFFER for pushed back token
3185                VTOKENVAL:   DS   2   ; BUFFER for pushed back token value
3187                VBUFFERPOS:   DS   2   ; pointer to char position into input BUFFER
3189                VASMPTR:   DS   2   ; pointer to ASSEMBLY point
318B                VSTRPTR:   DS   2   ; pointer to string STACK
318D                VSYMPTR:   DS   2   ; pointer to symbol STACK
318F                VEXPRPTR:   DS   2   ; pointer to expression STACK
3191                VHEAPPTR:   DS   2   ; pointer to expression STACK
3193                VOPCODE:   DS   1   
3194                VOPERAND1:   DS   1   
3195                VOPERAND2:   DS   1   
3196                VOPEXPR:   DS   2   
3198                VOPDISP:   DS   2   
319A                RST08:    DS   2   
319C                RST10:    DS   2   
319E                RST18:    DS   2   
31A0                RST20:    DS   2   
31A2                RST28:    DS   2   
31A4                RST30:    DS   2   
31A6                BAUD:     DS   2   
31A8                INTVEC:   DS   2   
31AA                NMIVEC:   DS   2   
31AC                GETCVEC:   DS   2   
31AE                PUTCVEC:   DS   2   
31B0                STRINGS:   DS   STRS_SIZE   ; string heap - grows up
32B0                HEAP:     DS   HEAP_SIZE   ; expression heap - grows up
33B0                ASSEMBLY:      
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000   31 80 31               LD   sp,STACK   
4003                             ; call describe
4003                             ; .cstr "It should do nothing"
4003                             ; call test
4003                             ; .db 0
4003                             ; call expect
4003                             ; .db 0
4003   CD 47 40               CALL   describe   
4006   49 74 20 73 68 6F 75 6C 64 20 61 73 73 65 6D 62 6C 65 20 6F 6E 65 20 69 6E 73 74 72 75 63 74 69 6F 6E 00 .CSTR   "It should assemble one instruction"   
4029   CD 50 40               CALL   test   
402C   68 61 6C 74            DB   "halt"   
4030   00                     DB   0   
4031   CD 84 40               CALL   expectCode   
4034   65 FF FF               DB   HALT_,-1,-1   
4037                             ; call expect
4037                             ; .db 01, $76
4037   CD 87 05               CALL   print   
403A   44 6F 6E 65 21 00      .CSTR   "Done!"   
4040   76                     HALT      
4041                             ; *****************************************************************************
4041                             ; Test variables
4041                             ; *****************************************************************************
4041                TBDESC:      
4041   00 00                  DW   0   ; Address of the description
4043                TBTEXT:      
4043   00 00                  DW   0   ; Address of the test text
4045                TBPTR:       
4045   00 00                  DW   0   ; Pointer to the current position in the test text
4047                             ; *****************************************************************************
4047                             ; Routine: describe
4047                             ; 
4047                             ; Purpose:
4047                             ;    Stores the address of a description string in tbDesc and then skips the string.
4047                             ; 
4047                             ; Inputs:
4047                             ;    HL - Address of the description string
4047                             ; 
4047                             ; Outputs:
4047                             ;    None
4047                             ; 
4047                             ; Registers Destroyed:
4047                             ;    HL
4047                             ; *****************************************************************************
4047                DESCRIBE:      
4047   E1                     POP   hl   ; Retrieve the return address (address of the description string)
4048   22 41 40               LD   (tbDesc),hl   ; Store the address in tbDesc
404B   CD 3A 41               CALL   skipZStr   ; Skip the description string
404E   23                     INC   hl   ; Move to the next byte after the null terminator
404F   E9                     JP   (hl)   ; Jump to the address specified by the next byte
4050                             ; *****************************************************************************
4050                             ; Routine: test
4050                             ; 
4050                             ; Purpose:
4050                             ;    Stores the address of a test text in tbText and tbPtr, and then skips the string.
4050                             ; 
4050                             ; Inputs:
4050                             ;    HL - Address of the test text
4050                             ; 
4050                             ; Outputs:
4050                             ;    None
4050                             ; 
4050                             ; Registers Destroyed:
4050                             ;    HL
4050                             ; *****************************************************************************
4050                TEST:        
4050   E1                     POP   hl   ; Retrieve the return address (address of the test text)
4051   22 43 40               LD   (tbText),hl   ; Store the address in tbText
4054   22 45 40               LD   (tbPtr),hl   ; Initialize tbPtr with the address of the test text
4057   CD 3A 41               CALL   skipZStr   ; Skip the test text string
405A   23                     INC   hl   ; Move to the next byte after the null terminator
405B   E5                     PUSH   hl   ; push new return address
405C   CD 98 01               CALL   init   ; Initialize the environment
405F   21 10 41               LD   hl,testGetCharImpl   ; Load the address of testGetCharImpl
4062   22 AC 31               LD   (GETCVEC),hl   ; Set the GETCVEC to point to testGetCharImpl
4065   C3 FD 01               JP   statementList   
4068                             ; *****************************************************************************
4068                             ; Routine: expect
4068                             ; 
4068                             ; Purpose:
4068                             ;    Initializes the environment, sets up the testGetCharImpl, executes the statementList,
4068                             ;    and compares the result with the expected output.
4068                             ; 
4068                             ; Inputs:
4068                             ;    None
4068                             ; 
4068                             ; Outputs:
4068                             ;    None
4068                             ; 
4068                             ; Registers Destroyed:
4068                             ;    HL, DE
4068                             ; *****************************************************************************
4068                EXPECT:      
4068   E1                     POP   hl   ; Retrieve the return address
4069   11 B0 33               LD   de,ASSEMBLY   ; Load the expected output address into DE
406C   CD 4D 04               CALL   compareStr   ; Compare the result with the expected output
406F   20 01                  JR   nz,expect1   ; If comparison fails, jump to expect1
4071   E9                     JP   (hl)   ; If comparison succeeds, jump to the return address
4072                EXPECT1:      
4072   CD 87 05               CALL   print   ; Print the failure message
4075   46 61 69 6C 65 64 21 00 .CSTR   "Failed!"   
407D   2A 43 40               LD   hl,(tbText)   ; Load the address of the test text
4080   CD 9B 05               CALL   printZStr   ; Print the test text
4083   76                     HALT      ; Halt the program
4084                EXPECTCODE:      
4084   E1                     POP   hl   
4085   11 93 31               LD   de,vOpcode   
4088   1A                     LD   a,(de)   
4089   BE                     CP   (hl)   
408A   20 12                  JR   nz,expectCode1   
408C   23                     INC   hl   
408D   11 94 31               LD   de,vOperand1   
4090   1A                     LD   a,(de)   
4091   BE                     CP   (hl)   
4092   20 27                  JR   nz,expectCode2   
4094   23                     INC   hl   
4095   11 95 31               LD   de,vOperand2   
4098   1A                     LD   a,(de)   
4099   BE                     CP   (hl)   
409A   20 3F                  JR   nz,expectCode3   
409C   23                     INC   hl   
409D   E9                     JP   (hl)   
409E                EXPECTCODE1:      
409E   CD 87 05               CALL   print   
40A1   57 72 6F 6E 67 20 6F 70 63 6F 64 65 2C 20 65 78 70 65 63 74 65 64 20 00 .CSTR   "Wrong opcode, expected "   
40B9   18 40                  JR   expectCode4   
40BB                EXPECTCODE2:      
40BB   CD 87 05               CALL   print   
40BE   57 72 6F 6E 67 20 6F 70 65 72 61 6E 64 20 31 2C 20 65 78 70 65 63 74 65 64 20 00 .CSTR   "Wrong operand 1, expected "   
40D9   18 20                  JR   expectCode4   
40DB                EXPECTCODE3:      
40DB   CD 87 05               CALL   print   
40DE   57 72 6F 6E 67 20 6F 70 65 72 61 6E 64 20 32 2C 20 65 78 70 65 63 74 65 64 20 00 .CSTR   "Wrong operand 2, expected "   
40F9   18 00                  JR   expectCode4   
40FB                EXPECTCODE4:      
40FB   CD 1B 41               CALL   printHex   
40FE   EB                     EX   de,hl   
40FF   CD 87 05               CALL   print   
4102   72 65 63 65 69 76 65 64 20 00 .CSTR   "received "   
410C   CD 1B 41               CALL   printHex   
410F   76                     HALT      
4110                             ; *****************************************************************************
4110                             ; Routine: testGetCharImpl
4110                             ; 
4110                             ; Purpose:
4110                             ;    Retrieves the next character from the test text.
4110                             ; 
4110                             ; Inputs:
4110                             ;    tbPtr - Pointer to the current position in the test text
4110                             ; 
4110                             ; Outputs:
4110                             ;    A - The next character from the test text
4110                             ; 
4110                             ; Registers Destroyed:
4110                             ;    A, HL
4110                             ; *****************************************************************************
4110                TESTGETCHARIMPL:      
4110   E5                     PUSH   hl   ; Save HL register
4111   2A 45 40               LD   hl,(tbPtr)   ; Load the current pointer from tbPtr
4114   7E                     LD   a,(hl)   ; Load the next character from the test text
4115   23                     INC   hl   ; Move to the next character
4116   22 45 40               LD   (tbPtr),hl   ; Update tbPtr with the new pointer
4119   E1                     POP   hl   ; Restore HL register
411A   C9                     RET      ; Return with the character in A
411B                             ; *****************************************************************************
411B                             ; Routine: printHex
411B                             ; 
411B                             ; Purpose:
411B                             ;    Displays the 16-bit value in the HL register as a hexadecimal number.
411B                             ; 
411B                             ; Inputs:
411B                             ;    HL - The 16-bit value to be displayed.
411B                             ; 
411B                             ; Outputs:
411B                             ;    None
411B                             ; 
411B                             ; Registers Destroyed:
411B                             ;    A, C
411B                             ; *****************************************************************************
411B                PRINTHEX:      
411B   C5                     PUSH   bc   ; Preserve the BC register pair
411C   7C                     LD   a,h   ; Load the high byte of HL into A
411D   CD 26 41               CALL   printHex2   ; Print the high byte as hex
4120   7D                     LD   a,l   ; Load the low byte of HL into A
4121   CD 26 41               CALL   printHex2   ; Print the low byte as hex
4124   C1                     POP   bc   ; Restore the BC register pair
4125   C9                     RET      ; Return from the routine
4126                PRINTHEX2:      
4126   4F                     LD   c,a   ; Copy the value in A to C
4127   1F                     RRA      ; Shift the high nibble to the low nibble
4128   1F                     RRA      
4129   1F                     RRA      
412A   1F                     RRA      
412B   CD 2F 41               CALL   printHex3   ; Print the high nibble as hex
412E   79                     LD   a,c   ; Restore the original value to A
412F                PRINTHEX3:      
412F   E6 0F                  AND   0x0F   ; Mask out the upper nibble
4131   C6 90                  ADD   a,0x90   ; Add 0x90 to adjust for the ASCII range
4133   27                     DAA      ; Decimal adjust A to get the correct ASCII value
4134   CE 40                  ADC   a,0x40   ; Add 0x40 to get the ASCII character for 0-9/A-F
4136   27                     DAA      ; Decimal adjust A to get the correct ASCII value
4137   C3 87 00               JP   putchar   ; Jump to the putchar routine to display the character
413A                             ; 
413A                             ; *****************************************************************************
413A                             ; Routine: skipZStr
413A                             ; 
413A                             ; Purpose:
413A                             ;    Skips over a null-terminated string in memory, advancing the HL register
413A                             ;    to the character following the null terminator.
413A                             ; 
413A                             ; Inputs:
413A                             ;    HL - Points to the start of the string to skip.
413A                             ; 
413A                             ; Outputs:
413A                             ;    HL - Points to the character immediately after the null terminator.
413A                             ; 
413A                             ; Registers Destroyed:
413A                             ;    A
413A                             ; *****************************************************************************
413A                SKIPZSTR:      
413A   18 01                  JR   skipZStr2   ; Jump to the character loading step
413C                SKIPZSTR1:      
413C   23                     INC   hl   ; Move to the next character
413D                SKIPZSTR2:      
413D   7E                     LD   a,(hl)   ; Load the current character
413E   B7                     OR   a   ; Check if the character is null
413F   20 FB                  JR   nz,skipZStr1   ; If not null, continue to the next character
4141   C9                     RET      ; Return when a null character is found
4142                             ; call test
4142                             ; ; .db "label1: LD A, 42;comment\r\n"
4142                             ; ; .db "halt"
4142                             ; .db 0


ROMSTART:           0000 DEFINED AT LINE 1 IN constants.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 116 IN IOSerial.asm
                    > USED AT LINE 122 IN IOSerial.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 134 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 146 IN IOSerial.asm
                    > USED AT LINE 152 IN IOSerial.asm
                    > USED AT LINE 158 IN IOSerial.asm
                    > USED AT LINE 200 IN IOSerial.asm
                    > USED AT LINE 17 IN MAIN.asm
RAMSTART:           3000 DEFINED AT LINE 2 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            3000 DEFINED AT LINE 3 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 4 IN constants.asm
EOF:                00-1 DEFINED AT LINE 6 IN constants.asm
                    > USED AT LINE 409 IN MAIN.asm
                    > USED AT LINE 1039 IN MAIN.asm
                    > USED AT LINE 1047 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
NULL:               0000 DEFINED AT LINE 7 IN constants.asm
                    > USED AT LINE 328 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 8 IN constants.asm
                    > USED AT LINE 1043 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 9 IN constants.asm
ESC:                001B DEFINED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 1060 IN MAIN.asm
NO_MATCH:           00-1 DEFINED AT LINE 11 IN constants.asm
BUFFER_SIZE:        0080 DEFINED AT LINE 13 IN constants.asm
                    > USED AT LINE 1020 IN MAIN.asm
                    > USED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 1053 IN MAIN.asm
                    > USED AT LINE 5 IN ram.asm
STRS_SIZE:          0100 DEFINED AT LINE 14 IN constants.asm
                    > USED AT LINE 40 IN ram.asm
HEAP_SIZE:          0100 DEFINED AT LINE 15 IN constants.asm
                    > USED AT LINE 41 IN ram.asm
TOKENS:             0000 DEFINED AT LINE 17 IN constants.asm
COLON_:             000: DEFINED AT LINE 19 IN constants.asm
COMMA_:             000, DEFINED AT LINE 20 IN constants.asm
                    > USED AT LINE 183 IN MAIN.asm
                    > USED AT LINE 320 IN MAIN.asm
DIRECT_:            000D DEFINED AT LINE 21 IN constants.asm
                    > USED AT LINE 172 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
DOLLAR_:            000$ DEFINED AT LINE 22 IN constants.asm
                    > USED AT LINE 492 IN MAIN.asm
EOF_:               000E DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 125 IN MAIN.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
                    > USED AT LINE 411 IN MAIN.asm
IDENT_:             000I DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 476 IN MAIN.asm
LABEL_:             000L DEFINED AT LINE 25 IN constants.asm
                    > USED AT LINE 163 IN MAIN.asm
                    > USED AT LINE 445 IN MAIN.asm
LPAREN_:            000( DEFINED AT LINE 26 IN constants.asm
                    > USED AT LINE 223 IN MAIN.asm
NEWLN_:             000
 DEFINED AT LINE 27 IN constants.asm
                    > USED AT LINE 127 IN MAIN.asm
                    > USED AT LINE 161 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 421 IN MAIN.asm
NUM_:               0009 DEFINED AT LINE 28 IN constants.asm
                    > USED AT LINE 487 IN MAIN.asm
                    > USED AT LINE 505 IN MAIN.asm
OPCODE_:            000C DEFINED AT LINE 29 IN constants.asm
                    > USED AT LINE 170 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
OPELEM_:            000M DEFINED AT LINE 30 IN constants.asm
                    > USED AT LINE 220 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
                    > USED AT LINE 463 IN MAIN.asm
RPAREN_:            000) DEFINED AT LINE 31 IN constants.asm
                    > USED AT LINE 257 IN MAIN.asm
                    > USED AT LINE 318 IN MAIN.asm
UNKNOWN_:           000U DEFINED AT LINE 32 IN constants.asm
                    > USED AT LINE 515 IN MAIN.asm
ALU_:               0000 DEFINED AT LINE 34 IN constants.asm
                    > USED AT LINE 42 IN constants.asm
                    > USED AT LINE 43 IN constants.asm
                    > USED AT LINE 44 IN constants.asm
                    > USED AT LINE 45 IN constants.asm
                    > USED AT LINE 46 IN constants.asm
                    > USED AT LINE 47 IN constants.asm
                    > USED AT LINE 48 IN constants.asm
                    > USED AT LINE 49 IN constants.asm
ROT_:               0020 DEFINED AT LINE 35 IN constants.asm
                    > USED AT LINE 53 IN constants.asm
                    > USED AT LINE 54 IN constants.asm
                    > USED AT LINE 55 IN constants.asm
                    > USED AT LINE 56 IN constants.asm
                    > USED AT LINE 57 IN constants.asm
                    > USED AT LINE 58 IN constants.asm
                    > USED AT LINE 59 IN constants.asm
                    > USED AT LINE 60 IN constants.asm
BLI_:               0040 DEFINED AT LINE 36 IN constants.asm
                    > USED AT LINE 64 IN constants.asm
                    > USED AT LINE 65 IN constants.asm
                    > USED AT LINE 66 IN constants.asm
                    > USED AT LINE 67 IN constants.asm
                    > USED AT LINE 68 IN constants.asm
                    > USED AT LINE 69 IN constants.asm
                    > USED AT LINE 70 IN constants.asm
                    > USED AT LINE 71 IN constants.asm
                    > USED AT LINE 72 IN constants.asm
                    > USED AT LINE 73 IN constants.asm
                    > USED AT LINE 74 IN constants.asm
                    > USED AT LINE 75 IN constants.asm
                    > USED AT LINE 76 IN constants.asm
                    > USED AT LINE 77 IN constants.asm
                    > USED AT LINE 78 IN constants.asm
                    > USED AT LINE 79 IN constants.asm
GEN1_:              0060 DEFINED AT LINE 37 IN constants.asm
                    > USED AT LINE 83 IN constants.asm
                    > USED AT LINE 84 IN constants.asm
                    > USED AT LINE 85 IN constants.asm
                    > USED AT LINE 86 IN constants.asm
                    > USED AT LINE 87 IN constants.asm
                    > USED AT LINE 88 IN constants.asm
                    > USED AT LINE 89 IN constants.asm
                    > USED AT LINE 90 IN constants.asm
                    > USED AT LINE 92 IN constants.asm
GEN2_:              0080 DEFINED AT LINE 38 IN constants.asm
                    > USED AT LINE 91 IN constants.asm
                    > USED AT LINE 96 IN constants.asm
                    > USED AT LINE 97 IN constants.asm
                    > USED AT LINE 98 IN constants.asm
                    > USED AT LINE 99 IN constants.asm
                    > USED AT LINE 100 IN constants.asm
                    > USED AT LINE 101 IN constants.asm
                    > USED AT LINE 102 IN constants.asm
                    > USED AT LINE 103 IN constants.asm
                    > USED AT LINE 104 IN constants.asm
                    > USED AT LINE 105 IN constants.asm
                    > USED AT LINE 106 IN constants.asm
                    > USED AT LINE 107 IN constants.asm
                    > USED AT LINE 108 IN constants.asm
                    > USED AT LINE 109 IN constants.asm
                    > USED AT LINE 110 IN constants.asm
                    > USED AT LINE 111 IN constants.asm
                    > USED AT LINE 112 IN constants.asm
                    > USED AT LINE 113 IN constants.asm
                    > USED AT LINE 114 IN constants.asm
                    > USED AT LINE 115 IN constants.asm
                    > USED AT LINE 116 IN constants.asm
                    > USED AT LINE 117 IN constants.asm
                    > USED AT LINE 118 IN constants.asm
                    > USED AT LINE 119 IN constants.asm
                    > USED AT LINE 120 IN constants.asm
                    > USED AT LINE 121 IN constants.asm
ALU_IDX:            0000 DEFINED AT LINE 40 IN constants.asm
ADD_:               0000 DEFINED AT LINE 42 IN constants.asm
ADC_:               0001 DEFINED AT LINE 43 IN constants.asm
SUB_:               0002 DEFINED AT LINE 44 IN constants.asm
SBC_:               0003 DEFINED AT LINE 45 IN constants.asm
AND_:               0004 DEFINED AT LINE 46 IN constants.asm
XOR_:               0005 DEFINED AT LINE 47 IN constants.asm
OR_:                0006 DEFINED AT LINE 48 IN constants.asm
CP_:                0007 DEFINED AT LINE 49 IN constants.asm
ROT_IDX:            0000 DEFINED AT LINE 51 IN constants.asm
RLC_:               0020 DEFINED AT LINE 53 IN constants.asm
RRC_:               0021 DEFINED AT LINE 54 IN constants.asm
RL_:                0022 DEFINED AT LINE 55 IN constants.asm
RR_:                0023 DEFINED AT LINE 56 IN constants.asm
SLA_:               0024 DEFINED AT LINE 57 IN constants.asm
SRA_:               0025 DEFINED AT LINE 58 IN constants.asm
SLL_:               0026 DEFINED AT LINE 59 IN constants.asm
SRL_:               0027 DEFINED AT LINE 60 IN constants.asm
BLI_IDX:            0000 DEFINED AT LINE 62 IN constants.asm
LDI_:               0040 DEFINED AT LINE 64 IN constants.asm
CPI_:               0041 DEFINED AT LINE 65 IN constants.asm
INI_:               0042 DEFINED AT LINE 66 IN constants.asm
OUTI_:              0043 DEFINED AT LINE 67 IN constants.asm
LDD_:               0044 DEFINED AT LINE 68 IN constants.asm
CPD_:               0045 DEFINED AT LINE 69 IN constants.asm
IND_:               0046 DEFINED AT LINE 70 IN constants.asm
OUTD_:              0047 DEFINED AT LINE 71 IN constants.asm
LDIR_:              0048 DEFINED AT LINE 72 IN constants.asm
CPIR_:              0049 DEFINED AT LINE 73 IN constants.asm
INIR_:              004A DEFINED AT LINE 74 IN constants.asm
OTIR_:              004B DEFINED AT LINE 75 IN constants.asm
LDDR_:              004C DEFINED AT LINE 76 IN constants.asm
CPDR_:              004D DEFINED AT LINE 77 IN constants.asm
INDR_:              004E DEFINED AT LINE 78 IN constants.asm
OTDR_:              004F DEFINED AT LINE 79 IN constants.asm
GEN1_IDX:           0000 DEFINED AT LINE 81 IN constants.asm
CCF_:               0060 DEFINED AT LINE 83 IN constants.asm
CPL_:               0061 DEFINED AT LINE 84 IN constants.asm
DAA_:               0062 DEFINED AT LINE 85 IN constants.asm
DI_:                0063 DEFINED AT LINE 86 IN constants.asm
EI_:                0064 DEFINED AT LINE 87 IN constants.asm
HALT_:              0065 DEFINED AT LINE 88 IN constants.asm
                    > USED AT LINE 34
NOP_:               0066 DEFINED AT LINE 89 IN constants.asm
RLCA_:              0067 DEFINED AT LINE 90 IN constants.asm
RST_:               0088 DEFINED AT LINE 91 IN constants.asm
SCF_:               0069 DEFINED AT LINE 92 IN constants.asm
GEN2_IDX:           0000 DEFINED AT LINE 94 IN constants.asm
BIT_:               0080 DEFINED AT LINE 96 IN constants.asm
CALL_:              0081 DEFINED AT LINE 97 IN constants.asm
DEC_:               0082 DEFINED AT LINE 98 IN constants.asm
DJNZ_:              0083 DEFINED AT LINE 99 IN constants.asm
EX_:                0084 DEFINED AT LINE 100 IN constants.asm
EXX_:               0085 DEFINED AT LINE 101 IN constants.asm
IM_:                0086 DEFINED AT LINE 102 IN constants.asm
IN_:                0087 DEFINED AT LINE 103 IN constants.asm
INC_:               0088 DEFINED AT LINE 104 IN constants.asm
JP_:                0089 DEFINED AT LINE 105 IN constants.asm
JR_:                008A DEFINED AT LINE 106 IN constants.asm
LD_:                008B DEFINED AT LINE 107 IN constants.asm
NEG_:               008C DEFINED AT LINE 108 IN constants.asm
OUT_:               008D DEFINED AT LINE 109 IN constants.asm
POP_:               008E DEFINED AT LINE 110 IN constants.asm
PUSH_:              008F DEFINED AT LINE 111 IN constants.asm
RES_:               0090 DEFINED AT LINE 112 IN constants.asm
RET_:               0091 DEFINED AT LINE 113 IN constants.asm
RETI_:              0092 DEFINED AT LINE 114 IN constants.asm
RETN_:              0093 DEFINED AT LINE 115 IN constants.asm
RLA_:               0094 DEFINED AT LINE 116 IN constants.asm
RLD_:               0095 DEFINED AT LINE 117 IN constants.asm
RRA_:               0096 DEFINED AT LINE 118 IN constants.asm
RRCA_:              0097 DEFINED AT LINE 119 IN constants.asm
RRD_:               0098 DEFINED AT LINE 120 IN constants.asm
SET_:               0003 DEFINED AT LINE 170 IN constants.asm
REG_:               0000 DEFINED AT LINE 123 IN constants.asm
RP_:                0008 DEFINED AT LINE 124 IN constants.asm
                    > USED AT LINE 145 IN constants.asm
                    > USED AT LINE 146 IN constants.asm
                    > USED AT LINE 147 IN constants.asm
                    > USED AT LINE 148 IN constants.asm
                    > USED AT LINE 149 IN constants.asm
                    > USED AT LINE 150 IN constants.asm
                    > USED AT LINE 151 IN constants.asm
                    > USED AT LINE 152 IN constants.asm
FLAG_:              0010 DEFINED AT LINE 125 IN constants.asm
                    > USED AT LINE 156 IN constants.asm
                    > USED AT LINE 157 IN constants.asm
                    > USED AT LINE 158 IN constants.asm
                    > USED AT LINE 159 IN constants.asm
                    > USED AT LINE 160 IN constants.asm
                    > USED AT LINE 161 IN constants.asm
                    > USED AT LINE 162 IN constants.asm
                    > USED AT LINE 163 IN constants.asm
IMMED_:             0020 DEFINED AT LINE 126 IN constants.asm
                    > USED AT LINE 228 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
MEM_:               0040 DEFINED AT LINE 127 IN constants.asm
                    > USED AT LINE 252 IN MAIN.asm
IDX_:               0080 DEFINED AT LINE 128 IN constants.asm
REG8_IDX:           0000 DEFINED AT LINE 130 IN constants.asm
B_:                 0000 DEFINED AT LINE 132 IN constants.asm
C_:                 0013 DEFINED AT LINE 159 IN constants.asm
D_:                 0002 DEFINED AT LINE 134 IN constants.asm
E_:                 0003 DEFINED AT LINE 135 IN constants.asm
H_:                 0004 DEFINED AT LINE 136 IN constants.asm
L_:                 0005 DEFINED AT LINE 137 IN constants.asm
MHL_:               0006 DEFINED AT LINE 138 IN constants.asm
A_:                 0007 DEFINED AT LINE 139 IN constants.asm
I_:                 0008 DEFINED AT LINE 140 IN constants.asm
R_:                 0009 DEFINED AT LINE 141 IN constants.asm
REG16_IDX:          0000 DEFINED AT LINE 143 IN constants.asm
BC_:                0008 DEFINED AT LINE 145 IN constants.asm
DE_:                0009 DEFINED AT LINE 146 IN constants.asm
HL_:                000A DEFINED AT LINE 147 IN constants.asm
SP_:                000B DEFINED AT LINE 148 IN constants.asm
IX_:                000D DEFINED AT LINE 149 IN constants.asm
                    > USED AT LINE 778 IN MAIN.asm
IY_:                000E DEFINED AT LINE 150 IN constants.asm
                    > USED AT LINE 780 IN MAIN.asm
AFP_:               000C DEFINED AT LINE 151 IN constants.asm
AF_:                000F DEFINED AT LINE 152 IN constants.asm
FLAG_IDX:           0000 DEFINED AT LINE 154 IN constants.asm
NZ_:                0010 DEFINED AT LINE 156 IN constants.asm
Z_:                 0011 DEFINED AT LINE 157 IN constants.asm
NC_:                0012 DEFINED AT LINE 158 IN constants.asm
PO_:                0014 DEFINED AT LINE 160 IN constants.asm
PE_:                0015 DEFINED AT LINE 161 IN constants.asm
P_:                 0016 DEFINED AT LINE 162 IN constants.asm
M_:                 0017 DEFINED AT LINE 163 IN constants.asm
DIRECTIVE_IDX:      0000 DEFINED AT LINE 165 IN constants.asm
ALIGN_:             0000 DEFINED AT LINE 167 IN constants.asm
DB_:                0001 DEFINED AT LINE 168 IN constants.asm
ORG_:               0002 DEFINED AT LINE 169 IN constants.asm
TEC_1:              0001 DEFINED AT LINE 174 IN constants.asm
RC2014:             0000 DEFINED AT LINE 175 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 177 IN constants.asm
LOADER:             0000 DEFINED AT LINE 179 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 180 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 33 IN IOSerial.asm
                    > USED AT LINE 478 IN IOSerial.asm
                    > USED AT LINE 500 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 34 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 322 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 36 IN IOSerial.asm
                    > USED AT LINE 326 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 477 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 46 IN IOSerial.asm
                    > USED AT LINE 499 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 50 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 51 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 52 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 53 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 54 IN IOSerial.asm
                    > USED AT LINE 499 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 55 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 56 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 57 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 61 IN IOSerial.asm
                    > USED AT LINE 499 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 62 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 63 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 64 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 68 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 72 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 73 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 74 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 75 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 76 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 77 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 78 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 79 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 87 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 88 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 89 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 90 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 91 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 92 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 93 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 94 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 108 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 109 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 113 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 163 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 483 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 187 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 193 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 196 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 305 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 308 IN IOSerial.asm
                    > USED AT LINE 312 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 320 IN IOSerial.asm
                    > USED AT LINE 469 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 321 IN IOSerial.asm
                    > USED AT LINE 325 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 1038 IN MAIN.asm
PUTCHAR:            0087 DEFINED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 202 IN test.lib.asm
RESET:              008D DEFINED AT LINE 457 IN IOSerial.asm
                    > USED AT LINE 114 IN IOSerial.asm
START:              0180 DEFINED AT LINE 37 IN MAIN.asm
INIT:               0198 DEFINED AT LINE 60 IN MAIN.asm
                    > USED AT LINE 39 IN MAIN.asm
                    > USED AT LINE 58 IN test.lib.asm
PARSE:              01C3 DEFINED AT LINE 95 IN MAIN.asm
                    > USED AT LINE 42 IN MAIN.asm
PARSEERROR:         01EA DEFINED AT LINE 101 IN MAIN.asm
                    > USED AT LINE 128 IN MAIN.asm
                    > USED AT LINE 258 IN MAIN.asm
STATEMENTLIST:      01FD DEFINED AT LINE 122 IN MAIN.asm
                    > USED AT LINE 96 IN MAIN.asm
                    > USED AT LINE 129 IN MAIN.asm
                    > USED AT LINE 61 IN test.lib.asm
STATEMENT:          020C DEFINED AT LINE 148 IN MAIN.asm
                    > USED AT LINE 124 IN MAIN.asm
STATEMENT1:         0234 DEFINED AT LINE 169 IN MAIN.asm
                    > USED AT LINE 164 IN MAIN.asm
INSTRUCTION:        023D DEFINED AT LINE 176 IN MAIN.asm
                    > USED AT LINE 171 IN MAIN.asm
DIRECTIVE:          025A DEFINED AT LINE 190 IN MAIN.asm
                    > USED AT LINE 173 IN MAIN.asm
OPERAND:            025B DEFINED AT LINE 219 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
OPERAND1:           026B DEFINED AT LINE 231 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
OPERAND3:           0282 DEFINED AT LINE 245 IN MAIN.asm
OPERAND2:           0286 DEFINED AT LINE 249 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
OPERAND4:           0290 DEFINED AT LINE 255 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
                    > USED AT LINE 253 IN MAIN.asm
EXPRESSION:         0299 DEFINED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
EXPRESSION1:        02B4 DEFINED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
EXPRESSION2:        02CC DEFINED AT LINE 307 IN MAIN.asm
                    > USED AT LINE 302 IN MAIN.asm
EXPRESSION3:        02DA DEFINED AT LINE 317 IN MAIN.asm
                    > USED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 312 IN MAIN.asm
EXPRESSION4:        02EA DEFINED AT LINE 327 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
                    > USED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 323 IN MAIN.asm
ADDSYMBOL:          02F3 DEFINED AT LINE 350 IN MAIN.asm
                    > USED AT LINE 166 IN MAIN.asm
NEXTTOKEN:          030C DEFINED AT LINE 393 IN MAIN.asm
                    > USED AT LINE 123 IN MAIN.asm
                    > USED AT LINE 167 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
                    > USED AT LINE 300 IN MAIN.asm
                    > USED AT LINE 304 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
NEXTTOKEN0:         031D DEFINED AT LINE 402 IN MAIN.asm
                    > USED AT LINE 395 IN MAIN.asm
                    > USED AT LINE 433 IN MAIN.asm
NEXTTOKEN1:         0320 DEFINED AT LINE 405 IN MAIN.asm
                    > USED AT LINE 408 IN MAIN.asm
NEXTTOKEN2:         032E DEFINED AT LINE 414 IN MAIN.asm
                    > USED AT LINE 410 IN MAIN.asm
NEXTTOKEN3:         033D DEFINED AT LINE 424 IN MAIN.asm
                    > USED AT LINE 416 IN MAIN.asm
                    > USED AT LINE 418 IN MAIN.asm
                    > USED AT LINE 420 IN MAIN.asm
NEXTTOKEN4:         0342 DEFINED AT LINE 428 IN MAIN.asm
                    > USED AT LINE 431 IN MAIN.asm
NEXTTOKEN5:         034E DEFINED AT LINE 435 IN MAIN.asm
                    > USED AT LINE 426 IN MAIN.asm
NEXTTOKEN6:         0357 DEFINED AT LINE 441 IN MAIN.asm
                    > USED AT LINE 437 IN MAIN.asm
NEXTTOKEN7:         0361 DEFINED AT LINE 448 IN MAIN.asm
                    > USED AT LINE 444 IN MAIN.asm
NEXTTOKEN8:         0372 DEFINED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
NEXTTOKEN9:         037D DEFINED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 460 IN MAIN.asm
NEXTTOKEN10:        038B DEFINED AT LINE 475 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
NEXTTOKEN11:        038E DEFINED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 439 IN MAIN.asm
NEXTTOKEN11A:       03A3 DEFINED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
NEXTTOKEN12:        03A9 DEFINED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 482 IN MAIN.asm
NEXTTOKEN13:        03B2 DEFINED AT LINE 501 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
NEXTTOKEN14:        03B5 DEFINED AT LINE 504 IN MAIN.asm
NEXTTOKEN15:        03B8 DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
PUSHBACKTOKEN:      03C4 DEFINED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 330 IN MAIN.asm
IDENT:              03CD DEFINED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 442 IN MAIN.asm
IDENT1:             03D2 DEFINED AT LINE 568 IN MAIN.asm
                    > USED AT LINE 575 IN MAIN.asm
                    > USED AT LINE 577 IN MAIN.asm
IDENT3:             03E2 DEFINED AT LINE 578 IN MAIN.asm
SEARCHSTR:          03ED DEFINED AT LINE 608 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 665 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
SEARCHSTR1:         03F0 DEFINED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
SEARCHSTR3:         03F8 DEFINED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 614 IN MAIN.asm
SEARCHOPCODE:       0407 DEFINED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 451 IN MAIN.asm
SEARCHOPELEM:       0434 DEFINED AT LINE 704 IN MAIN.asm
                    > USED AT LINE 459 IN MAIN.asm
COMPARESTR:         044D DEFINED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 83 IN test.lib.asm
COMPARESTR2:        0453 DEFINED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
COMPARESTR3:        045B DEFINED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 750 IN MAIN.asm
ISINDEXREG:         045F DEFINED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 237 IN MAIN.asm
ISALPHANUM:         0465 DEFINED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
ISALPHA:            0469 DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 438 IN MAIN.asm
ISALPHA1:           0474 DEFINED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
ISDIGIT:            047B DEFINED AT LINE 859 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
NUMBER:             0482 DEFINED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 502 IN MAIN.asm
NUMBER1:            0489 DEFINED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
NUMBER2:            0498 DEFINED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
NUMBER3:            049E DEFINED AT LINE 898 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
NUMBER_HEX:         04AE DEFINED AT LINE 909 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
HEX:                04BA DEFINED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
HEX1:               04BD DEFINED AT LINE 934 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
HEX2:               04CD DEFINED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
UPPER:              04D4 DEFINED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
VALID:              04D6 DEFINED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
DECIMAL:            04E5 DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 897 IN MAIN.asm
DECIMAL1:           04E8 DEFINED AT LINE 981 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
NEXTCHAR:           0500 DEFINED AT LINE 1017 IN MAIN.asm
                    > USED AT LINE 406 IN MAIN.asm
                    > USED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 572 IN MAIN.asm
                    > USED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 982 IN MAIN.asm
                    > USED AT LINE 1089 IN MAIN.asm
NEXTLINE:           0517 DEFINED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 1021 IN MAIN.asm
NEXTLINE1:          051C DEFINED AT LINE 1037 IN MAIN.asm
                    > USED AT LINE 1055 IN MAIN.asm
                    > USED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
NEXTLINE2:          052A DEFINED AT LINE 1046 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
NEXTLINE3:          052E DEFINED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 1044 IN MAIN.asm
NEXTLINE4:          0542 DEFINED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 1052 IN MAIN.asm
NEXTLINE5:          054D DEFINED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
NEXTLINE6:          0555 DEFINED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 1069 IN MAIN.asm
                    > USED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 1075 IN MAIN.asm
NEXTLINE7:          0561 DEFINED AT LINE 1086 IN MAIN.asm
                    > USED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 1083 IN MAIN.asm
REWINDCHAR:         0568 DEFINED AT LINE 1108 IN MAIN.asm
                    > USED AT LINE 432 IN MAIN.asm
                    > USED AT LINE 449 IN MAIN.asm
                    > USED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
PROMPT:             0572 DEFINED AT LINE 1132 IN MAIN.asm
CRLF:               057B DEFINED AT LINE 1153 IN MAIN.asm
ERROR:              0582 DEFINED AT LINE 1174 IN MAIN.asm
PRINT:              0587 DEFINED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 40 IN MAIN.asm
                    > USED AT LINE 97 IN MAIN.asm
                    > USED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 1154 IN MAIN.asm
                    > USED AT LINE 39
                    > USED AT LINE 88 IN test.lib.asm
                    > USED AT LINE 114 IN test.lib.asm
                    > USED AT LINE 119 IN test.lib.asm
                    > USED AT LINE 124 IN test.lib.asm
                    > USED AT LINE 131 IN test.lib.asm
PRINTSTR:           058E DEFINED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 1176 IN MAIN.asm
PRINTSTR1:          0593 DEFINED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1228 IN MAIN.asm
PRINTZSTR:          059B DEFINED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 91 IN test.lib.asm
PRINTZSTR1:         059D DEFINED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
PRINTZSTR2:         05A1 DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
HPUSH:              05A6 DEFINED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 286 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
                    > USED AT LINE 289 IN MAIN.asm
                    > USED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 329 IN MAIN.asm
                    > USED AT LINE 355 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
                    > USED AT LINE 360 IN MAIN.asm
ROT_OPCODES:        05B4 DEFINED AT LINE 1 IN data.asm
                    > USED AT LINE 659 IN MAIN.asm
ALU_OPCODES:        05D3 DEFINED AT LINE 13 IN data.asm
                    > USED AT LINE 655 IN MAIN.asm
BLI_OPCODES:        05F2 DEFINED AT LINE 25 IN data.asm
                    > USED AT LINE 664 IN MAIN.asm
GEN1_OPCODES:       063D DEFINED AT LINE 45 IN data.asm
                    > USED AT LINE 669 IN MAIN.asm
GEN2_OPCODES:       0666 DEFINED AT LINE 59 IN data.asm
                    > USED AT LINE 675 IN MAIN.asm
REG8:               06CF DEFINED AT LINE 89 IN data.asm
                    > USED AT LINE 705 IN MAIN.asm
REG16:              06E4 DEFINED AT LINE 103 IN data.asm
                    > USED AT LINE 709 IN MAIN.asm
FLAGS:              06FE DEFINED AT LINE 115 IN data.asm
                    > USED AT LINE 714 IN MAIN.asm
DIRECTIVES:         0713 DEFINED AT LINE 127 IN data.asm
                    > USED AT LINE 467 IN MAIN.asm
BUFFER:             3000 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 69 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 1034 IN MAIN.asm
STACK:              3180 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 458 IN IOSerial.asm
                    > USED AT LINE 38 IN MAIN.asm
                    > USED AT LINE 15
VTEMP1:             3180 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 889 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
VTEMP2:             3182 DEFINED AT LINE 10 IN ram.asm
VTOKEN:             3184 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 66 IN MAIN.asm
                    > USED AT LINE 394 IN MAIN.asm
                    > USED AT LINE 396 IN MAIN.asm
                    > USED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 538 IN MAIN.asm
VTOKENVAL:          3185 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 397 IN MAIN.asm
                    > USED AT LINE 539 IN MAIN.asm
VBUFFERPOS:         3187 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 67 IN MAIN.asm
                    > USED AT LINE 1018 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 1113 IN MAIN.asm
VASMPTR:            3189 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 73 IN MAIN.asm
                    > USED AT LINE 165 IN MAIN.asm
VSTRPTR:            318B DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 75 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
VSYMPTR:            318D DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 354 IN MAIN.asm
                    > USED AT LINE 356 IN MAIN.asm
VEXPRPTR:           318F DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 285 IN MAIN.asm
                    > USED AT LINE 290 IN MAIN.asm
VHEAPPTR:           3191 DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 71 IN MAIN.asm
                    > USED AT LINE 284 IN MAIN.asm
                    > USED AT LINE 353 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
VOPCODE:            3193 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 151 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
                    > USED AT LINE 96 IN test.lib.asm
VOPERAND1:          3194 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 152 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
                    > USED AT LINE 101 IN test.lib.asm
VOPERAND2:          3195 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
                    > USED AT LINE 106 IN test.lib.asm
VOPEXPR:            3196 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
VOPDISP:            3198 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
RST08:              319A DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 118 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
RST10:              319C DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 124 IN IOSerial.asm
                    > USED AT LINE 461 IN IOSerial.asm
RST18:              319E DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 130 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RST20:              31A0 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 136 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
RST28:              31A2 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
RST30:              31A4 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 148 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
BAUD:               31A6 DEFINED AT LINE 34 IN ram.asm
INTVEC:             31A8 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 154 IN IOSerial.asm
                    > USED AT LINE 466 IN IOSerial.asm
NMIVEC:             31AA DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 202 IN IOSerial.asm
                    > USED AT LINE 467 IN IOSerial.asm
GETCVEC:            31AC DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 447 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
                    > USED AT LINE 60 IN test.lib.asm
PUTCVEC:            31AE DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 453 IN IOSerial.asm
                    > USED AT LINE 472 IN IOSerial.asm
STRINGS:            31B0 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 74 IN MAIN.asm
HEAP:               32B0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 70 IN MAIN.asm
ASSEMBLY:           33B0 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 72 IN MAIN.asm
                    > USED AT LINE 82 IN test.lib.asm
TESTSSTART:         4000 DEFINED AT LINE 14
                    > USED AT LINE 6
TBDESC:             4041 DEFINED AT LINE 5 IN test.lib.asm
                    > USED AT LINE 30 IN test.lib.asm
TBTEXT:             4043 DEFINED AT LINE 7 IN test.lib.asm
                    > USED AT LINE 53 IN test.lib.asm
                    > USED AT LINE 90 IN test.lib.asm
TBPTR:              4045 DEFINED AT LINE 9 IN test.lib.asm
                    > USED AT LINE 54 IN test.lib.asm
                    > USED AT LINE 155 IN test.lib.asm
                    > USED AT LINE 158 IN test.lib.asm
DESCRIBE:           4047 DEFINED AT LINE 28 IN test.lib.asm
                    > USED AT LINE 26
TEST:               4050 DEFINED AT LINE 51 IN test.lib.asm
                    > USED AT LINE 29
EXPECT:             4068 DEFINED AT LINE 80 IN test.lib.asm
EXPECT1:            4072 DEFINED AT LINE 87 IN test.lib.asm
                    > USED AT LINE 84 IN test.lib.asm
EXPECTCODE:         4084 DEFINED AT LINE 94 IN test.lib.asm
                    > USED AT LINE 33
EXPECTCODE1:        409E DEFINED AT LINE 113 IN test.lib.asm
                    > USED AT LINE 99 IN test.lib.asm
EXPECTCODE2:        40BB DEFINED AT LINE 118 IN test.lib.asm
                    > USED AT LINE 104 IN test.lib.asm
EXPECTCODE3:        40DB DEFINED AT LINE 123 IN test.lib.asm
                    > USED AT LINE 109 IN test.lib.asm
EXPECTCODE4:        40FB DEFINED AT LINE 128 IN test.lib.asm
                    > USED AT LINE 116 IN test.lib.asm
                    > USED AT LINE 121 IN test.lib.asm
                    > USED AT LINE 126 IN test.lib.asm
TESTGETCHARIMPL:    4110 DEFINED AT LINE 153 IN test.lib.asm
                    > USED AT LINE 59 IN test.lib.asm
PRINTHEX:           411B DEFINED AT LINE 178 IN test.lib.asm
                    > USED AT LINE 129 IN test.lib.asm
                    > USED AT LINE 133 IN test.lib.asm
PRINTHEX2:          4126 DEFINED AT LINE 187 IN test.lib.asm
                    > USED AT LINE 181 IN test.lib.asm
                    > USED AT LINE 183 IN test.lib.asm
PRINTHEX3:          412F DEFINED AT LINE 196 IN test.lib.asm
                    > USED AT LINE 193 IN test.lib.asm
SKIPZSTR:           413A DEFINED AT LINE 221 IN test.lib.asm
                    > USED AT LINE 31 IN test.lib.asm
                    > USED AT LINE 55 IN test.lib.asm
SKIPZSTR1:          413C DEFINED AT LINE 224 IN test.lib.asm
                    > USED AT LINE 230 IN test.lib.asm
SKIPZSTR2:          413D DEFINED AT LINE 227 IN test.lib.asm
                    > USED AT LINE 222 IN test.lib.asm
